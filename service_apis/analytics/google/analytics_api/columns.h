// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_COLUMNS_H_
#define  GOOGLE_ANALYTICS_API_COLUMNS_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/analytics_api/column.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * Lists columns (dimensions and metrics) for a particular report type.
 *
 * @ingroup DataObject
 */
class Columns : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Columns* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Columns(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Columns(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Columns();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::Columns</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::Columns";
  }

  /**
   * Determine if the '<code>attributeNames</code>' attribute was set.
   *
   * @return true if the '<code>attributeNames</code>' attribute was set.
   */
  bool has_attribute_names() const {
    return Storage().isMember("attributeNames");
  }

  /**
   * Clears the '<code>attributeNames</code>' attribute.
   */
  void clear_attribute_names() {
    MutableStorage()->removeMember("attributeNames");
  }


  /**
   * Get a reference to the value of the '<code>attributeNames</code>'
   * attribute.
   */
  const client::JsonCppArray<string > get_attribute_names() const {
     const Json::Value& storage = Storage("attributeNames");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>attributeNames</code>'
   * property.
   *
   * List of attributes names returned by columns.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_attributeNames() {
    Json::Value* storage = MutableStorage("attributeNames");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>etag</code>' attribute was set.
   *
   * @return true if the '<code>etag</code>' attribute was set.
   */
  bool has_etag() const {
    return Storage().isMember("etag");
  }

  /**
   * Clears the '<code>etag</code>' attribute.
   */
  void clear_etag() {
    MutableStorage()->removeMember("etag");
  }


  /**
   * Get the value of the '<code>etag</code>' attribute.
   */
  const StringPiece get_etag() const {
    const Json::Value& v = Storage("etag");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>etag</code>' attribute.
   *
   * Etag of collection. This etag can be compared with the last response etag
   * to check if response has changed.
   *
   * @param[in] value The new value.
   */
  void set_etag(const StringPiece& value) {
    *MutableStorage("etag") = value.data();
  }

  /**
   * Determine if the '<code>items</code>' attribute was set.
   *
   * @return true if the '<code>items</code>' attribute was set.
   */
  bool has_items() const {
    return Storage().isMember("items");
  }

  /**
   * Clears the '<code>items</code>' attribute.
   */
  void clear_items() {
    MutableStorage()->removeMember("items");
  }


  /**
   * Get a reference to the value of the '<code>items</code>' attribute.
   */
  const client::JsonCppArray<Column > get_items() const;

  /**
   * Gets a reference to a mutable value of the '<code>items</code>' property.
   *
   * List of columns for a report type.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<Column > mutable_items();

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Collection type.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>totalResults</code>' attribute was set.
   *
   * @return true if the '<code>totalResults</code>' attribute was set.
   */
  bool has_total_results() const {
    return Storage().isMember("totalResults");
  }

  /**
   * Clears the '<code>totalResults</code>' attribute.
   */
  void clear_total_results() {
    MutableStorage()->removeMember("totalResults");
  }


  /**
   * Get the value of the '<code>totalResults</code>' attribute.
   */
  int32 get_total_results() const {
    const Json::Value& storage = Storage("totalResults");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>totalResults</code>' attribute.
   *
   * Total number of columns returned in the response.
   *
   * @param[in] value The new value.
   */
  void set_total_results(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("totalResults"));
  }

 private:
  void operator=(const Columns&);
};  // Columns
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_COLUMNS_H_
