// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_EXPERIMENT_H_
#define  GOOGLE_ANALYTICS_API_EXPERIMENT_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * JSON template for Analytics experiment resource.
 *
 * @ingroup DataObject
 */
class Experiment : public client::JsonCppData {
 public:
  /**
   * Parent link for an experiment. Points to the view (profile) to which this
   * experiment belongs.
   *
   * @ingroup DataObject
   */
  class ExperimentParentLink : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static ExperimentParentLink* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ExperimentParentLink(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ExperimentParentLink(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~ExperimentParentLink();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::ExperimentParentLink</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::ExperimentParentLink";
    }

    /**
     * Determine if the '<code>href</code>' attribute was set.
     *
     * @return true if the '<code>href</code>' attribute was set.
     */
    bool has_href() const {
      return Storage().isMember("href");
    }

    /**
     * Clears the '<code>href</code>' attribute.
     */
    void clear_href() {
      MutableStorage()->removeMember("href");
    }


    /**
     * Get the value of the '<code>href</code>' attribute.
     */
    const StringPiece get_href() const {
      const Json::Value& v = Storage("href");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>href</code>' attribute.
     *
     * Link to the view (profile) to which this experiment belongs. This field
     * is read-only.
     *
     * @param[in] value The new value.
     */
    void set_href(const StringPiece& value) {
      *MutableStorage("href") = value.data();
    }

    /**
     * Determine if the '<code>type</code>' attribute was set.
     *
     * @return true if the '<code>type</code>' attribute was set.
     */
    bool has_type() const {
      return Storage().isMember("type");
    }

    /**
     * Clears the '<code>type</code>' attribute.
     */
    void clear_type() {
      MutableStorage()->removeMember("type");
    }


    /**
     * Get the value of the '<code>type</code>' attribute.
     */
    const StringPiece get_type() const {
      const Json::Value& v = Storage("type");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>type</code>' attribute.
     *
     * Value is "analytics#profile". This field is read-only.
     *
     * @param[in] value The new value.
     */
    void set_type(const StringPiece& value) {
      *MutableStorage("type") = value.data();
    }

   private:
    void operator=(const ExperimentParentLink&);
  };  // ExperimentParentLink
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class ExperimentVariations : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static ExperimentVariations* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ExperimentVariations(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ExperimentVariations(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~ExperimentVariations();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::ExperimentVariations</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::ExperimentVariations";
    }

    /**
     * Determine if the '<code>name</code>' attribute was set.
     *
     * @return true if the '<code>name</code>' attribute was set.
     */
    bool has_name() const {
      return Storage().isMember("name");
    }

    /**
     * Clears the '<code>name</code>' attribute.
     */
    void clear_name() {
      MutableStorage()->removeMember("name");
    }


    /**
     * Get the value of the '<code>name</code>' attribute.
     */
    const StringPiece get_name() const {
      const Json::Value& v = Storage("name");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>name</code>' attribute.
     *
     * The name of the variation. This field is required when creating an
     * experiment. This field may not be changed for an experiment whose status
     * is ENDED.
     *
     * @param[in] value The new value.
     */
    void set_name(const StringPiece& value) {
      *MutableStorage("name") = value.data();
    }

    /**
     * Determine if the '<code>status</code>' attribute was set.
     *
     * @return true if the '<code>status</code>' attribute was set.
     */
    bool has_status() const {
      return Storage().isMember("status");
    }

    /**
     * Clears the '<code>status</code>' attribute.
     */
    void clear_status() {
      MutableStorage()->removeMember("status");
    }


    /**
     * Get the value of the '<code>status</code>' attribute.
     */
    const StringPiece get_status() const {
      const Json::Value& v = Storage("status");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>status</code>' attribute.
     *
     * Status of the variation. Possible values: "ACTIVE", "INACTIVE". INACTIVE
     * variations are not served. This field may not be changed for an
     * experiment whose status is ENDED.
     *
     * @param[in] value The new value.
     */
    void set_status(const StringPiece& value) {
      *MutableStorage("status") = value.data();
    }

    /**
     * Determine if the '<code>url</code>' attribute was set.
     *
     * @return true if the '<code>url</code>' attribute was set.
     */
    bool has_url() const {
      return Storage().isMember("url");
    }

    /**
     * Clears the '<code>url</code>' attribute.
     */
    void clear_url() {
      MutableStorage()->removeMember("url");
    }


    /**
     * Get the value of the '<code>url</code>' attribute.
     */
    const StringPiece get_url() const {
      const Json::Value& v = Storage("url");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>url</code>' attribute.
     *
     * The URL of the variation. This field may not be changed for an experiment
     * whose status is RUNNING or ENDED.
     *
     * @param[in] value The new value.
     */
    void set_url(const StringPiece& value) {
      *MutableStorage("url") = value.data();
    }

    /**
     * Determine if the '<code>weight</code>' attribute was set.
     *
     * @return true if the '<code>weight</code>' attribute was set.
     */
    bool has_weight() const {
      return Storage().isMember("weight");
    }

    /**
     * Clears the '<code>weight</code>' attribute.
     */
    void clear_weight() {
      MutableStorage()->removeMember("weight");
    }


    /**
     * Get the value of the '<code>weight</code>' attribute.
     */
    double get_weight() const {
      const Json::Value& storage = Storage("weight");
      return client::JsonValueToCppValueHelper<double >(storage);
    }

    /**
     * Change the '<code>weight</code>' attribute.
     *
     * Weight that this variation should receive. Only present if the experiment
     * is running. This field is read-only.
     *
     * @param[in] value The new value.
     */
    void set_weight(double value) {
      client::SetJsonValueFromCppValueHelper<double >(
        value, MutableStorage("weight"));
    }

    /**
     * Determine if the '<code>won</code>' attribute was set.
     *
     * @return true if the '<code>won</code>' attribute was set.
     */
    bool has_won() const {
      return Storage().isMember("won");
    }

    /**
     * Clears the '<code>won</code>' attribute.
     */
    void clear_won() {
      MutableStorage()->removeMember("won");
    }


    /**
     * Get the value of the '<code>won</code>' attribute.
     */
    bool get_won() const {
      const Json::Value& storage = Storage("won");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>won</code>' attribute.
     *
     * True if the experiment has ended and this variation performed
     * (statistically) significantly better than the original. This field is
     * read-only.
     *
     * @param[in] value The new value.
     */
    void set_won(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("won"));
    }

   private:
    void operator=(const ExperimentVariations&);
  };  // ExperimentVariations
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Experiment* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Experiment(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Experiment(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Experiment();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::Experiment</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::Experiment";
  }

  /**
   * Determine if the '<code>accountId</code>' attribute was set.
   *
   * @return true if the '<code>accountId</code>' attribute was set.
   */
  bool has_account_id() const {
    return Storage().isMember("accountId");
  }

  /**
   * Clears the '<code>accountId</code>' attribute.
   */
  void clear_account_id() {
    MutableStorage()->removeMember("accountId");
  }


  /**
   * Get the value of the '<code>accountId</code>' attribute.
   */
  const StringPiece get_account_id() const {
    const Json::Value& v = Storage("accountId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>accountId</code>' attribute.
   *
   * Account ID to which this experiment belongs. This field is read-only.
   *
   * @param[in] value The new value.
   */
  void set_account_id(const StringPiece& value) {
    *MutableStorage("accountId") = value.data();
  }

  /**
   * Determine if the '<code>created</code>' attribute was set.
   *
   * @return true if the '<code>created</code>' attribute was set.
   */
  bool has_created() const {
    return Storage().isMember("created");
  }

  /**
   * Clears the '<code>created</code>' attribute.
   */
  void clear_created() {
    MutableStorage()->removeMember("created");
  }


  /**
   * Get the value of the '<code>created</code>' attribute.
   */
  client::DateTime get_created() const {
    const Json::Value& storage = Storage("created");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>created</code>' attribute.
   *
   * Time the experiment was created. This field is read-only.
   *
   * @param[in] value The new value.
   */
  void set_created(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("created"));
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * Notes about this experiment.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>editableInGaUi</code>' attribute was set.
   *
   * @return true if the '<code>editableInGaUi</code>' attribute was set.
   */
  bool has_editable_in_ga_ui() const {
    return Storage().isMember("editableInGaUi");
  }

  /**
   * Clears the '<code>editableInGaUi</code>' attribute.
   */
  void clear_editable_in_ga_ui() {
    MutableStorage()->removeMember("editableInGaUi");
  }


  /**
   * Get the value of the '<code>editableInGaUi</code>' attribute.
   */
  bool get_editable_in_ga_ui() const {
    const Json::Value& storage = Storage("editableInGaUi");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>editableInGaUi</code>' attribute.
   *
   * If true, the end user will be able to edit the experiment via the Google
   * Analytics user interface.
   *
   * @param[in] value The new value.
   */
  void set_editable_in_ga_ui(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("editableInGaUi"));
  }

  /**
   * Determine if the '<code>endTime</code>' attribute was set.
   *
   * @return true if the '<code>endTime</code>' attribute was set.
   */
  bool has_end_time() const {
    return Storage().isMember("endTime");
  }

  /**
   * Clears the '<code>endTime</code>' attribute.
   */
  void clear_end_time() {
    MutableStorage()->removeMember("endTime");
  }


  /**
   * Get the value of the '<code>endTime</code>' attribute.
   */
  client::DateTime get_end_time() const {
    const Json::Value& storage = Storage("endTime");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>endTime</code>' attribute.
   *
   * The ending time of the experiment (the time the status changed from RUNNING
   * to ENDED). This field is present only if the experiment has ended. This
   * field is read-only.
   *
   * @param[in] value The new value.
   */
  void set_end_time(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("endTime"));
  }

  /**
   * Determine if the '<code>equalWeighting</code>' attribute was set.
   *
   * @return true if the '<code>equalWeighting</code>' attribute was set.
   */
  bool has_equal_weighting() const {
    return Storage().isMember("equalWeighting");
  }

  /**
   * Clears the '<code>equalWeighting</code>' attribute.
   */
  void clear_equal_weighting() {
    MutableStorage()->removeMember("equalWeighting");
  }


  /**
   * Get the value of the '<code>equalWeighting</code>' attribute.
   */
  bool get_equal_weighting() const {
    const Json::Value& storage = Storage("equalWeighting");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>equalWeighting</code>' attribute.
   *
   * Boolean specifying whether to distribute traffic evenly across all
   * variations. If the value is False, content experiments follows the default
   * behavior of adjusting traffic dynamically based on variation performance.
   * Optional -- defaults to False. This field may not be changed for an
   * experiment whose status is ENDED.
   *
   * @param[in] value The new value.
   */
  void set_equal_weighting(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("equalWeighting"));
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * Experiment ID. Required for patch and update. Disallowed for create.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>internalWebPropertyId</code>' attribute was set.
   *
   * @return true if the '<code>internalWebPropertyId</code>' attribute was set.
   */
  bool has_internal_web_property_id() const {
    return Storage().isMember("internalWebPropertyId");
  }

  /**
   * Clears the '<code>internalWebPropertyId</code>' attribute.
   */
  void clear_internal_web_property_id() {
    MutableStorage()->removeMember("internalWebPropertyId");
  }


  /**
   * Get the value of the '<code>internalWebPropertyId</code>' attribute.
   */
  const StringPiece get_internal_web_property_id() const {
    const Json::Value& v = Storage("internalWebPropertyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>internalWebPropertyId</code>' attribute.
   *
   * Internal ID for the web property to which this experiment belongs. This
   * field is read-only.
   *
   * @param[in] value The new value.
   */
  void set_internal_web_property_id(const StringPiece& value) {
    *MutableStorage("internalWebPropertyId") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Resource type for an Analytics experiment. This field is read-only.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>minimumExperimentLengthInDays</code>' attribute was
   * set.
   *
   * @return true if the '<code>minimumExperimentLengthInDays</code>' attribute
   * was set.
   */
  bool has_minimum_experiment_length_in_days() const {
    return Storage().isMember("minimumExperimentLengthInDays");
  }

  /**
   * Clears the '<code>minimumExperimentLengthInDays</code>' attribute.
   */
  void clear_minimum_experiment_length_in_days() {
    MutableStorage()->removeMember("minimumExperimentLengthInDays");
  }


  /**
   * Get the value of the '<code>minimumExperimentLengthInDays</code>'
   * attribute.
   */
  int32 get_minimum_experiment_length_in_days() const {
    const Json::Value& storage = Storage("minimumExperimentLengthInDays");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>minimumExperimentLengthInDays</code>' attribute.
   *
   * An integer number in [3, 90]. Specifies the minimum length of the
   * experiment. Can be changed for a running experiment. This field may not be
   * changed for an experiments whose status is ENDED.
   *
   * @param[in] value The new value.
   */
  void set_minimum_experiment_length_in_days(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("minimumExperimentLengthInDays"));
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Experiment name. This field may not be changed for an experiment whose
   * status is ENDED. This field is required when creating an experiment.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>objectiveMetric</code>' attribute was set.
   *
   * @return true if the '<code>objectiveMetric</code>' attribute was set.
   */
  bool has_objective_metric() const {
    return Storage().isMember("objectiveMetric");
  }

  /**
   * Clears the '<code>objectiveMetric</code>' attribute.
   */
  void clear_objective_metric() {
    MutableStorage()->removeMember("objectiveMetric");
  }


  /**
   * Get the value of the '<code>objectiveMetric</code>' attribute.
   */
  const StringPiece get_objective_metric() const {
    const Json::Value& v = Storage("objectiveMetric");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>objectiveMetric</code>' attribute.
   *
   * The metric that the experiment is optimizing. Valid values:
   * "ga:goal(n)Completions", "ga:adsenseAdsClicks", "ga:adsenseAdsViewed",
   * "ga:adsenseRevenue", "ga:bounces", "ga:pageviews", "ga:sessionDuration",
   * "ga:transactions", "ga:transactionRevenue". This field is required if
   * status is "RUNNING" and servingFramework is one of "REDIRECT" or "API".
   *
   * @param[in] value The new value.
   */
  void set_objective_metric(const StringPiece& value) {
    *MutableStorage("objectiveMetric") = value.data();
  }

  /**
   * Determine if the '<code>optimizationType</code>' attribute was set.
   *
   * @return true if the '<code>optimizationType</code>' attribute was set.
   */
  bool has_optimization_type() const {
    return Storage().isMember("optimizationType");
  }

  /**
   * Clears the '<code>optimizationType</code>' attribute.
   */
  void clear_optimization_type() {
    MutableStorage()->removeMember("optimizationType");
  }


  /**
   * Get the value of the '<code>optimizationType</code>' attribute.
   */
  const StringPiece get_optimization_type() const {
    const Json::Value& v = Storage("optimizationType");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>optimizationType</code>' attribute.
   *
   * Whether the objectiveMetric should be minimized or maximized. Possible
   * values: "MAXIMUM", "MINIMUM". Optional--defaults to "MAXIMUM". Cannot be
   * specified without objectiveMetric. Cannot be modified when status is
   * "RUNNING" or "ENDED".
   *
   * @param[in] value The new value.
   */
  void set_optimization_type(const StringPiece& value) {
    *MutableStorage("optimizationType") = value.data();
  }

  /**
   * Determine if the '<code>parentLink</code>' attribute was set.
   *
   * @return true if the '<code>parentLink</code>' attribute was set.
   */
  bool has_parent_link() const {
    return Storage().isMember("parentLink");
  }

  /**
   * Clears the '<code>parentLink</code>' attribute.
   */
  void clear_parent_link() {
    MutableStorage()->removeMember("parentLink");
  }


  /**
   * Get a reference to the value of the '<code>parentLink</code>' attribute.
   */
  const ExperimentParentLink get_parent_link() const {
     const Json::Value& storage = Storage("parentLink");
    return client::JsonValueToCppValueHelper<ExperimentParentLink >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>parentLink</code>'
   * property.
   *
   * Parent link for an experiment. Points to the view (profile) to which this
   * experiment belongs.
   *
   * @return The result can be modified to change the attribute value.
   */
  ExperimentParentLink mutable_parentLink() {
    Json::Value* storage = MutableStorage("parentLink");
    return client::JsonValueToMutableCppValueHelper<ExperimentParentLink >(storage);
  }

  /**
   * Determine if the '<code>profileId</code>' attribute was set.
   *
   * @return true if the '<code>profileId</code>' attribute was set.
   */
  bool has_profile_id() const {
    return Storage().isMember("profileId");
  }

  /**
   * Clears the '<code>profileId</code>' attribute.
   */
  void clear_profile_id() {
    MutableStorage()->removeMember("profileId");
  }


  /**
   * Get the value of the '<code>profileId</code>' attribute.
   */
  const StringPiece get_profile_id() const {
    const Json::Value& v = Storage("profileId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>profileId</code>' attribute.
   *
   * View (Profile) ID to which this experiment belongs. This field is read-
   * only.
   *
   * @param[in] value The new value.
   */
  void set_profile_id(const StringPiece& value) {
    *MutableStorage("profileId") = value.data();
  }

  /**
   * Determine if the '<code>reasonExperimentEnded</code>' attribute was set.
   *
   * @return true if the '<code>reasonExperimentEnded</code>' attribute was set.
   */
  bool has_reason_experiment_ended() const {
    return Storage().isMember("reasonExperimentEnded");
  }

  /**
   * Clears the '<code>reasonExperimentEnded</code>' attribute.
   */
  void clear_reason_experiment_ended() {
    MutableStorage()->removeMember("reasonExperimentEnded");
  }


  /**
   * Get the value of the '<code>reasonExperimentEnded</code>' attribute.
   */
  const StringPiece get_reason_experiment_ended() const {
    const Json::Value& v = Storage("reasonExperimentEnded");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>reasonExperimentEnded</code>' attribute.
   *
   * Why the experiment ended. Possible values: "STOPPED_BY_USER",
   * "WINNER_FOUND", "EXPERIMENT_EXPIRED", "ENDED_WITH_NO_WINNER",
   * "GOAL_OBJECTIVE_CHANGED". "ENDED_WITH_NO_WINNER" means that the experiment
   * didn't expire but no winner was projected to be found. If the experiment
   * status is changed via the API to ENDED this field is set to
   * STOPPED_BY_USER. This field is read-only.
   *
   * @param[in] value The new value.
   */
  void set_reason_experiment_ended(const StringPiece& value) {
    *MutableStorage("reasonExperimentEnded") = value.data();
  }

  /**
   * Determine if the '<code>rewriteVariationUrlsAsOriginal</code>' attribute
   * was set.
   *
   * @return true if the '<code>rewriteVariationUrlsAsOriginal</code>' attribute
   * was set.
   */
  bool has_rewrite_variation_urls_as_original() const {
    return Storage().isMember("rewriteVariationUrlsAsOriginal");
  }

  /**
   * Clears the '<code>rewriteVariationUrlsAsOriginal</code>' attribute.
   */
  void clear_rewrite_variation_urls_as_original() {
    MutableStorage()->removeMember("rewriteVariationUrlsAsOriginal");
  }


  /**
   * Get the value of the '<code>rewriteVariationUrlsAsOriginal</code>'
   * attribute.
   */
  bool get_rewrite_variation_urls_as_original() const {
    const Json::Value& storage = Storage("rewriteVariationUrlsAsOriginal");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>rewriteVariationUrlsAsOriginal</code>' attribute.
   *
   * Boolean specifying whether variations URLS are rewritten to match those of
   * the original. This field may not be changed for an experiments whose status
   * is ENDED.
   *
   * @param[in] value The new value.
   */
  void set_rewrite_variation_urls_as_original(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("rewriteVariationUrlsAsOriginal"));
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * Link for this experiment. This field is read-only.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>servingFramework</code>' attribute was set.
   *
   * @return true if the '<code>servingFramework</code>' attribute was set.
   */
  bool has_serving_framework() const {
    return Storage().isMember("servingFramework");
  }

  /**
   * Clears the '<code>servingFramework</code>' attribute.
   */
  void clear_serving_framework() {
    MutableStorage()->removeMember("servingFramework");
  }


  /**
   * Get the value of the '<code>servingFramework</code>' attribute.
   */
  const StringPiece get_serving_framework() const {
    const Json::Value& v = Storage("servingFramework");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>servingFramework</code>' attribute.
   *
   * The framework used to serve the experiment variations and evaluate the
   * results. One of:
   * <dl>
   * <dt>REDIRECT
   * <dd>Google Analytics redirects traffic to different variation pages,
   * reports the chosen variation and evaluates the results.
   * <dt>API
   * <dd>Google Analytics chooses and reports the variation to serve and
   * evaluates the results; the caller is responsible for serving the selected
   * variation.
   * <dt>EXTERNAL
   * <dd>The variations will be served externally and the chosen variation
   * reported to Google Analytics.
   * </dl>
   *  The caller is responsible for serving the selected variation and
   * evaluating the results.
   *
   * @param[in] value The new value.
   */
  void set_serving_framework(const StringPiece& value) {
    *MutableStorage("servingFramework") = value.data();
  }

  /**
   * Determine if the '<code>snippet</code>' attribute was set.
   *
   * @return true if the '<code>snippet</code>' attribute was set.
   */
  bool has_snippet() const {
    return Storage().isMember("snippet");
  }

  /**
   * Clears the '<code>snippet</code>' attribute.
   */
  void clear_snippet() {
    MutableStorage()->removeMember("snippet");
  }


  /**
   * Get the value of the '<code>snippet</code>' attribute.
   */
  const StringPiece get_snippet() const {
    const Json::Value& v = Storage("snippet");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>snippet</code>' attribute.
   *
   * The snippet of code to include on the control page(s). This field is read-
   * only.
   *
   * @param[in] value The new value.
   */
  void set_snippet(const StringPiece& value) {
    *MutableStorage("snippet") = value.data();
  }

  /**
   * Determine if the '<code>startTime</code>' attribute was set.
   *
   * @return true if the '<code>startTime</code>' attribute was set.
   */
  bool has_start_time() const {
    return Storage().isMember("startTime");
  }

  /**
   * Clears the '<code>startTime</code>' attribute.
   */
  void clear_start_time() {
    MutableStorage()->removeMember("startTime");
  }


  /**
   * Get the value of the '<code>startTime</code>' attribute.
   */
  client::DateTime get_start_time() const {
    const Json::Value& storage = Storage("startTime");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>startTime</code>' attribute.
   *
   * The starting time of the experiment (the time the status changed from
   * READY_TO_RUN to RUNNING). This field is present only if the experiment has
   * started. This field is read-only.
   *
   * @param[in] value The new value.
   */
  void set_start_time(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("startTime"));
  }

  /**
   * Determine if the '<code>status</code>' attribute was set.
   *
   * @return true if the '<code>status</code>' attribute was set.
   */
  bool has_status() const {
    return Storage().isMember("status");
  }

  /**
   * Clears the '<code>status</code>' attribute.
   */
  void clear_status() {
    MutableStorage()->removeMember("status");
  }


  /**
   * Get the value of the '<code>status</code>' attribute.
   */
  const StringPiece get_status() const {
    const Json::Value& v = Storage("status");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>status</code>' attribute.
   *
   * Experiment status. Possible values: "DRAFT", "READY_TO_RUN", "RUNNING",
   * "ENDED". Experiments can be created in the "DRAFT", "READY_TO_RUN" or
   * "RUNNING" state. This field is required when creating an experiment.
   *
   * @param[in] value The new value.
   */
  void set_status(const StringPiece& value) {
    *MutableStorage("status") = value.data();
  }

  /**
   * Determine if the '<code>trafficCoverage</code>' attribute was set.
   *
   * @return true if the '<code>trafficCoverage</code>' attribute was set.
   */
  bool has_traffic_coverage() const {
    return Storage().isMember("trafficCoverage");
  }

  /**
   * Clears the '<code>trafficCoverage</code>' attribute.
   */
  void clear_traffic_coverage() {
    MutableStorage()->removeMember("trafficCoverage");
  }


  /**
   * Get the value of the '<code>trafficCoverage</code>' attribute.
   */
  double get_traffic_coverage() const {
    const Json::Value& storage = Storage("trafficCoverage");
    return client::JsonValueToCppValueHelper<double >(storage);
  }

  /**
   * Change the '<code>trafficCoverage</code>' attribute.
   *
   * A floating-point number in (0, 1]. Specifies the fraction of the traffic
   * that participates in the experiment. Can be changed for a running
   * experiment. This field may not be changed for an experiments whose status
   * is ENDED.
   *
   * @param[in] value The new value.
   */
  void set_traffic_coverage(double value) {
    client::SetJsonValueFromCppValueHelper<double >(
      value, MutableStorage("trafficCoverage"));
  }

  /**
   * Determine if the '<code>updated</code>' attribute was set.
   *
   * @return true if the '<code>updated</code>' attribute was set.
   */
  bool has_updated() const {
    return Storage().isMember("updated");
  }

  /**
   * Clears the '<code>updated</code>' attribute.
   */
  void clear_updated() {
    MutableStorage()->removeMember("updated");
  }


  /**
   * Get the value of the '<code>updated</code>' attribute.
   */
  client::DateTime get_updated() const {
    const Json::Value& storage = Storage("updated");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>updated</code>' attribute.
   *
   * Time the experiment was last modified. This field is read-only.
   *
   * @param[in] value The new value.
   */
  void set_updated(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("updated"));
  }

  /**
   * Determine if the '<code>variations</code>' attribute was set.
   *
   * @return true if the '<code>variations</code>' attribute was set.
   */
  bool has_variations() const {
    return Storage().isMember("variations");
  }

  /**
   * Clears the '<code>variations</code>' attribute.
   */
  void clear_variations() {
    MutableStorage()->removeMember("variations");
  }


  /**
   * Get a reference to the value of the '<code>variations</code>' attribute.
   */
  const client::JsonCppArray<ExperimentVariations > get_variations() const {
     const Json::Value& storage = Storage("variations");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<ExperimentVariations > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>variations</code>'
   * property.
   *
   * Array of variations. The first variation in the array is the original. The
   * number of variations may not change once an experiment is in the RUNNING
   * state. At least two variations are required before status can be set to
   * RUNNING.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<ExperimentVariations > mutable_variations() {
    Json::Value* storage = MutableStorage("variations");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<ExperimentVariations > >(storage);
  }

  /**
   * Determine if the '<code>webPropertyId</code>' attribute was set.
   *
   * @return true if the '<code>webPropertyId</code>' attribute was set.
   */
  bool has_web_property_id() const {
    return Storage().isMember("webPropertyId");
  }

  /**
   * Clears the '<code>webPropertyId</code>' attribute.
   */
  void clear_web_property_id() {
    MutableStorage()->removeMember("webPropertyId");
  }


  /**
   * Get the value of the '<code>webPropertyId</code>' attribute.
   */
  const StringPiece get_web_property_id() const {
    const Json::Value& v = Storage("webPropertyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>webPropertyId</code>' attribute.
   *
   * Web property ID to which this experiment belongs. The web property ID is of
   * the form UA-XXXXX-YY. This field is read-only.
   *
   * @param[in] value The new value.
   */
  void set_web_property_id(const StringPiece& value) {
    *MutableStorage("webPropertyId") = value.data();
  }

  /**
   * Determine if the '<code>winnerConfidenceLevel</code>' attribute was set.
   *
   * @return true if the '<code>winnerConfidenceLevel</code>' attribute was set.
   */
  bool has_winner_confidence_level() const {
    return Storage().isMember("winnerConfidenceLevel");
  }

  /**
   * Clears the '<code>winnerConfidenceLevel</code>' attribute.
   */
  void clear_winner_confidence_level() {
    MutableStorage()->removeMember("winnerConfidenceLevel");
  }


  /**
   * Get the value of the '<code>winnerConfidenceLevel</code>' attribute.
   */
  double get_winner_confidence_level() const {
    const Json::Value& storage = Storage("winnerConfidenceLevel");
    return client::JsonValueToCppValueHelper<double >(storage);
  }

  /**
   * Change the '<code>winnerConfidenceLevel</code>' attribute.
   *
   * A floating-point number in (0, 1). Specifies the necessary confidence level
   * to choose a winner. This field may not be changed for an experiments whose
   * status is ENDED.
   *
   * @param[in] value The new value.
   */
  void set_winner_confidence_level(double value) {
    client::SetJsonValueFromCppValueHelper<double >(
      value, MutableStorage("winnerConfidenceLevel"));
  }

  /**
   * Determine if the '<code>winnerFound</code>' attribute was set.
   *
   * @return true if the '<code>winnerFound</code>' attribute was set.
   */
  bool has_winner_found() const {
    return Storage().isMember("winnerFound");
  }

  /**
   * Clears the '<code>winnerFound</code>' attribute.
   */
  void clear_winner_found() {
    MutableStorage()->removeMember("winnerFound");
  }


  /**
   * Get the value of the '<code>winnerFound</code>' attribute.
   */
  bool get_winner_found() const {
    const Json::Value& storage = Storage("winnerFound");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>winnerFound</code>' attribute.
   *
   * Boolean specifying whether a winner has been found for this experiment.
   * This field is read-only.
   *
   * @param[in] value The new value.
   */
  void set_winner_found(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("winnerFound"));
  }

 private:
  void operator=(const Experiment&);
};  // Experiment
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_EXPERIMENT_H_
