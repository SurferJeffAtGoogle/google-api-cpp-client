// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_FILTER_H_
#define  GOOGLE_ANALYTICS_API_FILTER_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

#include "google/analytics_api/filter_expression.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * JSON template for an Analytics account filter.
 *
 * @ingroup DataObject
 */
class Filter : public client::JsonCppData {
 public:
  /**
   * Details for the filter of the type ADVANCED.
   *
   * @ingroup DataObject
   */
  class FilterAdvancedDetails : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static FilterAdvancedDetails* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit FilterAdvancedDetails(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit FilterAdvancedDetails(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~FilterAdvancedDetails();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::FilterAdvancedDetails</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::FilterAdvancedDetails";
    }

    /**
     * Determine if the '<code>caseSensitive</code>' attribute was set.
     *
     * @return true if the '<code>caseSensitive</code>' attribute was set.
     */
    bool has_case_sensitive() const {
      return Storage().isMember("caseSensitive");
    }

    /**
     * Clears the '<code>caseSensitive</code>' attribute.
     */
    void clear_case_sensitive() {
      MutableStorage()->removeMember("caseSensitive");
    }


    /**
     * Get the value of the '<code>caseSensitive</code>' attribute.
     */
    bool get_case_sensitive() const {
      const Json::Value& storage = Storage("caseSensitive");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>caseSensitive</code>' attribute.
     *
     * Indicates if the filter expressions are case sensitive.
     *
     * @param[in] value The new value.
     */
    void set_case_sensitive(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("caseSensitive"));
    }

    /**
     * Determine if the '<code>extractA</code>' attribute was set.
     *
     * @return true if the '<code>extractA</code>' attribute was set.
     */
    bool has_extract_a() const {
      return Storage().isMember("extractA");
    }

    /**
     * Clears the '<code>extractA</code>' attribute.
     */
    void clear_extract_a() {
      MutableStorage()->removeMember("extractA");
    }


    /**
     * Get the value of the '<code>extractA</code>' attribute.
     */
    const StringPiece get_extract_a() const {
      const Json::Value& v = Storage("extractA");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>extractA</code>' attribute.
     *
     * Expression to extract from field A.
     *
     * @param[in] value The new value.
     */
    void set_extract_a(const StringPiece& value) {
      *MutableStorage("extractA") = value.data();
    }

    /**
     * Determine if the '<code>extractB</code>' attribute was set.
     *
     * @return true if the '<code>extractB</code>' attribute was set.
     */
    bool has_extract_b() const {
      return Storage().isMember("extractB");
    }

    /**
     * Clears the '<code>extractB</code>' attribute.
     */
    void clear_extract_b() {
      MutableStorage()->removeMember("extractB");
    }


    /**
     * Get the value of the '<code>extractB</code>' attribute.
     */
    const StringPiece get_extract_b() const {
      const Json::Value& v = Storage("extractB");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>extractB</code>' attribute.
     *
     * Expression to extract from field B.
     *
     * @param[in] value The new value.
     */
    void set_extract_b(const StringPiece& value) {
      *MutableStorage("extractB") = value.data();
    }

    /**
     * Determine if the '<code>fieldA</code>' attribute was set.
     *
     * @return true if the '<code>fieldA</code>' attribute was set.
     */
    bool has_field_a() const {
      return Storage().isMember("fieldA");
    }

    /**
     * Clears the '<code>fieldA</code>' attribute.
     */
    void clear_field_a() {
      MutableStorage()->removeMember("fieldA");
    }


    /**
     * Get the value of the '<code>fieldA</code>' attribute.
     */
    const StringPiece get_field_a() const {
      const Json::Value& v = Storage("fieldA");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>fieldA</code>' attribute.
     *
     * Field A.
     *
     * @param[in] value The new value.
     */
    void set_field_a(const StringPiece& value) {
      *MutableStorage("fieldA") = value.data();
    }

    /**
     * Determine if the '<code>fieldAIndex</code>' attribute was set.
     *
     * @return true if the '<code>fieldAIndex</code>' attribute was set.
     */
    bool has_field_ai_ndex() const {
      return Storage().isMember("fieldAIndex");
    }

    /**
     * Clears the '<code>fieldAIndex</code>' attribute.
     */
    void clear_field_ai_ndex() {
      MutableStorage()->removeMember("fieldAIndex");
    }


    /**
     * Get the value of the '<code>fieldAIndex</code>' attribute.
     */
    int32 get_field_ai_ndex() const {
      const Json::Value& storage = Storage("fieldAIndex");
      return client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>fieldAIndex</code>' attribute.
     *
     * The Index of the custom dimension. Required if field is a
     * CUSTOM_DIMENSION.
     *
     * @param[in] value The new value.
     */
    void set_field_ai_ndex(int32 value) {
      client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("fieldAIndex"));
    }

    /**
     * Determine if the '<code>fieldARequired</code>' attribute was set.
     *
     * @return true if the '<code>fieldARequired</code>' attribute was set.
     */
    bool has_field_ar_equired() const {
      return Storage().isMember("fieldARequired");
    }

    /**
     * Clears the '<code>fieldARequired</code>' attribute.
     */
    void clear_field_ar_equired() {
      MutableStorage()->removeMember("fieldARequired");
    }


    /**
     * Get the value of the '<code>fieldARequired</code>' attribute.
     */
    bool get_field_ar_equired() const {
      const Json::Value& storage = Storage("fieldARequired");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>fieldARequired</code>' attribute.
     *
     * Indicates if field A is required to match.
     *
     * @param[in] value The new value.
     */
    void set_field_ar_equired(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("fieldARequired"));
    }

    /**
     * Determine if the '<code>fieldB</code>' attribute was set.
     *
     * @return true if the '<code>fieldB</code>' attribute was set.
     */
    bool has_field_b() const {
      return Storage().isMember("fieldB");
    }

    /**
     * Clears the '<code>fieldB</code>' attribute.
     */
    void clear_field_b() {
      MutableStorage()->removeMember("fieldB");
    }


    /**
     * Get the value of the '<code>fieldB</code>' attribute.
     */
    const StringPiece get_field_b() const {
      const Json::Value& v = Storage("fieldB");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>fieldB</code>' attribute.
     *
     * Field B.
     *
     * @param[in] value The new value.
     */
    void set_field_b(const StringPiece& value) {
      *MutableStorage("fieldB") = value.data();
    }

    /**
     * Determine if the '<code>fieldBIndex</code>' attribute was set.
     *
     * @return true if the '<code>fieldBIndex</code>' attribute was set.
     */
    bool has_field_bi_ndex() const {
      return Storage().isMember("fieldBIndex");
    }

    /**
     * Clears the '<code>fieldBIndex</code>' attribute.
     */
    void clear_field_bi_ndex() {
      MutableStorage()->removeMember("fieldBIndex");
    }


    /**
     * Get the value of the '<code>fieldBIndex</code>' attribute.
     */
    int32 get_field_bi_ndex() const {
      const Json::Value& storage = Storage("fieldBIndex");
      return client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>fieldBIndex</code>' attribute.
     *
     * The Index of the custom dimension. Required if field is a
     * CUSTOM_DIMENSION.
     *
     * @param[in] value The new value.
     */
    void set_field_bi_ndex(int32 value) {
      client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("fieldBIndex"));
    }

    /**
     * Determine if the '<code>fieldBRequired</code>' attribute was set.
     *
     * @return true if the '<code>fieldBRequired</code>' attribute was set.
     */
    bool has_field_br_equired() const {
      return Storage().isMember("fieldBRequired");
    }

    /**
     * Clears the '<code>fieldBRequired</code>' attribute.
     */
    void clear_field_br_equired() {
      MutableStorage()->removeMember("fieldBRequired");
    }


    /**
     * Get the value of the '<code>fieldBRequired</code>' attribute.
     */
    bool get_field_br_equired() const {
      const Json::Value& storage = Storage("fieldBRequired");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>fieldBRequired</code>' attribute.
     *
     * Indicates if field B is required to match.
     *
     * @param[in] value The new value.
     */
    void set_field_br_equired(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("fieldBRequired"));
    }

    /**
     * Determine if the '<code>outputConstructor</code>' attribute was set.
     *
     * @return true if the '<code>outputConstructor</code>' attribute was set.
     */
    bool has_output_constructor() const {
      return Storage().isMember("outputConstructor");
    }

    /**
     * Clears the '<code>outputConstructor</code>' attribute.
     */
    void clear_output_constructor() {
      MutableStorage()->removeMember("outputConstructor");
    }


    /**
     * Get the value of the '<code>outputConstructor</code>' attribute.
     */
    const StringPiece get_output_constructor() const {
      const Json::Value& v = Storage("outputConstructor");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>outputConstructor</code>' attribute.
     *
     * Expression used to construct the output value.
     *
     * @param[in] value The new value.
     */
    void set_output_constructor(const StringPiece& value) {
      *MutableStorage("outputConstructor") = value.data();
    }

    /**
     * Determine if the '<code>outputToField</code>' attribute was set.
     *
     * @return true if the '<code>outputToField</code>' attribute was set.
     */
    bool has_output_to_field() const {
      return Storage().isMember("outputToField");
    }

    /**
     * Clears the '<code>outputToField</code>' attribute.
     */
    void clear_output_to_field() {
      MutableStorage()->removeMember("outputToField");
    }


    /**
     * Get the value of the '<code>outputToField</code>' attribute.
     */
    const StringPiece get_output_to_field() const {
      const Json::Value& v = Storage("outputToField");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>outputToField</code>' attribute.
     *
     * Output field.
     *
     * @param[in] value The new value.
     */
    void set_output_to_field(const StringPiece& value) {
      *MutableStorage("outputToField") = value.data();
    }

    /**
     * Determine if the '<code>outputToFieldIndex</code>' attribute was set.
     *
     * @return true if the '<code>outputToFieldIndex</code>' attribute was set.
     */
    bool has_output_to_field_index() const {
      return Storage().isMember("outputToFieldIndex");
    }

    /**
     * Clears the '<code>outputToFieldIndex</code>' attribute.
     */
    void clear_output_to_field_index() {
      MutableStorage()->removeMember("outputToFieldIndex");
    }


    /**
     * Get the value of the '<code>outputToFieldIndex</code>' attribute.
     */
    int32 get_output_to_field_index() const {
      const Json::Value& storage = Storage("outputToFieldIndex");
      return client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>outputToFieldIndex</code>' attribute.
     *
     * The Index of the custom dimension. Required if field is a
     * CUSTOM_DIMENSION.
     *
     * @param[in] value The new value.
     */
    void set_output_to_field_index(int32 value) {
      client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("outputToFieldIndex"));
    }

    /**
     * Determine if the '<code>overrideOutputField</code>' attribute was set.
     *
     * @return true if the '<code>overrideOutputField</code>' attribute was set.
     */
    bool has_override_output_field() const {
      return Storage().isMember("overrideOutputField");
    }

    /**
     * Clears the '<code>overrideOutputField</code>' attribute.
     */
    void clear_override_output_field() {
      MutableStorage()->removeMember("overrideOutputField");
    }


    /**
     * Get the value of the '<code>overrideOutputField</code>' attribute.
     */
    bool get_override_output_field() const {
      const Json::Value& storage = Storage("overrideOutputField");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>overrideOutputField</code>' attribute.
     *
     * Indicates if the existing value of the output field, if any, should be
     * overridden by the output expression.
     *
     * @param[in] value The new value.
     */
    void set_override_output_field(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("overrideOutputField"));
    }

   private:
    void operator=(const FilterAdvancedDetails&);
  };  // FilterAdvancedDetails
  /**
   * Details for the filter of the type LOWER.
   *
   * @ingroup DataObject
   */
  class FilterLowercaseDetails : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static FilterLowercaseDetails* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit FilterLowercaseDetails(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit FilterLowercaseDetails(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~FilterLowercaseDetails();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::FilterLowercaseDetails</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::FilterLowercaseDetails";
    }

    /**
     * Determine if the '<code>field</code>' attribute was set.
     *
     * @return true if the '<code>field</code>' attribute was set.
     */
    bool has_field() const {
      return Storage().isMember("field");
    }

    /**
     * Clears the '<code>field</code>' attribute.
     */
    void clear_field() {
      MutableStorage()->removeMember("field");
    }


    /**
     * Get the value of the '<code>field</code>' attribute.
     */
    const StringPiece get_field() const {
      const Json::Value& v = Storage("field");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>field</code>' attribute.
     *
     * Field to use in the filter.
     *
     * @param[in] value The new value.
     */
    void set_field(const StringPiece& value) {
      *MutableStorage("field") = value.data();
    }

    /**
     * Determine if the '<code>fieldIndex</code>' attribute was set.
     *
     * @return true if the '<code>fieldIndex</code>' attribute was set.
     */
    bool has_field_index() const {
      return Storage().isMember("fieldIndex");
    }

    /**
     * Clears the '<code>fieldIndex</code>' attribute.
     */
    void clear_field_index() {
      MutableStorage()->removeMember("fieldIndex");
    }


    /**
     * Get the value of the '<code>fieldIndex</code>' attribute.
     */
    int32 get_field_index() const {
      const Json::Value& storage = Storage("fieldIndex");
      return client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>fieldIndex</code>' attribute.
     *
     * The Index of the custom dimension. Required if field is a
     * CUSTOM_DIMENSION.
     *
     * @param[in] value The new value.
     */
    void set_field_index(int32 value) {
      client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("fieldIndex"));
    }

   private:
    void operator=(const FilterLowercaseDetails&);
  };  // FilterLowercaseDetails
  /**
   * Parent link for this filter. Points to the account to which this filter
   * belongs.
   *
   * @ingroup DataObject
   */
  class FilterParentLink : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static FilterParentLink* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit FilterParentLink(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit FilterParentLink(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~FilterParentLink();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::FilterParentLink</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::FilterParentLink";
    }

    /**
     * Determine if the '<code>href</code>' attribute was set.
     *
     * @return true if the '<code>href</code>' attribute was set.
     */
    bool has_href() const {
      return Storage().isMember("href");
    }

    /**
     * Clears the '<code>href</code>' attribute.
     */
    void clear_href() {
      MutableStorage()->removeMember("href");
    }


    /**
     * Get the value of the '<code>href</code>' attribute.
     */
    const StringPiece get_href() const {
      const Json::Value& v = Storage("href");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>href</code>' attribute.
     *
     * Link to the account to which this filter belongs.
     *
     * @param[in] value The new value.
     */
    void set_href(const StringPiece& value) {
      *MutableStorage("href") = value.data();
    }

    /**
     * Determine if the '<code>type</code>' attribute was set.
     *
     * @return true if the '<code>type</code>' attribute was set.
     */
    bool has_type() const {
      return Storage().isMember("type");
    }

    /**
     * Clears the '<code>type</code>' attribute.
     */
    void clear_type() {
      MutableStorage()->removeMember("type");
    }


    /**
     * Get the value of the '<code>type</code>' attribute.
     */
    const StringPiece get_type() const {
      const Json::Value& v = Storage("type");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>type</code>' attribute.
     *
     * Value is "analytics#account".
     *
     * @param[in] value The new value.
     */
    void set_type(const StringPiece& value) {
      *MutableStorage("type") = value.data();
    }

   private:
    void operator=(const FilterParentLink&);
  };  // FilterParentLink
  /**
   * Details for the filter of the type SEARCH_AND_REPLACE.
   *
   * @ingroup DataObject
   */
  class FilterSearchAndReplaceDetails : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static FilterSearchAndReplaceDetails* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit FilterSearchAndReplaceDetails(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit FilterSearchAndReplaceDetails(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~FilterSearchAndReplaceDetails();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::FilterSearchAndReplaceDetails</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::FilterSearchAndReplaceDetails";
    }

    /**
     * Determine if the '<code>caseSensitive</code>' attribute was set.
     *
     * @return true if the '<code>caseSensitive</code>' attribute was set.
     */
    bool has_case_sensitive() const {
      return Storage().isMember("caseSensitive");
    }

    /**
     * Clears the '<code>caseSensitive</code>' attribute.
     */
    void clear_case_sensitive() {
      MutableStorage()->removeMember("caseSensitive");
    }


    /**
     * Get the value of the '<code>caseSensitive</code>' attribute.
     */
    bool get_case_sensitive() const {
      const Json::Value& storage = Storage("caseSensitive");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>caseSensitive</code>' attribute.
     *
     * Determines if the filter is case sensitive.
     *
     * @param[in] value The new value.
     */
    void set_case_sensitive(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("caseSensitive"));
    }

    /**
     * Determine if the '<code>field</code>' attribute was set.
     *
     * @return true if the '<code>field</code>' attribute was set.
     */
    bool has_field() const {
      return Storage().isMember("field");
    }

    /**
     * Clears the '<code>field</code>' attribute.
     */
    void clear_field() {
      MutableStorage()->removeMember("field");
    }


    /**
     * Get the value of the '<code>field</code>' attribute.
     */
    const StringPiece get_field() const {
      const Json::Value& v = Storage("field");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>field</code>' attribute.
     *
     * Field to use in the filter.
     *
     * @param[in] value The new value.
     */
    void set_field(const StringPiece& value) {
      *MutableStorage("field") = value.data();
    }

    /**
     * Determine if the '<code>fieldIndex</code>' attribute was set.
     *
     * @return true if the '<code>fieldIndex</code>' attribute was set.
     */
    bool has_field_index() const {
      return Storage().isMember("fieldIndex");
    }

    /**
     * Clears the '<code>fieldIndex</code>' attribute.
     */
    void clear_field_index() {
      MutableStorage()->removeMember("fieldIndex");
    }


    /**
     * Get the value of the '<code>fieldIndex</code>' attribute.
     */
    int32 get_field_index() const {
      const Json::Value& storage = Storage("fieldIndex");
      return client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>fieldIndex</code>' attribute.
     *
     * The Index of the custom dimension. Required if field is a
     * CUSTOM_DIMENSION.
     *
     * @param[in] value The new value.
     */
    void set_field_index(int32 value) {
      client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("fieldIndex"));
    }

    /**
     * Determine if the '<code>replaceString</code>' attribute was set.
     *
     * @return true if the '<code>replaceString</code>' attribute was set.
     */
    bool has_replace_string() const {
      return Storage().isMember("replaceString");
    }

    /**
     * Clears the '<code>replaceString</code>' attribute.
     */
    void clear_replace_string() {
      MutableStorage()->removeMember("replaceString");
    }


    /**
     * Get the value of the '<code>replaceString</code>' attribute.
     */
    const StringPiece get_replace_string() const {
      const Json::Value& v = Storage("replaceString");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>replaceString</code>' attribute.
     *
     * Term to replace the search term with.
     *
     * @param[in] value The new value.
     */
    void set_replace_string(const StringPiece& value) {
      *MutableStorage("replaceString") = value.data();
    }

    /**
     * Determine if the '<code>searchString</code>' attribute was set.
     *
     * @return true if the '<code>searchString</code>' attribute was set.
     */
    bool has_search_string() const {
      return Storage().isMember("searchString");
    }

    /**
     * Clears the '<code>searchString</code>' attribute.
     */
    void clear_search_string() {
      MutableStorage()->removeMember("searchString");
    }


    /**
     * Get the value of the '<code>searchString</code>' attribute.
     */
    const StringPiece get_search_string() const {
      const Json::Value& v = Storage("searchString");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>searchString</code>' attribute.
     *
     * Term to search.
     *
     * @param[in] value The new value.
     */
    void set_search_string(const StringPiece& value) {
      *MutableStorage("searchString") = value.data();
    }

   private:
    void operator=(const FilterSearchAndReplaceDetails&);
  };  // FilterSearchAndReplaceDetails
  /**
   * Details for the filter of the type UPPER.
   *
   * @ingroup DataObject
   */
  class FilterUppercaseDetails : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static FilterUppercaseDetails* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit FilterUppercaseDetails(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit FilterUppercaseDetails(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~FilterUppercaseDetails();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::FilterUppercaseDetails</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::FilterUppercaseDetails";
    }

    /**
     * Determine if the '<code>field</code>' attribute was set.
     *
     * @return true if the '<code>field</code>' attribute was set.
     */
    bool has_field() const {
      return Storage().isMember("field");
    }

    /**
     * Clears the '<code>field</code>' attribute.
     */
    void clear_field() {
      MutableStorage()->removeMember("field");
    }


    /**
     * Get the value of the '<code>field</code>' attribute.
     */
    const StringPiece get_field() const {
      const Json::Value& v = Storage("field");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>field</code>' attribute.
     *
     * Field to use in the filter.
     *
     * @param[in] value The new value.
     */
    void set_field(const StringPiece& value) {
      *MutableStorage("field") = value.data();
    }

    /**
     * Determine if the '<code>fieldIndex</code>' attribute was set.
     *
     * @return true if the '<code>fieldIndex</code>' attribute was set.
     */
    bool has_field_index() const {
      return Storage().isMember("fieldIndex");
    }

    /**
     * Clears the '<code>fieldIndex</code>' attribute.
     */
    void clear_field_index() {
      MutableStorage()->removeMember("fieldIndex");
    }


    /**
     * Get the value of the '<code>fieldIndex</code>' attribute.
     */
    int32 get_field_index() const {
      const Json::Value& storage = Storage("fieldIndex");
      return client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>fieldIndex</code>' attribute.
     *
     * The Index of the custom dimension. Required if field is a
     * CUSTOM_DIMENSION.
     *
     * @param[in] value The new value.
     */
    void set_field_index(int32 value) {
      client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("fieldIndex"));
    }

   private:
    void operator=(const FilterUppercaseDetails&);
  };  // FilterUppercaseDetails
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Filter* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Filter(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Filter(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Filter();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::Filter</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::Filter";
  }

  /**
   * Determine if the '<code>accountId</code>' attribute was set.
   *
   * @return true if the '<code>accountId</code>' attribute was set.
   */
  bool has_account_id() const {
    return Storage().isMember("accountId");
  }

  /**
   * Clears the '<code>accountId</code>' attribute.
   */
  void clear_account_id() {
    MutableStorage()->removeMember("accountId");
  }


  /**
   * Get the value of the '<code>accountId</code>' attribute.
   */
  const StringPiece get_account_id() const {
    const Json::Value& v = Storage("accountId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>accountId</code>' attribute.
   *
   * Account ID to which this filter belongs.
   *
   * @param[in] value The new value.
   */
  void set_account_id(const StringPiece& value) {
    *MutableStorage("accountId") = value.data();
  }

  /**
   * Determine if the '<code>advancedDetails</code>' attribute was set.
   *
   * @return true if the '<code>advancedDetails</code>' attribute was set.
   */
  bool has_advanced_details() const {
    return Storage().isMember("advancedDetails");
  }

  /**
   * Clears the '<code>advancedDetails</code>' attribute.
   */
  void clear_advanced_details() {
    MutableStorage()->removeMember("advancedDetails");
  }


  /**
   * Get a reference to the value of the '<code>advancedDetails</code>'
   * attribute.
   */
  const FilterAdvancedDetails get_advanced_details() const {
     const Json::Value& storage = Storage("advancedDetails");
    return client::JsonValueToCppValueHelper<FilterAdvancedDetails >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>advancedDetails</code>'
   * property.
   *
   * Details for the filter of the type ADVANCED.
   *
   * @return The result can be modified to change the attribute value.
   */
  FilterAdvancedDetails mutable_advancedDetails() {
    Json::Value* storage = MutableStorage("advancedDetails");
    return client::JsonValueToMutableCppValueHelper<FilterAdvancedDetails >(storage);
  }

  /**
   * Determine if the '<code>created</code>' attribute was set.
   *
   * @return true if the '<code>created</code>' attribute was set.
   */
  bool has_created() const {
    return Storage().isMember("created");
  }

  /**
   * Clears the '<code>created</code>' attribute.
   */
  void clear_created() {
    MutableStorage()->removeMember("created");
  }


  /**
   * Get the value of the '<code>created</code>' attribute.
   */
  client::DateTime get_created() const {
    const Json::Value& storage = Storage("created");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>created</code>' attribute.
   *
   * Time this filter was created.
   *
   * @param[in] value The new value.
   */
  void set_created(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("created"));
  }

  /**
   * Determine if the '<code>excludeDetails</code>' attribute was set.
   *
   * @return true if the '<code>excludeDetails</code>' attribute was set.
   */
  bool has_exclude_details() const {
    return Storage().isMember("excludeDetails");
  }

  /**
   * Clears the '<code>excludeDetails</code>' attribute.
   */
  void clear_exclude_details() {
    MutableStorage()->removeMember("excludeDetails");
  }


  /**
   * Get a reference to the value of the '<code>excludeDetails</code>'
   * attribute.
   */
  const FilterExpression get_exclude_details() const;

  /**
   * Gets a reference to a mutable value of the '<code>excludeDetails</code>'
   * property.
   *
   * Details for the filter of the type EXCLUDE.
   *
   * @return The result can be modified to change the attribute value.
   */
  FilterExpression mutable_excludeDetails();

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * Filter ID.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>includeDetails</code>' attribute was set.
   *
   * @return true if the '<code>includeDetails</code>' attribute was set.
   */
  bool has_include_details() const {
    return Storage().isMember("includeDetails");
  }

  /**
   * Clears the '<code>includeDetails</code>' attribute.
   */
  void clear_include_details() {
    MutableStorage()->removeMember("includeDetails");
  }


  /**
   * Get a reference to the value of the '<code>includeDetails</code>'
   * attribute.
   */
  const FilterExpression get_include_details() const;

  /**
   * Gets a reference to a mutable value of the '<code>includeDetails</code>'
   * property.
   *
   * Details for the filter of the type INCLUDE.
   *
   * @return The result can be modified to change the attribute value.
   */
  FilterExpression mutable_includeDetails();

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Resource type for Analytics filter.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>lowercaseDetails</code>' attribute was set.
   *
   * @return true if the '<code>lowercaseDetails</code>' attribute was set.
   */
  bool has_lowercase_details() const {
    return Storage().isMember("lowercaseDetails");
  }

  /**
   * Clears the '<code>lowercaseDetails</code>' attribute.
   */
  void clear_lowercase_details() {
    MutableStorage()->removeMember("lowercaseDetails");
  }


  /**
   * Get a reference to the value of the '<code>lowercaseDetails</code>'
   * attribute.
   */
  const FilterLowercaseDetails get_lowercase_details() const {
     const Json::Value& storage = Storage("lowercaseDetails");
    return client::JsonValueToCppValueHelper<FilterLowercaseDetails >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>lowercaseDetails</code>'
   * property.
   *
   * Details for the filter of the type LOWER.
   *
   * @return The result can be modified to change the attribute value.
   */
  FilterLowercaseDetails mutable_lowercaseDetails() {
    Json::Value* storage = MutableStorage("lowercaseDetails");
    return client::JsonValueToMutableCppValueHelper<FilterLowercaseDetails >(storage);
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Name of this filter.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>parentLink</code>' attribute was set.
   *
   * @return true if the '<code>parentLink</code>' attribute was set.
   */
  bool has_parent_link() const {
    return Storage().isMember("parentLink");
  }

  /**
   * Clears the '<code>parentLink</code>' attribute.
   */
  void clear_parent_link() {
    MutableStorage()->removeMember("parentLink");
  }


  /**
   * Get a reference to the value of the '<code>parentLink</code>' attribute.
   */
  const FilterParentLink get_parent_link() const {
     const Json::Value& storage = Storage("parentLink");
    return client::JsonValueToCppValueHelper<FilterParentLink >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>parentLink</code>'
   * property.
   *
   * Parent link for this filter. Points to the account to which this filter
   * belongs.
   *
   * @return The result can be modified to change the attribute value.
   */
  FilterParentLink mutable_parentLink() {
    Json::Value* storage = MutableStorage("parentLink");
    return client::JsonValueToMutableCppValueHelper<FilterParentLink >(storage);
  }

  /**
   * Determine if the '<code>searchAndReplaceDetails</code>' attribute was set.
   *
   * @return true if the '<code>searchAndReplaceDetails</code>' attribute was
   * set.
   */
  bool has_search_and_replace_details() const {
    return Storage().isMember("searchAndReplaceDetails");
  }

  /**
   * Clears the '<code>searchAndReplaceDetails</code>' attribute.
   */
  void clear_search_and_replace_details() {
    MutableStorage()->removeMember("searchAndReplaceDetails");
  }


  /**
   * Get a reference to the value of the '<code>searchAndReplaceDetails</code>'
   * attribute.
   */
  const FilterSearchAndReplaceDetails get_search_and_replace_details() const {
     const Json::Value& storage = Storage("searchAndReplaceDetails");
    return client::JsonValueToCppValueHelper<FilterSearchAndReplaceDetails >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>searchAndReplaceDetails</code>' property.
   *
   * Details for the filter of the type SEARCH_AND_REPLACE.
   *
   * @return The result can be modified to change the attribute value.
   */
  FilterSearchAndReplaceDetails mutable_searchAndReplaceDetails() {
    Json::Value* storage = MutableStorage("searchAndReplaceDetails");
    return client::JsonValueToMutableCppValueHelper<FilterSearchAndReplaceDetails >(storage);
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * Link for this filter.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>type</code>' attribute was set.
   *
   * @return true if the '<code>type</code>' attribute was set.
   */
  bool has_type() const {
    return Storage().isMember("type");
  }

  /**
   * Clears the '<code>type</code>' attribute.
   */
  void clear_type() {
    MutableStorage()->removeMember("type");
  }


  /**
   * Get the value of the '<code>type</code>' attribute.
   */
  const StringPiece get_type() const {
    const Json::Value& v = Storage("type");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>type</code>' attribute.
   *
   * Type of this filter. Possible values are INCLUDE, EXCLUDE, LOWERCASE,
   * UPPERCASE, SEARCH_AND_REPLACE and ADVANCED.
   *
   * @param[in] value The new value.
   */
  void set_type(const StringPiece& value) {
    *MutableStorage("type") = value.data();
  }

  /**
   * Determine if the '<code>updated</code>' attribute was set.
   *
   * @return true if the '<code>updated</code>' attribute was set.
   */
  bool has_updated() const {
    return Storage().isMember("updated");
  }

  /**
   * Clears the '<code>updated</code>' attribute.
   */
  void clear_updated() {
    MutableStorage()->removeMember("updated");
  }


  /**
   * Get the value of the '<code>updated</code>' attribute.
   */
  client::DateTime get_updated() const {
    const Json::Value& storage = Storage("updated");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>updated</code>' attribute.
   *
   * Time this filter was last modified.
   *
   * @param[in] value The new value.
   */
  void set_updated(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("updated"));
  }

  /**
   * Determine if the '<code>uppercaseDetails</code>' attribute was set.
   *
   * @return true if the '<code>uppercaseDetails</code>' attribute was set.
   */
  bool has_uppercase_details() const {
    return Storage().isMember("uppercaseDetails");
  }

  /**
   * Clears the '<code>uppercaseDetails</code>' attribute.
   */
  void clear_uppercase_details() {
    MutableStorage()->removeMember("uppercaseDetails");
  }


  /**
   * Get a reference to the value of the '<code>uppercaseDetails</code>'
   * attribute.
   */
  const FilterUppercaseDetails get_uppercase_details() const {
     const Json::Value& storage = Storage("uppercaseDetails");
    return client::JsonValueToCppValueHelper<FilterUppercaseDetails >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>uppercaseDetails</code>'
   * property.
   *
   * Details for the filter of the type UPPER.
   *
   * @return The result can be modified to change the attribute value.
   */
  FilterUppercaseDetails mutable_uppercaseDetails() {
    Json::Value* storage = MutableStorage("uppercaseDetails");
    return client::JsonValueToMutableCppValueHelper<FilterUppercaseDetails >(storage);
  }

 private:
  void operator=(const Filter&);
};  // Filter
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_FILTER_H_
