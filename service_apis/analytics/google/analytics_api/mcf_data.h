// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_MCF_DATA_H_
#define  GOOGLE_ANALYTICS_API_MCF_DATA_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * Multi-Channel Funnels data for a given view (profile).
 *
 * @ingroup DataObject
 */
class McfData : public client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class McfDataColumnHeaders : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static McfDataColumnHeaders* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit McfDataColumnHeaders(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit McfDataColumnHeaders(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~McfDataColumnHeaders();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::McfDataColumnHeaders</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::McfDataColumnHeaders";
    }

    /**
     * Determine if the '<code>columnType</code>' attribute was set.
     *
     * @return true if the '<code>columnType</code>' attribute was set.
     */
    bool has_column_type() const {
      return Storage().isMember("columnType");
    }

    /**
     * Clears the '<code>columnType</code>' attribute.
     */
    void clear_column_type() {
      MutableStorage()->removeMember("columnType");
    }


    /**
     * Get the value of the '<code>columnType</code>' attribute.
     */
    const StringPiece get_column_type() const {
      const Json::Value& v = Storage("columnType");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>columnType</code>' attribute.
     *
     * Column Type. Either DIMENSION or METRIC.
     *
     * @param[in] value The new value.
     */
    void set_column_type(const StringPiece& value) {
      *MutableStorage("columnType") = value.data();
    }

    /**
     * Determine if the '<code>dataType</code>' attribute was set.
     *
     * @return true if the '<code>dataType</code>' attribute was set.
     */
    bool has_data_type() const {
      return Storage().isMember("dataType");
    }

    /**
     * Clears the '<code>dataType</code>' attribute.
     */
    void clear_data_type() {
      MutableStorage()->removeMember("dataType");
    }


    /**
     * Get the value of the '<code>dataType</code>' attribute.
     */
    const StringPiece get_data_type() const {
      const Json::Value& v = Storage("dataType");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>dataType</code>' attribute.
     *
     * Data type. Dimension and metric values data types such as INTEGER,
     * DOUBLE, CURRENCY, MCF_SEQUENCE etc.
     *
     * @param[in] value The new value.
     */
    void set_data_type(const StringPiece& value) {
      *MutableStorage("dataType") = value.data();
    }

    /**
     * Determine if the '<code>name</code>' attribute was set.
     *
     * @return true if the '<code>name</code>' attribute was set.
     */
    bool has_name() const {
      return Storage().isMember("name");
    }

    /**
     * Clears the '<code>name</code>' attribute.
     */
    void clear_name() {
      MutableStorage()->removeMember("name");
    }


    /**
     * Get the value of the '<code>name</code>' attribute.
     */
    const StringPiece get_name() const {
      const Json::Value& v = Storage("name");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>name</code>' attribute.
     *
     * Column name.
     *
     * @param[in] value The new value.
     */
    void set_name(const StringPiece& value) {
      *MutableStorage("name") = value.data();
    }

   private:
    void operator=(const McfDataColumnHeaders&);
  };  // McfDataColumnHeaders
  /**
   * Information for the view (profile), for which the Analytics data was
   * requested.
   *
   * @ingroup DataObject
   */
  class McfDataProfileInfo : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static McfDataProfileInfo* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit McfDataProfileInfo(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit McfDataProfileInfo(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~McfDataProfileInfo();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::McfDataProfileInfo</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::McfDataProfileInfo";
    }

    /**
     * Determine if the '<code>accountId</code>' attribute was set.
     *
     * @return true if the '<code>accountId</code>' attribute was set.
     */
    bool has_account_id() const {
      return Storage().isMember("accountId");
    }

    /**
     * Clears the '<code>accountId</code>' attribute.
     */
    void clear_account_id() {
      MutableStorage()->removeMember("accountId");
    }


    /**
     * Get the value of the '<code>accountId</code>' attribute.
     */
    const StringPiece get_account_id() const {
      const Json::Value& v = Storage("accountId");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>accountId</code>' attribute.
     *
     * Account ID to which this view (profile) belongs.
     *
     * @param[in] value The new value.
     */
    void set_account_id(const StringPiece& value) {
      *MutableStorage("accountId") = value.data();
    }

    /**
     * Determine if the '<code>internalWebPropertyId</code>' attribute was set.
     *
     * @return true if the '<code>internalWebPropertyId</code>' attribute was
     * set.
     */
    bool has_internal_web_property_id() const {
      return Storage().isMember("internalWebPropertyId");
    }

    /**
     * Clears the '<code>internalWebPropertyId</code>' attribute.
     */
    void clear_internal_web_property_id() {
      MutableStorage()->removeMember("internalWebPropertyId");
    }


    /**
     * Get the value of the '<code>internalWebPropertyId</code>' attribute.
     */
    const StringPiece get_internal_web_property_id() const {
      const Json::Value& v = Storage("internalWebPropertyId");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>internalWebPropertyId</code>' attribute.
     *
     * Internal ID for the web property to which this view (profile) belongs.
     *
     * @param[in] value The new value.
     */
    void set_internal_web_property_id(const StringPiece& value) {
      *MutableStorage("internalWebPropertyId") = value.data();
    }

    /**
     * Determine if the '<code>profileId</code>' attribute was set.
     *
     * @return true if the '<code>profileId</code>' attribute was set.
     */
    bool has_profile_id() const {
      return Storage().isMember("profileId");
    }

    /**
     * Clears the '<code>profileId</code>' attribute.
     */
    void clear_profile_id() {
      MutableStorage()->removeMember("profileId");
    }


    /**
     * Get the value of the '<code>profileId</code>' attribute.
     */
    const StringPiece get_profile_id() const {
      const Json::Value& v = Storage("profileId");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>profileId</code>' attribute.
     *
     * View (Profile) ID.
     *
     * @param[in] value The new value.
     */
    void set_profile_id(const StringPiece& value) {
      *MutableStorage("profileId") = value.data();
    }

    /**
     * Determine if the '<code>profileName</code>' attribute was set.
     *
     * @return true if the '<code>profileName</code>' attribute was set.
     */
    bool has_profile_name() const {
      return Storage().isMember("profileName");
    }

    /**
     * Clears the '<code>profileName</code>' attribute.
     */
    void clear_profile_name() {
      MutableStorage()->removeMember("profileName");
    }


    /**
     * Get the value of the '<code>profileName</code>' attribute.
     */
    const StringPiece get_profile_name() const {
      const Json::Value& v = Storage("profileName");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>profileName</code>' attribute.
     *
     * View (Profile) name.
     *
     * @param[in] value The new value.
     */
    void set_profile_name(const StringPiece& value) {
      *MutableStorage("profileName") = value.data();
    }

    /**
     * Determine if the '<code>tableId</code>' attribute was set.
     *
     * @return true if the '<code>tableId</code>' attribute was set.
     */
    bool has_table_id() const {
      return Storage().isMember("tableId");
    }

    /**
     * Clears the '<code>tableId</code>' attribute.
     */
    void clear_table_id() {
      MutableStorage()->removeMember("tableId");
    }


    /**
     * Get the value of the '<code>tableId</code>' attribute.
     */
    const StringPiece get_table_id() const {
      const Json::Value& v = Storage("tableId");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>tableId</code>' attribute.
     *
     * Table ID for view (profile).
     *
     * @param[in] value The new value.
     */
    void set_table_id(const StringPiece& value) {
      *MutableStorage("tableId") = value.data();
    }

    /**
     * Determine if the '<code>webPropertyId</code>' attribute was set.
     *
     * @return true if the '<code>webPropertyId</code>' attribute was set.
     */
    bool has_web_property_id() const {
      return Storage().isMember("webPropertyId");
    }

    /**
     * Clears the '<code>webPropertyId</code>' attribute.
     */
    void clear_web_property_id() {
      MutableStorage()->removeMember("webPropertyId");
    }


    /**
     * Get the value of the '<code>webPropertyId</code>' attribute.
     */
    const StringPiece get_web_property_id() const {
      const Json::Value& v = Storage("webPropertyId");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>webPropertyId</code>' attribute.
     *
     * Web Property ID to which this view (profile) belongs.
     *
     * @param[in] value The new value.
     */
    void set_web_property_id(const StringPiece& value) {
      *MutableStorage("webPropertyId") = value.data();
    }

   private:
    void operator=(const McfDataProfileInfo&);
  };  // McfDataProfileInfo
  /**
   * Analytics data request query parameters.
   *
   * @ingroup DataObject
   */
  class McfDataQuery : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static McfDataQuery* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit McfDataQuery(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit McfDataQuery(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~McfDataQuery();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::McfDataQuery</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::McfDataQuery";
    }

    /**
     * Determine if the '<code>dimensions</code>' attribute was set.
     *
     * @return true if the '<code>dimensions</code>' attribute was set.
     */
    bool has_dimensions() const {
      return Storage().isMember("dimensions");
    }

    /**
     * Clears the '<code>dimensions</code>' attribute.
     */
    void clear_dimensions() {
      MutableStorage()->removeMember("dimensions");
    }


    /**
     * Get the value of the '<code>dimensions</code>' attribute.
     */
    const StringPiece get_dimensions() const {
      const Json::Value& v = Storage("dimensions");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>dimensions</code>' attribute.
     *
     * List of analytics dimensions.
     *
     * @param[in] value The new value.
     */
    void set_dimensions(const StringPiece& value) {
      *MutableStorage("dimensions") = value.data();
    }

    /**
     * Determine if the '<code>end-date</code>' attribute was set.
     *
     * @return true if the '<code>end-date</code>' attribute was set.
     */
    bool has_end_date() const {
      return Storage().isMember("end-date");
    }

    /**
     * Clears the '<code>end-date</code>' attribute.
     */
    void clear_end_date() {
      MutableStorage()->removeMember("end-date");
    }


    /**
     * Get the value of the '<code>end-date</code>' attribute.
     */
    const StringPiece get_end_date() const {
      const Json::Value& v = Storage("end-date");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>end-date</code>' attribute.
     *
     * End date.
     *
     * @param[in] value The new value.
     */
    void set_end_date(const StringPiece& value) {
      *MutableStorage("end-date") = value.data();
    }

    /**
     * Determine if the '<code>filters</code>' attribute was set.
     *
     * @return true if the '<code>filters</code>' attribute was set.
     */
    bool has_filters() const {
      return Storage().isMember("filters");
    }

    /**
     * Clears the '<code>filters</code>' attribute.
     */
    void clear_filters() {
      MutableStorage()->removeMember("filters");
    }


    /**
     * Get the value of the '<code>filters</code>' attribute.
     */
    const StringPiece get_filters() const {
      const Json::Value& v = Storage("filters");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>filters</code>' attribute.
     *
     * Comma-separated list of dimension or metric filters.
     *
     * @param[in] value The new value.
     */
    void set_filters(const StringPiece& value) {
      *MutableStorage("filters") = value.data();
    }

    /**
     * Determine if the '<code>ids</code>' attribute was set.
     *
     * @return true if the '<code>ids</code>' attribute was set.
     */
    bool has_ids() const {
      return Storage().isMember("ids");
    }

    /**
     * Clears the '<code>ids</code>' attribute.
     */
    void clear_ids() {
      MutableStorage()->removeMember("ids");
    }


    /**
     * Get the value of the '<code>ids</code>' attribute.
     */
    const StringPiece get_ids() const {
      const Json::Value& v = Storage("ids");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>ids</code>' attribute.
     *
     * Unique table ID.
     *
     * @param[in] value The new value.
     */
    void set_ids(const StringPiece& value) {
      *MutableStorage("ids") = value.data();
    }

    /**
     * Determine if the '<code>max-results</code>' attribute was set.
     *
     * @return true if the '<code>max-results</code>' attribute was set.
     */
    bool has_max_results() const {
      return Storage().isMember("max-results");
    }

    /**
     * Clears the '<code>max-results</code>' attribute.
     */
    void clear_max_results() {
      MutableStorage()->removeMember("max-results");
    }


    /**
     * Get the value of the '<code>max-results</code>' attribute.
     */
    int32 get_max_results() const {
      const Json::Value& storage = Storage("max-results");
      return client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>max-results</code>' attribute.
     *
     * Maximum results per page.
     *
     * @param[in] value The new value.
     */
    void set_max_results(int32 value) {
      client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("max-results"));
    }

    /**
     * Determine if the '<code>metrics</code>' attribute was set.
     *
     * @return true if the '<code>metrics</code>' attribute was set.
     */
    bool has_metrics() const {
      return Storage().isMember("metrics");
    }

    /**
     * Clears the '<code>metrics</code>' attribute.
     */
    void clear_metrics() {
      MutableStorage()->removeMember("metrics");
    }


    /**
     * Get a reference to the value of the '<code>metrics</code>' attribute.
     */
    const client::JsonCppArray<string > get_metrics() const {
       const Json::Value& storage = Storage("metrics");
      return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>metrics</code>'
     * property.
     *
     * List of analytics metrics.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<string > mutable_metrics() {
      Json::Value* storage = MutableStorage("metrics");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
    }

    /**
     * Determine if the '<code>samplingLevel</code>' attribute was set.
     *
     * @return true if the '<code>samplingLevel</code>' attribute was set.
     */
    bool has_sampling_level() const {
      return Storage().isMember("samplingLevel");
    }

    /**
     * Clears the '<code>samplingLevel</code>' attribute.
     */
    void clear_sampling_level() {
      MutableStorage()->removeMember("samplingLevel");
    }


    /**
     * Get the value of the '<code>samplingLevel</code>' attribute.
     */
    const StringPiece get_sampling_level() const {
      const Json::Value& v = Storage("samplingLevel");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>samplingLevel</code>' attribute.
     *
     * Desired sampling level.
     *
     * @param[in] value The new value.
     */
    void set_sampling_level(const StringPiece& value) {
      *MutableStorage("samplingLevel") = value.data();
    }

    /**
     * Determine if the '<code>segment</code>' attribute was set.
     *
     * @return true if the '<code>segment</code>' attribute was set.
     */
    bool has_segment() const {
      return Storage().isMember("segment");
    }

    /**
     * Clears the '<code>segment</code>' attribute.
     */
    void clear_segment() {
      MutableStorage()->removeMember("segment");
    }


    /**
     * Get the value of the '<code>segment</code>' attribute.
     */
    const StringPiece get_segment() const {
      const Json::Value& v = Storage("segment");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>segment</code>' attribute.
     *
     * Analytics advanced segment.
     *
     * @param[in] value The new value.
     */
    void set_segment(const StringPiece& value) {
      *MutableStorage("segment") = value.data();
    }

    /**
     * Determine if the '<code>sort</code>' attribute was set.
     *
     * @return true if the '<code>sort</code>' attribute was set.
     */
    bool has_sort() const {
      return Storage().isMember("sort");
    }

    /**
     * Clears the '<code>sort</code>' attribute.
     */
    void clear_sort() {
      MutableStorage()->removeMember("sort");
    }


    /**
     * Get a reference to the value of the '<code>sort</code>' attribute.
     */
    const client::JsonCppArray<string > get_sort() const {
       const Json::Value& storage = Storage("sort");
      return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>sort</code>' property.
     *
     * List of dimensions or metrics based on which Analytics data is sorted.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<string > mutable_sort() {
      Json::Value* storage = MutableStorage("sort");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
    }

    /**
     * Determine if the '<code>start-date</code>' attribute was set.
     *
     * @return true if the '<code>start-date</code>' attribute was set.
     */
    bool has_start_date() const {
      return Storage().isMember("start-date");
    }

    /**
     * Clears the '<code>start-date</code>' attribute.
     */
    void clear_start_date() {
      MutableStorage()->removeMember("start-date");
    }


    /**
     * Get the value of the '<code>start-date</code>' attribute.
     */
    const StringPiece get_start_date() const {
      const Json::Value& v = Storage("start-date");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>start-date</code>' attribute.
     *
     * Start date.
     *
     * @param[in] value The new value.
     */
    void set_start_date(const StringPiece& value) {
      *MutableStorage("start-date") = value.data();
    }

    /**
     * Determine if the '<code>start-index</code>' attribute was set.
     *
     * @return true if the '<code>start-index</code>' attribute was set.
     */
    bool has_start_index() const {
      return Storage().isMember("start-index");
    }

    /**
     * Clears the '<code>start-index</code>' attribute.
     */
    void clear_start_index() {
      MutableStorage()->removeMember("start-index");
    }


    /**
     * Get the value of the '<code>start-index</code>' attribute.
     */
    int32 get_start_index() const {
      const Json::Value& storage = Storage("start-index");
      return client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>start-index</code>' attribute.
     *
     * Start index.
     *
     * @param[in] value The new value.
     */
    void set_start_index(int32 value) {
      client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("start-index"));
    }

   private:
    void operator=(const McfDataQuery&);
  };  // McfDataQuery
  /**
   * A union object representing a dimension or metric value. Only one of
   * "primitiveValue" or "conversionPathValue" attribute will be populated.
   *
   * @ingroup DataObject
   */
  class McfDataRows : public client::JsonCppData {
   public:
    /**
     * No description provided.
     *
     * @ingroup DataObject
     */
    class McfDataRowsConversionPathValue : public client::JsonCppData {
     public:
      /**
       * Creates a new default instance.
       *
       * @return Ownership is passed back to the caller.
       */
      static McfDataRowsConversionPathValue* New();

      /**
       * Standard constructor for an immutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit McfDataRowsConversionPathValue(const Json::Value& storage);

      /**
       * Standard constructor for a mutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit McfDataRowsConversionPathValue(Json::Value* storage);

      /**
       * Standard destructor.
       */
      virtual ~McfDataRowsConversionPathValue();

      /**
       * Returns a string denoting the type of this data object.
       *
       * @return
       * <code>google_analytics_api::McfDataRowsConversionPathValue</code>
       */
      const char* GetTypeName() const {
        return "google_analytics_api::McfDataRowsConversionPathValue";
      }

      /**
       * Determine if the '<code>interactionType</code>' attribute was set.
       *
       * @return true if the '<code>interactionType</code>' attribute was set.
       */
      bool has_interaction_type() const {
        return Storage().isMember("interactionType");
      }

      /**
       * Clears the '<code>interactionType</code>' attribute.
       */
      void clear_interaction_type() {
        MutableStorage()->removeMember("interactionType");
      }


      /**
       * Get the value of the '<code>interactionType</code>' attribute.
       */
      const StringPiece get_interaction_type() const {
        const Json::Value& v = Storage("interactionType");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>interactionType</code>' attribute.
       *
       * Type of an interaction on conversion path. Such as CLICK, IMPRESSION
       * etc.
       *
       * @param[in] value The new value.
       */
      void set_interaction_type(const StringPiece& value) {
        *MutableStorage("interactionType") = value.data();
      }

      /**
       * Determine if the '<code>nodeValue</code>' attribute was set.
       *
       * @return true if the '<code>nodeValue</code>' attribute was set.
       */
      bool has_node_value() const {
        return Storage().isMember("nodeValue");
      }

      /**
       * Clears the '<code>nodeValue</code>' attribute.
       */
      void clear_node_value() {
        MutableStorage()->removeMember("nodeValue");
      }


      /**
       * Get the value of the '<code>nodeValue</code>' attribute.
       */
      const StringPiece get_node_value() const {
        const Json::Value& v = Storage("nodeValue");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>nodeValue</code>' attribute.
       *
       * Node value of an interaction on conversion path. Such as source, medium
       * etc.
       *
       * @param[in] value The new value.
       */
      void set_node_value(const StringPiece& value) {
        *MutableStorage("nodeValue") = value.data();
      }

     private:
      void operator=(const McfDataRowsConversionPathValue&);
    };  // McfDataRowsConversionPathValue
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static McfDataRows* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit McfDataRows(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit McfDataRows(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~McfDataRows();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::McfDataRows</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::McfDataRows";
    }

    /**
     * Determine if the '<code>conversionPathValue</code>' attribute was set.
     *
     * @return true if the '<code>conversionPathValue</code>' attribute was set.
     */
    bool has_conversion_path_value() const {
      return Storage().isMember("conversionPathValue");
    }

    /**
     * Clears the '<code>conversionPathValue</code>' attribute.
     */
    void clear_conversion_path_value() {
      MutableStorage()->removeMember("conversionPathValue");
    }


    /**
     * Get a reference to the value of the '<code>conversionPathValue</code>'
     * attribute.
     */
    const client::JsonCppArray<McfDataRowsConversionPathValue > get_conversion_path_value() const {
       const Json::Value& storage = Storage("conversionPathValue");
      return client::JsonValueToCppValueHelper<client::JsonCppArray<McfDataRowsConversionPathValue > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the
     * '<code>conversionPathValue</code>' property.
     *
     * A conversion path dimension value, containing a list of interactions with
     * their attributes.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<McfDataRowsConversionPathValue > mutable_conversionPathValue() {
      Json::Value* storage = MutableStorage("conversionPathValue");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<McfDataRowsConversionPathValue > >(storage);
    }

    /**
     * Determine if the '<code>primitiveValue</code>' attribute was set.
     *
     * @return true if the '<code>primitiveValue</code>' attribute was set.
     */
    bool has_primitive_value() const {
      return Storage().isMember("primitiveValue");
    }

    /**
     * Clears the '<code>primitiveValue</code>' attribute.
     */
    void clear_primitive_value() {
      MutableStorage()->removeMember("primitiveValue");
    }


    /**
     * Get the value of the '<code>primitiveValue</code>' attribute.
     */
    const StringPiece get_primitive_value() const {
      const Json::Value& v = Storage("primitiveValue");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>primitiveValue</code>' attribute.
     *
     * A primitive dimension value. A primitive metric value.
     *
     * @param[in] value The new value.
     */
    void set_primitive_value(const StringPiece& value) {
      *MutableStorage("primitiveValue") = value.data();
    }

   private:
    void operator=(const McfDataRows&);
  };  // McfDataRows
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static McfData* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit McfData(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit McfData(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~McfData();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::McfData</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::McfData";
  }

  /**
   * Determine if the '<code>columnHeaders</code>' attribute was set.
   *
   * @return true if the '<code>columnHeaders</code>' attribute was set.
   */
  bool has_column_headers() const {
    return Storage().isMember("columnHeaders");
  }

  /**
   * Clears the '<code>columnHeaders</code>' attribute.
   */
  void clear_column_headers() {
    MutableStorage()->removeMember("columnHeaders");
  }


  /**
   * Get a reference to the value of the '<code>columnHeaders</code>' attribute.
   */
  const client::JsonCppArray<McfDataColumnHeaders > get_column_headers() const {
     const Json::Value& storage = Storage("columnHeaders");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<McfDataColumnHeaders > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>columnHeaders</code>'
   * property.
   *
   * Column headers that list dimension names followed by the metric names. The
   * order of dimensions and metrics is same as specified in the request.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<McfDataColumnHeaders > mutable_columnHeaders() {
    Json::Value* storage = MutableStorage("columnHeaders");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<McfDataColumnHeaders > >(storage);
  }

  /**
   * Determine if the '<code>containsSampledData</code>' attribute was set.
   *
   * @return true if the '<code>containsSampledData</code>' attribute was set.
   */
  bool has_contains_sampled_data() const {
    return Storage().isMember("containsSampledData");
  }

  /**
   * Clears the '<code>containsSampledData</code>' attribute.
   */
  void clear_contains_sampled_data() {
    MutableStorage()->removeMember("containsSampledData");
  }


  /**
   * Get the value of the '<code>containsSampledData</code>' attribute.
   */
  bool get_contains_sampled_data() const {
    const Json::Value& storage = Storage("containsSampledData");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>containsSampledData</code>' attribute.
   *
   * Determines if the Analytics data contains sampled data.
   *
   * @param[in] value The new value.
   */
  void set_contains_sampled_data(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("containsSampledData"));
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * Unique ID for this data response.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>itemsPerPage</code>' attribute was set.
   *
   * @return true if the '<code>itemsPerPage</code>' attribute was set.
   */
  bool has_items_per_page() const {
    return Storage().isMember("itemsPerPage");
  }

  /**
   * Clears the '<code>itemsPerPage</code>' attribute.
   */
  void clear_items_per_page() {
    MutableStorage()->removeMember("itemsPerPage");
  }


  /**
   * Get the value of the '<code>itemsPerPage</code>' attribute.
   */
  int32 get_items_per_page() const {
    const Json::Value& storage = Storage("itemsPerPage");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>itemsPerPage</code>' attribute.
   *
   * The maximum number of rows the response can contain, regardless of the
   * actual number of rows returned. Its value ranges from 1 to 10,000 with a
   * value of 1000 by default, or otherwise specified by the max-results query
   * parameter.
   *
   * @param[in] value The new value.
   */
  void set_items_per_page(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("itemsPerPage"));
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Resource type.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>nextLink</code>' attribute was set.
   *
   * @return true if the '<code>nextLink</code>' attribute was set.
   */
  bool has_next_link() const {
    return Storage().isMember("nextLink");
  }

  /**
   * Clears the '<code>nextLink</code>' attribute.
   */
  void clear_next_link() {
    MutableStorage()->removeMember("nextLink");
  }


  /**
   * Get the value of the '<code>nextLink</code>' attribute.
   */
  const StringPiece get_next_link() const {
    const Json::Value& v = Storage("nextLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>nextLink</code>' attribute.
   *
   * Link to next page for this Analytics data query.
   *
   * @param[in] value The new value.
   */
  void set_next_link(const StringPiece& value) {
    *MutableStorage("nextLink") = value.data();
  }

  /**
   * Determine if the '<code>previousLink</code>' attribute was set.
   *
   * @return true if the '<code>previousLink</code>' attribute was set.
   */
  bool has_previous_link() const {
    return Storage().isMember("previousLink");
  }

  /**
   * Clears the '<code>previousLink</code>' attribute.
   */
  void clear_previous_link() {
    MutableStorage()->removeMember("previousLink");
  }


  /**
   * Get the value of the '<code>previousLink</code>' attribute.
   */
  const StringPiece get_previous_link() const {
    const Json::Value& v = Storage("previousLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>previousLink</code>' attribute.
   *
   * Link to previous page for this Analytics data query.
   *
   * @param[in] value The new value.
   */
  void set_previous_link(const StringPiece& value) {
    *MutableStorage("previousLink") = value.data();
  }

  /**
   * Determine if the '<code>profileInfo</code>' attribute was set.
   *
   * @return true if the '<code>profileInfo</code>' attribute was set.
   */
  bool has_profile_info() const {
    return Storage().isMember("profileInfo");
  }

  /**
   * Clears the '<code>profileInfo</code>' attribute.
   */
  void clear_profile_info() {
    MutableStorage()->removeMember("profileInfo");
  }


  /**
   * Get a reference to the value of the '<code>profileInfo</code>' attribute.
   */
  const McfDataProfileInfo get_profile_info() const {
     const Json::Value& storage = Storage("profileInfo");
    return client::JsonValueToCppValueHelper<McfDataProfileInfo >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>profileInfo</code>'
   * property.
   *
   * Information for the view (profile), for which the Analytics data was
   * requested.
   *
   * @return The result can be modified to change the attribute value.
   */
  McfDataProfileInfo mutable_profileInfo() {
    Json::Value* storage = MutableStorage("profileInfo");
    return client::JsonValueToMutableCppValueHelper<McfDataProfileInfo >(storage);
  }

  /**
   * Determine if the '<code>query</code>' attribute was set.
   *
   * @return true if the '<code>query</code>' attribute was set.
   */
  bool has_query() const {
    return Storage().isMember("query");
  }

  /**
   * Clears the '<code>query</code>' attribute.
   */
  void clear_query() {
    MutableStorage()->removeMember("query");
  }


  /**
   * Get a reference to the value of the '<code>query</code>' attribute.
   */
  const McfDataQuery get_query() const {
     const Json::Value& storage = Storage("query");
    return client::JsonValueToCppValueHelper<McfDataQuery >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>query</code>' property.
   *
   * Analytics data request query parameters.
   *
   * @return The result can be modified to change the attribute value.
   */
  McfDataQuery mutable_query() {
    Json::Value* storage = MutableStorage("query");
    return client::JsonValueToMutableCppValueHelper<McfDataQuery >(storage);
  }

  /**
   * Determine if the '<code>rows</code>' attribute was set.
   *
   * @return true if the '<code>rows</code>' attribute was set.
   */
  bool has_rows() const {
    return Storage().isMember("rows");
  }

  /**
   * Clears the '<code>rows</code>' attribute.
   */
  void clear_rows() {
    MutableStorage()->removeMember("rows");
  }


  /**
   * Get a reference to the value of the '<code>rows</code>' attribute.
   */
  const client::JsonCppArray<client::JsonCppArray<McfDataRows > > get_rows() const {
     const Json::Value& storage = Storage("rows");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<client::JsonCppArray<McfDataRows > > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>rows</code>' property.
   *
   * Analytics data rows, where each row contains a list of dimension values
   * followed by the metric values. The order of dimensions and metrics is same
   * as specified in the request.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<client::JsonCppArray<McfDataRows > > mutable_rows() {
    Json::Value* storage = MutableStorage("rows");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<client::JsonCppArray<McfDataRows > > >(storage);
  }

  /**
   * Determine if the '<code>sampleSize</code>' attribute was set.
   *
   * @return true if the '<code>sampleSize</code>' attribute was set.
   */
  bool has_sample_size() const {
    return Storage().isMember("sampleSize");
  }

  /**
   * Clears the '<code>sampleSize</code>' attribute.
   */
  void clear_sample_size() {
    MutableStorage()->removeMember("sampleSize");
  }


  /**
   * Get the value of the '<code>sampleSize</code>' attribute.
   */
  int64 get_sample_size() const {
    const Json::Value& storage = Storage("sampleSize");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>sampleSize</code>' attribute.
   *
   * The number of samples used to calculate the result.
   *
   * @param[in] value The new value.
   */
  void set_sample_size(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("sampleSize"));
  }

  /**
   * Determine if the '<code>sampleSpace</code>' attribute was set.
   *
   * @return true if the '<code>sampleSpace</code>' attribute was set.
   */
  bool has_sample_space() const {
    return Storage().isMember("sampleSpace");
  }

  /**
   * Clears the '<code>sampleSpace</code>' attribute.
   */
  void clear_sample_space() {
    MutableStorage()->removeMember("sampleSpace");
  }


  /**
   * Get the value of the '<code>sampleSpace</code>' attribute.
   */
  int64 get_sample_space() const {
    const Json::Value& storage = Storage("sampleSpace");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>sampleSpace</code>' attribute.
   *
   * Total size of the sample space from which the samples were selected.
   *
   * @param[in] value The new value.
   */
  void set_sample_space(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("sampleSpace"));
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * Link to this page.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>totalResults</code>' attribute was set.
   *
   * @return true if the '<code>totalResults</code>' attribute was set.
   */
  bool has_total_results() const {
    return Storage().isMember("totalResults");
  }

  /**
   * Clears the '<code>totalResults</code>' attribute.
   */
  void clear_total_results() {
    MutableStorage()->removeMember("totalResults");
  }


  /**
   * Get the value of the '<code>totalResults</code>' attribute.
   */
  int32 get_total_results() const {
    const Json::Value& storage = Storage("totalResults");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>totalResults</code>' attribute.
   *
   * The total number of rows for the query, regardless of the number of rows in
   * the response.
   *
   * @param[in] value The new value.
   */
  void set_total_results(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("totalResults"));
  }

  /**
   * Determine if the '<code>totalsForAllResults</code>' attribute was set.
   *
   * @return true if the '<code>totalsForAllResults</code>' attribute was set.
   */
  bool has_totals_for_all_results() const {
    return Storage().isMember("totalsForAllResults");
  }

  /**
   * Clears the '<code>totalsForAllResults</code>' attribute.
   */
  void clear_totals_for_all_results() {
    MutableStorage()->removeMember("totalsForAllResults");
  }


  /**
   * Get a reference to the value of the '<code>totalsForAllResults</code>'
   * attribute.
   */
  const client::JsonCppAssociativeArray<string > get_totals_for_all_results() const {
     const Json::Value& storage = Storage("totalsForAllResults");
    return client::JsonValueToCppValueHelper<client::JsonCppAssociativeArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>totalsForAllResults</code>' property.
   *
   * Total values for the requested metrics over all the results, not just the
   * results returned in this response. The order of the metric totals is same
   * as the metric order specified in the request.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppAssociativeArray<string > mutable_totalsForAllResults() {
    Json::Value* storage = MutableStorage("totalsForAllResults");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppAssociativeArray<string > >(storage);
  }

 private:
  void operator=(const McfData&);
};  // McfData
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_MCF_DATA_H_
