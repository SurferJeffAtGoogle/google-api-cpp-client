// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_PROFILE_REF_H_
#define  GOOGLE_ANALYTICS_API_PROFILE_REF_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * JSON template for a linked view (profile).
 *
 * @ingroup DataObject
 */
class ProfileRef : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ProfileRef* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ProfileRef(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ProfileRef(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ProfileRef();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::ProfileRef</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::ProfileRef";
  }

  /**
   * Determine if the '<code>accountId</code>' attribute was set.
   *
   * @return true if the '<code>accountId</code>' attribute was set.
   */
  bool has_account_id() const {
    return Storage().isMember("accountId");
  }

  /**
   * Clears the '<code>accountId</code>' attribute.
   */
  void clear_account_id() {
    MutableStorage()->removeMember("accountId");
  }


  /**
   * Get the value of the '<code>accountId</code>' attribute.
   */
  const StringPiece get_account_id() const {
    const Json::Value& v = Storage("accountId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>accountId</code>' attribute.
   *
   * Account ID to which this view (profile) belongs.
   *
   * @param[in] value The new value.
   */
  void set_account_id(const StringPiece& value) {
    *MutableStorage("accountId") = value.data();
  }

  /**
   * Determine if the '<code>href</code>' attribute was set.
   *
   * @return true if the '<code>href</code>' attribute was set.
   */
  bool has_href() const {
    return Storage().isMember("href");
  }

  /**
   * Clears the '<code>href</code>' attribute.
   */
  void clear_href() {
    MutableStorage()->removeMember("href");
  }


  /**
   * Get the value of the '<code>href</code>' attribute.
   */
  const StringPiece get_href() const {
    const Json::Value& v = Storage("href");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>href</code>' attribute.
   *
   * Link for this view (profile).
   *
   * @param[in] value The new value.
   */
  void set_href(const StringPiece& value) {
    *MutableStorage("href") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * View (Profile) ID.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>internalWebPropertyId</code>' attribute was set.
   *
   * @return true if the '<code>internalWebPropertyId</code>' attribute was set.
   */
  bool has_internal_web_property_id() const {
    return Storage().isMember("internalWebPropertyId");
  }

  /**
   * Clears the '<code>internalWebPropertyId</code>' attribute.
   */
  void clear_internal_web_property_id() {
    MutableStorage()->removeMember("internalWebPropertyId");
  }


  /**
   * Get the value of the '<code>internalWebPropertyId</code>' attribute.
   */
  const StringPiece get_internal_web_property_id() const {
    const Json::Value& v = Storage("internalWebPropertyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>internalWebPropertyId</code>' attribute.
   *
   * Internal ID for the web property to which this view (profile) belongs.
   *
   * @param[in] value The new value.
   */
  void set_internal_web_property_id(const StringPiece& value) {
    *MutableStorage("internalWebPropertyId") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Analytics view (profile) reference.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Name of this view (profile).
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>webPropertyId</code>' attribute was set.
   *
   * @return true if the '<code>webPropertyId</code>' attribute was set.
   */
  bool has_web_property_id() const {
    return Storage().isMember("webPropertyId");
  }

  /**
   * Clears the '<code>webPropertyId</code>' attribute.
   */
  void clear_web_property_id() {
    MutableStorage()->removeMember("webPropertyId");
  }


  /**
   * Get the value of the '<code>webPropertyId</code>' attribute.
   */
  const StringPiece get_web_property_id() const {
    const Json::Value& v = Storage("webPropertyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>webPropertyId</code>' attribute.
   *
   * Web property ID of the form UA-XXXXX-YY to which this view (profile)
   * belongs.
   *
   * @param[in] value The new value.
   */
  void set_web_property_id(const StringPiece& value) {
    *MutableStorage("webPropertyId") = value.data();
  }

 private:
  void operator=(const ProfileRef&);
};  // ProfileRef
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_PROFILE_REF_H_
