// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_ACCOUNT_TICKET_H_
#define  GOOGLE_ANALYTICS_API_ACCOUNT_TICKET_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/analytics_api/account.h"
#include "google/analytics_api/profile.h"
#include "google/analytics_api/webproperty.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * JSON template for an Analytics account ticket. The account ticket consists of
 * the ticket ID and the basic information for the account, property and
 * profile.
 *
 * @ingroup DataObject
 */
class AccountTicket : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static AccountTicket* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit AccountTicket(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit AccountTicket(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~AccountTicket();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::AccountTicket</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::AccountTicket";
  }

  /**
   * Determine if the '<code>account</code>' attribute was set.
   *
   * @return true if the '<code>account</code>' attribute was set.
   */
  bool has_account() const {
    return Storage().isMember("account");
  }

  /**
   * Clears the '<code>account</code>' attribute.
   */
  void clear_account() {
    MutableStorage()->removeMember("account");
  }


  /**
   * Get a reference to the value of the '<code>account</code>' attribute.
   */
  const Account get_account() const;

  /**
   * Gets a reference to a mutable value of the '<code>account</code>' property.
   *
   * Account for this ticket.
   *
   * @return The result can be modified to change the attribute value.
   */
  Account mutable_account();

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * Account ticket ID used to access the account ticket.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Resource type for account ticket.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>profile</code>' attribute was set.
   *
   * @return true if the '<code>profile</code>' attribute was set.
   */
  bool has_profile() const {
    return Storage().isMember("profile");
  }

  /**
   * Clears the '<code>profile</code>' attribute.
   */
  void clear_profile() {
    MutableStorage()->removeMember("profile");
  }


  /**
   * Get a reference to the value of the '<code>profile</code>' attribute.
   */
  const Profile get_profile() const;

  /**
   * Gets a reference to a mutable value of the '<code>profile</code>' property.
   *
   * View (Profile) for the account.
   *
   * @return The result can be modified to change the attribute value.
   */
  Profile mutable_profile();

  /**
   * Determine if the '<code>redirectUri</code>' attribute was set.
   *
   * @return true if the '<code>redirectUri</code>' attribute was set.
   */
  bool has_redirect_uri() const {
    return Storage().isMember("redirectUri");
  }

  /**
   * Clears the '<code>redirectUri</code>' attribute.
   */
  void clear_redirect_uri() {
    MutableStorage()->removeMember("redirectUri");
  }


  /**
   * Get the value of the '<code>redirectUri</code>' attribute.
   */
  const StringPiece get_redirect_uri() const {
    const Json::Value& v = Storage("redirectUri");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>redirectUri</code>' attribute.
   *
   * Redirect URI where the user will be sent after accepting Terms of Service.
   * Must be configured in APIs console as a callback URL.
   *
   * @param[in] value The new value.
   */
  void set_redirect_uri(const StringPiece& value) {
    *MutableStorage("redirectUri") = value.data();
  }

  /**
   * Determine if the '<code>webproperty</code>' attribute was set.
   *
   * @return true if the '<code>webproperty</code>' attribute was set.
   */
  bool has_webproperty() const {
    return Storage().isMember("webproperty");
  }

  /**
   * Clears the '<code>webproperty</code>' attribute.
   */
  void clear_webproperty() {
    MutableStorage()->removeMember("webproperty");
  }


  /**
   * Get a reference to the value of the '<code>webproperty</code>' attribute.
   */
  const Webproperty get_webproperty() const;

  /**
   * Gets a reference to a mutable value of the '<code>webproperty</code>'
   * property.
   *
   * Web property for the account.
   *
   * @return The result can be modified to change the attribute value.
   */
  Webproperty mutable_webproperty();

 private:
  void operator=(const AccountTicket&);
};  // AccountTicket
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_ACCOUNT_TICKET_H_
