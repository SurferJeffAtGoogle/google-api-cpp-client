// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_GOAL_H_
#define  GOOGLE_ANALYTICS_API_GOAL_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * JSON template for Analytics goal resource.
 *
 * @ingroup DataObject
 */
class Goal : public client::JsonCppData {
 public:
  /**
   * Details for the goal of the type EVENT.
   *
   * @ingroup DataObject
   */
  class GoalEventDetails : public client::JsonCppData {
   public:
    /**
     * No description provided.
     *
     * @ingroup DataObject
     */
    class GoalEventDetailsEventConditions : public client::JsonCppData {
     public:
      /**
       * Creates a new default instance.
       *
       * @return Ownership is passed back to the caller.
       */
      static GoalEventDetailsEventConditions* New();

      /**
       * Standard constructor for an immutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit GoalEventDetailsEventConditions(const Json::Value& storage);

      /**
       * Standard constructor for a mutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit GoalEventDetailsEventConditions(Json::Value* storage);

      /**
       * Standard destructor.
       */
      virtual ~GoalEventDetailsEventConditions();

      /**
       * Returns a string denoting the type of this data object.
       *
       * @return
       * <code>google_analytics_api::GoalEventDetailsEventConditions</code>
       */
      const char* GetTypeName() const {
        return "google_analytics_api::GoalEventDetailsEventConditions";
      }

      /**
       * Determine if the '<code>comparisonType</code>' attribute was set.
       *
       * @return true if the '<code>comparisonType</code>' attribute was set.
       */
      bool has_comparison_type() const {
        return Storage().isMember("comparisonType");
      }

      /**
       * Clears the '<code>comparisonType</code>' attribute.
       */
      void clear_comparison_type() {
        MutableStorage()->removeMember("comparisonType");
      }


      /**
       * Get the value of the '<code>comparisonType</code>' attribute.
       */
      const StringPiece get_comparison_type() const {
        const Json::Value& v = Storage("comparisonType");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>comparisonType</code>' attribute.
       *
       * Type of comparison. Possible values are LESS_THAN, GREATER_THAN or
       * EQUAL.
       *
       * @param[in] value The new value.
       */
      void set_comparison_type(const StringPiece& value) {
        *MutableStorage("comparisonType") = value.data();
      }

      /**
       * Determine if the '<code>comparisonValue</code>' attribute was set.
       *
       * @return true if the '<code>comparisonValue</code>' attribute was set.
       */
      bool has_comparison_value() const {
        return Storage().isMember("comparisonValue");
      }

      /**
       * Clears the '<code>comparisonValue</code>' attribute.
       */
      void clear_comparison_value() {
        MutableStorage()->removeMember("comparisonValue");
      }


      /**
       * Get the value of the '<code>comparisonValue</code>' attribute.
       */
      int64 get_comparison_value() const {
        const Json::Value& storage = Storage("comparisonValue");
        return client::JsonValueToCppValueHelper<int64 >(storage);
      }

      /**
       * Change the '<code>comparisonValue</code>' attribute.
       *
       * Value used for this comparison.
       *
       * @param[in] value The new value.
       */
      void set_comparison_value(int64 value) {
        client::SetJsonValueFromCppValueHelper<int64 >(
          value, MutableStorage("comparisonValue"));
      }

      /**
       * Determine if the '<code>expression</code>' attribute was set.
       *
       * @return true if the '<code>expression</code>' attribute was set.
       */
      bool has_expression() const {
        return Storage().isMember("expression");
      }

      /**
       * Clears the '<code>expression</code>' attribute.
       */
      void clear_expression() {
        MutableStorage()->removeMember("expression");
      }


      /**
       * Get the value of the '<code>expression</code>' attribute.
       */
      const StringPiece get_expression() const {
        const Json::Value& v = Storage("expression");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>expression</code>' attribute.
       *
       * Expression used for this match.
       *
       * @param[in] value The new value.
       */
      void set_expression(const StringPiece& value) {
        *MutableStorage("expression") = value.data();
      }

      /**
       * Determine if the '<code>matchType</code>' attribute was set.
       *
       * @return true if the '<code>matchType</code>' attribute was set.
       */
      bool has_match_type() const {
        return Storage().isMember("matchType");
      }

      /**
       * Clears the '<code>matchType</code>' attribute.
       */
      void clear_match_type() {
        MutableStorage()->removeMember("matchType");
      }


      /**
       * Get the value of the '<code>matchType</code>' attribute.
       */
      const StringPiece get_match_type() const {
        const Json::Value& v = Storage("matchType");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>matchType</code>' attribute.
       *
       * Type of the match to be performed. Possible values are REGEXP,
       * BEGINS_WITH, or EXACT.
       *
       * @param[in] value The new value.
       */
      void set_match_type(const StringPiece& value) {
        *MutableStorage("matchType") = value.data();
      }

      /**
       * Determine if the '<code>type</code>' attribute was set.
       *
       * @return true if the '<code>type</code>' attribute was set.
       */
      bool has_type() const {
        return Storage().isMember("type");
      }

      /**
       * Clears the '<code>type</code>' attribute.
       */
      void clear_type() {
        MutableStorage()->removeMember("type");
      }


      /**
       * Get the value of the '<code>type</code>' attribute.
       */
      const StringPiece get_type() const {
        const Json::Value& v = Storage("type");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>type</code>' attribute.
       *
       * Type of this event condition. Possible values are CATEGORY, ACTION,
       * LABEL, or VALUE.
       *
       * @param[in] value The new value.
       */
      void set_type(const StringPiece& value) {
        *MutableStorage("type") = value.data();
      }

     private:
      void operator=(const GoalEventDetailsEventConditions&);
    };  // GoalEventDetailsEventConditions
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static GoalEventDetails* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit GoalEventDetails(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit GoalEventDetails(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~GoalEventDetails();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::GoalEventDetails</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::GoalEventDetails";
    }

    /**
     * Determine if the '<code>eventConditions</code>' attribute was set.
     *
     * @return true if the '<code>eventConditions</code>' attribute was set.
     */
    bool has_event_conditions() const {
      return Storage().isMember("eventConditions");
    }

    /**
     * Clears the '<code>eventConditions</code>' attribute.
     */
    void clear_event_conditions() {
      MutableStorage()->removeMember("eventConditions");
    }


    /**
     * Get a reference to the value of the '<code>eventConditions</code>'
     * attribute.
     */
    const client::JsonCppArray<GoalEventDetailsEventConditions > get_event_conditions() const {
       const Json::Value& storage = Storage("eventConditions");
      return client::JsonValueToCppValueHelper<client::JsonCppArray<GoalEventDetailsEventConditions > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>eventConditions</code>'
     * property.
     *
     * List of event conditions.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<GoalEventDetailsEventConditions > mutable_eventConditions() {
      Json::Value* storage = MutableStorage("eventConditions");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<GoalEventDetailsEventConditions > >(storage);
    }

    /**
     * Determine if the '<code>useEventValue</code>' attribute was set.
     *
     * @return true if the '<code>useEventValue</code>' attribute was set.
     */
    bool has_use_event_value() const {
      return Storage().isMember("useEventValue");
    }

    /**
     * Clears the '<code>useEventValue</code>' attribute.
     */
    void clear_use_event_value() {
      MutableStorage()->removeMember("useEventValue");
    }


    /**
     * Get the value of the '<code>useEventValue</code>' attribute.
     */
    bool get_use_event_value() const {
      const Json::Value& storage = Storage("useEventValue");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>useEventValue</code>' attribute.
     *
     * Determines if the event value should be used as the value for this goal.
     *
     * @param[in] value The new value.
     */
    void set_use_event_value(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("useEventValue"));
    }

   private:
    void operator=(const GoalEventDetails&);
  };  // GoalEventDetails
  /**
   * Parent link for a goal. Points to the view (profile) to which this goal
   * belongs.
   *
   * @ingroup DataObject
   */
  class GoalParentLink : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static GoalParentLink* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit GoalParentLink(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit GoalParentLink(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~GoalParentLink();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::GoalParentLink</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::GoalParentLink";
    }

    /**
     * Determine if the '<code>href</code>' attribute was set.
     *
     * @return true if the '<code>href</code>' attribute was set.
     */
    bool has_href() const {
      return Storage().isMember("href");
    }

    /**
     * Clears the '<code>href</code>' attribute.
     */
    void clear_href() {
      MutableStorage()->removeMember("href");
    }


    /**
     * Get the value of the '<code>href</code>' attribute.
     */
    const StringPiece get_href() const {
      const Json::Value& v = Storage("href");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>href</code>' attribute.
     *
     * Link to the view (profile) to which this goal belongs.
     *
     * @param[in] value The new value.
     */
    void set_href(const StringPiece& value) {
      *MutableStorage("href") = value.data();
    }

    /**
     * Determine if the '<code>type</code>' attribute was set.
     *
     * @return true if the '<code>type</code>' attribute was set.
     */
    bool has_type() const {
      return Storage().isMember("type");
    }

    /**
     * Clears the '<code>type</code>' attribute.
     */
    void clear_type() {
      MutableStorage()->removeMember("type");
    }


    /**
     * Get the value of the '<code>type</code>' attribute.
     */
    const StringPiece get_type() const {
      const Json::Value& v = Storage("type");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>type</code>' attribute.
     *
     * Value is "analytics#profile".
     *
     * @param[in] value The new value.
     */
    void set_type(const StringPiece& value) {
      *MutableStorage("type") = value.data();
    }

   private:
    void operator=(const GoalParentLink&);
  };  // GoalParentLink
  /**
   * Details for the goal of the type URL_DESTINATION.
   *
   * @ingroup DataObject
   */
  class GoalUrlDestinationDetails : public client::JsonCppData {
   public:
    /**
     * No description provided.
     *
     * @ingroup DataObject
     */
    class GoalUrlDestinationDetailsSteps : public client::JsonCppData {
     public:
      /**
       * Creates a new default instance.
       *
       * @return Ownership is passed back to the caller.
       */
      static GoalUrlDestinationDetailsSteps* New();

      /**
       * Standard constructor for an immutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit GoalUrlDestinationDetailsSteps(const Json::Value& storage);

      /**
       * Standard constructor for a mutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit GoalUrlDestinationDetailsSteps(Json::Value* storage);

      /**
       * Standard destructor.
       */
      virtual ~GoalUrlDestinationDetailsSteps();

      /**
       * Returns a string denoting the type of this data object.
       *
       * @return
       * <code>google_analytics_api::GoalUrlDestinationDetailsSteps</code>
       */
      const char* GetTypeName() const {
        return "google_analytics_api::GoalUrlDestinationDetailsSteps";
      }

      /**
       * Determine if the '<code>name</code>' attribute was set.
       *
       * @return true if the '<code>name</code>' attribute was set.
       */
      bool has_name() const {
        return Storage().isMember("name");
      }

      /**
       * Clears the '<code>name</code>' attribute.
       */
      void clear_name() {
        MutableStorage()->removeMember("name");
      }


      /**
       * Get the value of the '<code>name</code>' attribute.
       */
      const StringPiece get_name() const {
        const Json::Value& v = Storage("name");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>name</code>' attribute.
       *
       * Step name.
       *
       * @param[in] value The new value.
       */
      void set_name(const StringPiece& value) {
        *MutableStorage("name") = value.data();
      }

      /**
       * Determine if the '<code>number</code>' attribute was set.
       *
       * @return true if the '<code>number</code>' attribute was set.
       */
      bool has_number() const {
        return Storage().isMember("number");
      }

      /**
       * Clears the '<code>number</code>' attribute.
       */
      void clear_number() {
        MutableStorage()->removeMember("number");
      }


      /**
       * Get the value of the '<code>number</code>' attribute.
       */
      int32 get_number() const {
        const Json::Value& storage = Storage("number");
        return client::JsonValueToCppValueHelper<int32 >(storage);
      }

      /**
       * Change the '<code>number</code>' attribute.
       *
       * Step number.
       *
       * @param[in] value The new value.
       */
      void set_number(int32 value) {
        client::SetJsonValueFromCppValueHelper<int32 >(
          value, MutableStorage("number"));
      }

      /**
       * Determine if the '<code>url</code>' attribute was set.
       *
       * @return true if the '<code>url</code>' attribute was set.
       */
      bool has_url() const {
        return Storage().isMember("url");
      }

      /**
       * Clears the '<code>url</code>' attribute.
       */
      void clear_url() {
        MutableStorage()->removeMember("url");
      }


      /**
       * Get the value of the '<code>url</code>' attribute.
       */
      const StringPiece get_url() const {
        const Json::Value& v = Storage("url");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>url</code>' attribute.
       *
       * URL for this step.
       *
       * @param[in] value The new value.
       */
      void set_url(const StringPiece& value) {
        *MutableStorage("url") = value.data();
      }

     private:
      void operator=(const GoalUrlDestinationDetailsSteps&);
    };  // GoalUrlDestinationDetailsSteps
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static GoalUrlDestinationDetails* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit GoalUrlDestinationDetails(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit GoalUrlDestinationDetails(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~GoalUrlDestinationDetails();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::GoalUrlDestinationDetails</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::GoalUrlDestinationDetails";
    }

    /**
     * Determine if the '<code>caseSensitive</code>' attribute was set.
     *
     * @return true if the '<code>caseSensitive</code>' attribute was set.
     */
    bool has_case_sensitive() const {
      return Storage().isMember("caseSensitive");
    }

    /**
     * Clears the '<code>caseSensitive</code>' attribute.
     */
    void clear_case_sensitive() {
      MutableStorage()->removeMember("caseSensitive");
    }


    /**
     * Get the value of the '<code>caseSensitive</code>' attribute.
     */
    bool get_case_sensitive() const {
      const Json::Value& storage = Storage("caseSensitive");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>caseSensitive</code>' attribute.
     *
     * Determines if the goal URL must exactly match the capitalization of
     * visited URLs.
     *
     * @param[in] value The new value.
     */
    void set_case_sensitive(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("caseSensitive"));
    }

    /**
     * Determine if the '<code>firstStepRequired</code>' attribute was set.
     *
     * @return true if the '<code>firstStepRequired</code>' attribute was set.
     */
    bool has_first_step_required() const {
      return Storage().isMember("firstStepRequired");
    }

    /**
     * Clears the '<code>firstStepRequired</code>' attribute.
     */
    void clear_first_step_required() {
      MutableStorage()->removeMember("firstStepRequired");
    }


    /**
     * Get the value of the '<code>firstStepRequired</code>' attribute.
     */
    bool get_first_step_required() const {
      const Json::Value& storage = Storage("firstStepRequired");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>firstStepRequired</code>' attribute.
     *
     * Determines if the first step in this goal is required.
     *
     * @param[in] value The new value.
     */
    void set_first_step_required(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("firstStepRequired"));
    }

    /**
     * Determine if the '<code>matchType</code>' attribute was set.
     *
     * @return true if the '<code>matchType</code>' attribute was set.
     */
    bool has_match_type() const {
      return Storage().isMember("matchType");
    }

    /**
     * Clears the '<code>matchType</code>' attribute.
     */
    void clear_match_type() {
      MutableStorage()->removeMember("matchType");
    }


    /**
     * Get the value of the '<code>matchType</code>' attribute.
     */
    const StringPiece get_match_type() const {
      const Json::Value& v = Storage("matchType");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>matchType</code>' attribute.
     *
     * Match type for the goal URL. Possible values are HEAD, EXACT, or REGEX.
     *
     * @param[in] value The new value.
     */
    void set_match_type(const StringPiece& value) {
      *MutableStorage("matchType") = value.data();
    }

    /**
     * Determine if the '<code>steps</code>' attribute was set.
     *
     * @return true if the '<code>steps</code>' attribute was set.
     */
    bool has_steps() const {
      return Storage().isMember("steps");
    }

    /**
     * Clears the '<code>steps</code>' attribute.
     */
    void clear_steps() {
      MutableStorage()->removeMember("steps");
    }


    /**
     * Get a reference to the value of the '<code>steps</code>' attribute.
     */
    const client::JsonCppArray<GoalUrlDestinationDetailsSteps > get_steps() const {
       const Json::Value& storage = Storage("steps");
      return client::JsonValueToCppValueHelper<client::JsonCppArray<GoalUrlDestinationDetailsSteps > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>steps</code>' property.
     *
     * List of steps configured for this goal funnel.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<GoalUrlDestinationDetailsSteps > mutable_steps() {
      Json::Value* storage = MutableStorage("steps");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<GoalUrlDestinationDetailsSteps > >(storage);
    }

    /**
     * Determine if the '<code>url</code>' attribute was set.
     *
     * @return true if the '<code>url</code>' attribute was set.
     */
    bool has_url() const {
      return Storage().isMember("url");
    }

    /**
     * Clears the '<code>url</code>' attribute.
     */
    void clear_url() {
      MutableStorage()->removeMember("url");
    }


    /**
     * Get the value of the '<code>url</code>' attribute.
     */
    const StringPiece get_url() const {
      const Json::Value& v = Storage("url");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>url</code>' attribute.
     *
     * URL for this goal.
     *
     * @param[in] value The new value.
     */
    void set_url(const StringPiece& value) {
      *MutableStorage("url") = value.data();
    }

   private:
    void operator=(const GoalUrlDestinationDetails&);
  };  // GoalUrlDestinationDetails
  /**
   * Details for the goal of the type VISIT_NUM_PAGES.
   *
   * @ingroup DataObject
   */
  class GoalVisitNumPagesDetails : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static GoalVisitNumPagesDetails* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit GoalVisitNumPagesDetails(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit GoalVisitNumPagesDetails(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~GoalVisitNumPagesDetails();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::GoalVisitNumPagesDetails</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::GoalVisitNumPagesDetails";
    }

    /**
     * Determine if the '<code>comparisonType</code>' attribute was set.
     *
     * @return true if the '<code>comparisonType</code>' attribute was set.
     */
    bool has_comparison_type() const {
      return Storage().isMember("comparisonType");
    }

    /**
     * Clears the '<code>comparisonType</code>' attribute.
     */
    void clear_comparison_type() {
      MutableStorage()->removeMember("comparisonType");
    }


    /**
     * Get the value of the '<code>comparisonType</code>' attribute.
     */
    const StringPiece get_comparison_type() const {
      const Json::Value& v = Storage("comparisonType");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>comparisonType</code>' attribute.
     *
     * Type of comparison. Possible values are LESS_THAN, GREATER_THAN, or
     * EQUAL.
     *
     * @param[in] value The new value.
     */
    void set_comparison_type(const StringPiece& value) {
      *MutableStorage("comparisonType") = value.data();
    }

    /**
     * Determine if the '<code>comparisonValue</code>' attribute was set.
     *
     * @return true if the '<code>comparisonValue</code>' attribute was set.
     */
    bool has_comparison_value() const {
      return Storage().isMember("comparisonValue");
    }

    /**
     * Clears the '<code>comparisonValue</code>' attribute.
     */
    void clear_comparison_value() {
      MutableStorage()->removeMember("comparisonValue");
    }


    /**
     * Get the value of the '<code>comparisonValue</code>' attribute.
     */
    int64 get_comparison_value() const {
      const Json::Value& storage = Storage("comparisonValue");
      return client::JsonValueToCppValueHelper<int64 >(storage);
    }

    /**
     * Change the '<code>comparisonValue</code>' attribute.
     *
     * Value used for this comparison.
     *
     * @param[in] value The new value.
     */
    void set_comparison_value(int64 value) {
      client::SetJsonValueFromCppValueHelper<int64 >(
        value, MutableStorage("comparisonValue"));
    }

   private:
    void operator=(const GoalVisitNumPagesDetails&);
  };  // GoalVisitNumPagesDetails
  /**
   * Details for the goal of the type VISIT_TIME_ON_SITE.
   *
   * @ingroup DataObject
   */
  class GoalVisitTimeOnSiteDetails : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static GoalVisitTimeOnSiteDetails* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit GoalVisitTimeOnSiteDetails(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit GoalVisitTimeOnSiteDetails(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~GoalVisitTimeOnSiteDetails();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::GoalVisitTimeOnSiteDetails</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::GoalVisitTimeOnSiteDetails";
    }

    /**
     * Determine if the '<code>comparisonType</code>' attribute was set.
     *
     * @return true if the '<code>comparisonType</code>' attribute was set.
     */
    bool has_comparison_type() const {
      return Storage().isMember("comparisonType");
    }

    /**
     * Clears the '<code>comparisonType</code>' attribute.
     */
    void clear_comparison_type() {
      MutableStorage()->removeMember("comparisonType");
    }


    /**
     * Get the value of the '<code>comparisonType</code>' attribute.
     */
    const StringPiece get_comparison_type() const {
      const Json::Value& v = Storage("comparisonType");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>comparisonType</code>' attribute.
     *
     * Type of comparison. Possible values are LESS_THAN or GREATER_THAN.
     *
     * @param[in] value The new value.
     */
    void set_comparison_type(const StringPiece& value) {
      *MutableStorage("comparisonType") = value.data();
    }

    /**
     * Determine if the '<code>comparisonValue</code>' attribute was set.
     *
     * @return true if the '<code>comparisonValue</code>' attribute was set.
     */
    bool has_comparison_value() const {
      return Storage().isMember("comparisonValue");
    }

    /**
     * Clears the '<code>comparisonValue</code>' attribute.
     */
    void clear_comparison_value() {
      MutableStorage()->removeMember("comparisonValue");
    }


    /**
     * Get the value of the '<code>comparisonValue</code>' attribute.
     */
    int64 get_comparison_value() const {
      const Json::Value& storage = Storage("comparisonValue");
      return client::JsonValueToCppValueHelper<int64 >(storage);
    }

    /**
     * Change the '<code>comparisonValue</code>' attribute.
     *
     * Value used for this comparison.
     *
     * @param[in] value The new value.
     */
    void set_comparison_value(int64 value) {
      client::SetJsonValueFromCppValueHelper<int64 >(
        value, MutableStorage("comparisonValue"));
    }

   private:
    void operator=(const GoalVisitTimeOnSiteDetails&);
  };  // GoalVisitTimeOnSiteDetails
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Goal* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Goal(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Goal(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Goal();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::Goal</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::Goal";
  }

  /**
   * Determine if the '<code>accountId</code>' attribute was set.
   *
   * @return true if the '<code>accountId</code>' attribute was set.
   */
  bool has_account_id() const {
    return Storage().isMember("accountId");
  }

  /**
   * Clears the '<code>accountId</code>' attribute.
   */
  void clear_account_id() {
    MutableStorage()->removeMember("accountId");
  }


  /**
   * Get the value of the '<code>accountId</code>' attribute.
   */
  const StringPiece get_account_id() const {
    const Json::Value& v = Storage("accountId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>accountId</code>' attribute.
   *
   * Account ID to which this goal belongs.
   *
   * @param[in] value The new value.
   */
  void set_account_id(const StringPiece& value) {
    *MutableStorage("accountId") = value.data();
  }

  /**
   * Determine if the '<code>active</code>' attribute was set.
   *
   * @return true if the '<code>active</code>' attribute was set.
   */
  bool has_active() const {
    return Storage().isMember("active");
  }

  /**
   * Clears the '<code>active</code>' attribute.
   */
  void clear_active() {
    MutableStorage()->removeMember("active");
  }


  /**
   * Get the value of the '<code>active</code>' attribute.
   */
  bool get_active() const {
    const Json::Value& storage = Storage("active");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>active</code>' attribute.
   *
   * Determines whether this goal is active.
   *
   * @param[in] value The new value.
   */
  void set_active(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("active"));
  }

  /**
   * Determine if the '<code>created</code>' attribute was set.
   *
   * @return true if the '<code>created</code>' attribute was set.
   */
  bool has_created() const {
    return Storage().isMember("created");
  }

  /**
   * Clears the '<code>created</code>' attribute.
   */
  void clear_created() {
    MutableStorage()->removeMember("created");
  }


  /**
   * Get the value of the '<code>created</code>' attribute.
   */
  client::DateTime get_created() const {
    const Json::Value& storage = Storage("created");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>created</code>' attribute.
   *
   * Time this goal was created.
   *
   * @param[in] value The new value.
   */
  void set_created(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("created"));
  }

  /**
   * Determine if the '<code>eventDetails</code>' attribute was set.
   *
   * @return true if the '<code>eventDetails</code>' attribute was set.
   */
  bool has_event_details() const {
    return Storage().isMember("eventDetails");
  }

  /**
   * Clears the '<code>eventDetails</code>' attribute.
   */
  void clear_event_details() {
    MutableStorage()->removeMember("eventDetails");
  }


  /**
   * Get a reference to the value of the '<code>eventDetails</code>' attribute.
   */
  const GoalEventDetails get_event_details() const {
     const Json::Value& storage = Storage("eventDetails");
    return client::JsonValueToCppValueHelper<GoalEventDetails >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>eventDetails</code>'
   * property.
   *
   * Details for the goal of the type EVENT.
   *
   * @return The result can be modified to change the attribute value.
   */
  GoalEventDetails mutable_eventDetails() {
    Json::Value* storage = MutableStorage("eventDetails");
    return client::JsonValueToMutableCppValueHelper<GoalEventDetails >(storage);
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * Goal ID.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>internalWebPropertyId</code>' attribute was set.
   *
   * @return true if the '<code>internalWebPropertyId</code>' attribute was set.
   */
  bool has_internal_web_property_id() const {
    return Storage().isMember("internalWebPropertyId");
  }

  /**
   * Clears the '<code>internalWebPropertyId</code>' attribute.
   */
  void clear_internal_web_property_id() {
    MutableStorage()->removeMember("internalWebPropertyId");
  }


  /**
   * Get the value of the '<code>internalWebPropertyId</code>' attribute.
   */
  const StringPiece get_internal_web_property_id() const {
    const Json::Value& v = Storage("internalWebPropertyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>internalWebPropertyId</code>' attribute.
   *
   * Internal ID for the web property to which this goal belongs.
   *
   * @param[in] value The new value.
   */
  void set_internal_web_property_id(const StringPiece& value) {
    *MutableStorage("internalWebPropertyId") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Resource type for an Analytics goal.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Goal name.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>parentLink</code>' attribute was set.
   *
   * @return true if the '<code>parentLink</code>' attribute was set.
   */
  bool has_parent_link() const {
    return Storage().isMember("parentLink");
  }

  /**
   * Clears the '<code>parentLink</code>' attribute.
   */
  void clear_parent_link() {
    MutableStorage()->removeMember("parentLink");
  }


  /**
   * Get a reference to the value of the '<code>parentLink</code>' attribute.
   */
  const GoalParentLink get_parent_link() const {
     const Json::Value& storage = Storage("parentLink");
    return client::JsonValueToCppValueHelper<GoalParentLink >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>parentLink</code>'
   * property.
   *
   * Parent link for a goal. Points to the view (profile) to which this goal
   * belongs.
   *
   * @return The result can be modified to change the attribute value.
   */
  GoalParentLink mutable_parentLink() {
    Json::Value* storage = MutableStorage("parentLink");
    return client::JsonValueToMutableCppValueHelper<GoalParentLink >(storage);
  }

  /**
   * Determine if the '<code>profileId</code>' attribute was set.
   *
   * @return true if the '<code>profileId</code>' attribute was set.
   */
  bool has_profile_id() const {
    return Storage().isMember("profileId");
  }

  /**
   * Clears the '<code>profileId</code>' attribute.
   */
  void clear_profile_id() {
    MutableStorage()->removeMember("profileId");
  }


  /**
   * Get the value of the '<code>profileId</code>' attribute.
   */
  const StringPiece get_profile_id() const {
    const Json::Value& v = Storage("profileId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>profileId</code>' attribute.
   *
   * View (Profile) ID to which this goal belongs.
   *
   * @param[in] value The new value.
   */
  void set_profile_id(const StringPiece& value) {
    *MutableStorage("profileId") = value.data();
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * Link for this goal.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>type</code>' attribute was set.
   *
   * @return true if the '<code>type</code>' attribute was set.
   */
  bool has_type() const {
    return Storage().isMember("type");
  }

  /**
   * Clears the '<code>type</code>' attribute.
   */
  void clear_type() {
    MutableStorage()->removeMember("type");
  }


  /**
   * Get the value of the '<code>type</code>' attribute.
   */
  const StringPiece get_type() const {
    const Json::Value& v = Storage("type");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>type</code>' attribute.
   *
   * Goal type. Possible values are URL_DESTINATION, VISIT_TIME_ON_SITE,
   * VISIT_NUM_PAGES, AND EVENT.
   *
   * @param[in] value The new value.
   */
  void set_type(const StringPiece& value) {
    *MutableStorage("type") = value.data();
  }

  /**
   * Determine if the '<code>updated</code>' attribute was set.
   *
   * @return true if the '<code>updated</code>' attribute was set.
   */
  bool has_updated() const {
    return Storage().isMember("updated");
  }

  /**
   * Clears the '<code>updated</code>' attribute.
   */
  void clear_updated() {
    MutableStorage()->removeMember("updated");
  }


  /**
   * Get the value of the '<code>updated</code>' attribute.
   */
  client::DateTime get_updated() const {
    const Json::Value& storage = Storage("updated");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>updated</code>' attribute.
   *
   * Time this goal was last modified.
   *
   * @param[in] value The new value.
   */
  void set_updated(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("updated"));
  }

  /**
   * Determine if the '<code>urlDestinationDetails</code>' attribute was set.
   *
   * @return true if the '<code>urlDestinationDetails</code>' attribute was set.
   */
  bool has_url_destination_details() const {
    return Storage().isMember("urlDestinationDetails");
  }

  /**
   * Clears the '<code>urlDestinationDetails</code>' attribute.
   */
  void clear_url_destination_details() {
    MutableStorage()->removeMember("urlDestinationDetails");
  }


  /**
   * Get a reference to the value of the '<code>urlDestinationDetails</code>'
   * attribute.
   */
  const GoalUrlDestinationDetails get_url_destination_details() const {
     const Json::Value& storage = Storage("urlDestinationDetails");
    return client::JsonValueToCppValueHelper<GoalUrlDestinationDetails >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>urlDestinationDetails</code>' property.
   *
   * Details for the goal of the type URL_DESTINATION.
   *
   * @return The result can be modified to change the attribute value.
   */
  GoalUrlDestinationDetails mutable_urlDestinationDetails() {
    Json::Value* storage = MutableStorage("urlDestinationDetails");
    return client::JsonValueToMutableCppValueHelper<GoalUrlDestinationDetails >(storage);
  }

  /**
   * Determine if the '<code>value</code>' attribute was set.
   *
   * @return true if the '<code>value</code>' attribute was set.
   */
  bool has_value() const {
    return Storage().isMember("value");
  }

  /**
   * Clears the '<code>value</code>' attribute.
   */
  void clear_value() {
    MutableStorage()->removeMember("value");
  }


  /**
   * Get the value of the '<code>value</code>' attribute.
   */
  float get_value() const {
    const Json::Value& storage = Storage("value");
    return client::JsonValueToCppValueHelper<float >(storage);
  }

  /**
   * Change the '<code>value</code>' attribute.
   *
   * Goal value.
   *
   * @param[in] value The new value.
   */
  void set_value(float value) {
    client::SetJsonValueFromCppValueHelper<float >(
      value, MutableStorage("value"));
  }

  /**
   * Determine if the '<code>visitNumPagesDetails</code>' attribute was set.
   *
   * @return true if the '<code>visitNumPagesDetails</code>' attribute was set.
   */
  bool has_visit_num_pages_details() const {
    return Storage().isMember("visitNumPagesDetails");
  }

  /**
   * Clears the '<code>visitNumPagesDetails</code>' attribute.
   */
  void clear_visit_num_pages_details() {
    MutableStorage()->removeMember("visitNumPagesDetails");
  }


  /**
   * Get a reference to the value of the '<code>visitNumPagesDetails</code>'
   * attribute.
   */
  const GoalVisitNumPagesDetails get_visit_num_pages_details() const {
     const Json::Value& storage = Storage("visitNumPagesDetails");
    return client::JsonValueToCppValueHelper<GoalVisitNumPagesDetails >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>visitNumPagesDetails</code>' property.
   *
   * Details for the goal of the type VISIT_NUM_PAGES.
   *
   * @return The result can be modified to change the attribute value.
   */
  GoalVisitNumPagesDetails mutable_visitNumPagesDetails() {
    Json::Value* storage = MutableStorage("visitNumPagesDetails");
    return client::JsonValueToMutableCppValueHelper<GoalVisitNumPagesDetails >(storage);
  }

  /**
   * Determine if the '<code>visitTimeOnSiteDetails</code>' attribute was set.
   *
   * @return true if the '<code>visitTimeOnSiteDetails</code>' attribute was
   * set.
   */
  bool has_visit_time_on_site_details() const {
    return Storage().isMember("visitTimeOnSiteDetails");
  }

  /**
   * Clears the '<code>visitTimeOnSiteDetails</code>' attribute.
   */
  void clear_visit_time_on_site_details() {
    MutableStorage()->removeMember("visitTimeOnSiteDetails");
  }


  /**
   * Get a reference to the value of the '<code>visitTimeOnSiteDetails</code>'
   * attribute.
   */
  const GoalVisitTimeOnSiteDetails get_visit_time_on_site_details() const {
     const Json::Value& storage = Storage("visitTimeOnSiteDetails");
    return client::JsonValueToCppValueHelper<GoalVisitTimeOnSiteDetails >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>visitTimeOnSiteDetails</code>' property.
   *
   * Details for the goal of the type VISIT_TIME_ON_SITE.
   *
   * @return The result can be modified to change the attribute value.
   */
  GoalVisitTimeOnSiteDetails mutable_visitTimeOnSiteDetails() {
    Json::Value* storage = MutableStorage("visitTimeOnSiteDetails");
    return client::JsonValueToMutableCppValueHelper<GoalVisitTimeOnSiteDetails >(storage);
  }

  /**
   * Determine if the '<code>webPropertyId</code>' attribute was set.
   *
   * @return true if the '<code>webPropertyId</code>' attribute was set.
   */
  bool has_web_property_id() const {
    return Storage().isMember("webPropertyId");
  }

  /**
   * Clears the '<code>webPropertyId</code>' attribute.
   */
  void clear_web_property_id() {
    MutableStorage()->removeMember("webPropertyId");
  }


  /**
   * Get the value of the '<code>webPropertyId</code>' attribute.
   */
  const StringPiece get_web_property_id() const {
    const Json::Value& v = Storage("webPropertyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>webPropertyId</code>' attribute.
   *
   * Web property ID to which this goal belongs. The web property ID is of the
   * form UA-XXXXX-YY.
   *
   * @param[in] value The new value.
   */
  void set_web_property_id(const StringPiece& value) {
    *MutableStorage("webPropertyId") = value.data();
  }

 private:
  void operator=(const Goal&);
};  // Goal
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_GOAL_H_
