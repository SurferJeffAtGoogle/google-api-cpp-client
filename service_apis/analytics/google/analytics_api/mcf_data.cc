// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Description:
//   Views and manages your Google Analytics data.
// Classes:
//   McfData
// Documentation:
//   https://developers.google.com/analytics/

#include "google/analytics_api/mcf_data.h"
#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"


#include <string>
#include "googleapis/strings/strcat.h"

namespace google_analytics_api {
using namespace googleapis;



// Object factory method (static).
McfData::McfDataColumnHeaders* McfData::McfDataColumnHeaders::New() {
  return new client::JsonCppCapsule<McfDataColumnHeaders>;
}

// Standard immutable constructor.
McfData::McfDataColumnHeaders::McfDataColumnHeaders(const Json::Value& storage)
  : client::JsonCppData(storage) {
}

// Standard mutable constructor.
McfData::McfDataColumnHeaders::McfDataColumnHeaders(Json::Value* storage)
  : client::JsonCppData(storage) {
}

// Standard destructor.
McfData::McfDataColumnHeaders::~McfDataColumnHeaders() {
}

// Properties.

// Object factory method (static).
McfData::McfDataProfileInfo* McfData::McfDataProfileInfo::New() {
  return new client::JsonCppCapsule<McfDataProfileInfo>;
}

// Standard immutable constructor.
McfData::McfDataProfileInfo::McfDataProfileInfo(const Json::Value& storage)
  : client::JsonCppData(storage) {
}

// Standard mutable constructor.
McfData::McfDataProfileInfo::McfDataProfileInfo(Json::Value* storage)
  : client::JsonCppData(storage) {
}

// Standard destructor.
McfData::McfDataProfileInfo::~McfDataProfileInfo() {
}

// Properties.

// Object factory method (static).
McfData::McfDataQuery* McfData::McfDataQuery::New() {
  return new client::JsonCppCapsule<McfDataQuery>;
}

// Standard immutable constructor.
McfData::McfDataQuery::McfDataQuery(const Json::Value& storage)
  : client::JsonCppData(storage) {
}

// Standard mutable constructor.
McfData::McfDataQuery::McfDataQuery(Json::Value* storage)
  : client::JsonCppData(storage) {
}

// Standard destructor.
McfData::McfDataQuery::~McfDataQuery() {
}

// Properties.


// Object factory method (static).
McfData::McfDataRows::McfDataRowsConversionPathValue* McfData::McfDataRows::McfDataRowsConversionPathValue::New() {
  return new client::JsonCppCapsule<McfDataRowsConversionPathValue>;
}

// Standard immutable constructor.
McfData::McfDataRows::McfDataRowsConversionPathValue::McfDataRowsConversionPathValue(const Json::Value& storage)
  : client::JsonCppData(storage) {
}

// Standard mutable constructor.
McfData::McfDataRows::McfDataRowsConversionPathValue::McfDataRowsConversionPathValue(Json::Value* storage)
  : client::JsonCppData(storage) {
}

// Standard destructor.
McfData::McfDataRows::McfDataRowsConversionPathValue::~McfDataRowsConversionPathValue() {
}

// Properties.
// Object factory method (static).
McfData::McfDataRows* McfData::McfDataRows::New() {
  return new client::JsonCppCapsule<McfDataRows>;
}

// Standard immutable constructor.
McfData::McfDataRows::McfDataRows(const Json::Value& storage)
  : client::JsonCppData(storage) {
}

// Standard mutable constructor.
McfData::McfDataRows::McfDataRows(Json::Value* storage)
  : client::JsonCppData(storage) {
}

// Standard destructor.
McfData::McfDataRows::~McfDataRows() {
}

// Properties.
// Object factory method (static).
McfData* McfData::New() {
  return new client::JsonCppCapsule<McfData>;
}

// Standard immutable constructor.
McfData::McfData(const Json::Value& storage)
  : client::JsonCppData(storage) {
}

// Standard mutable constructor.
McfData::McfData(Json::Value* storage)
  : client::JsonCppData(storage) {
}

// Standard destructor.
McfData::~McfData() {
}

// Properties.
}  // namespace google_analytics_api
