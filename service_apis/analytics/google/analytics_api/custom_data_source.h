// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_CUSTOM_DATA_SOURCE_H_
#define  GOOGLE_ANALYTICS_API_CUSTOM_DATA_SOURCE_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * JSON template for an Analytics custom data source.
 *
 * @ingroup DataObject
 */
class CustomDataSource : public client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class CustomDataSourceChildLink : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static CustomDataSourceChildLink* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit CustomDataSourceChildLink(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit CustomDataSourceChildLink(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~CustomDataSourceChildLink();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::CustomDataSourceChildLink</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::CustomDataSourceChildLink";
    }

    /**
     * Determine if the '<code>href</code>' attribute was set.
     *
     * @return true if the '<code>href</code>' attribute was set.
     */
    bool has_href() const {
      return Storage().isMember("href");
    }

    /**
     * Clears the '<code>href</code>' attribute.
     */
    void clear_href() {
      MutableStorage()->removeMember("href");
    }


    /**
     * Get the value of the '<code>href</code>' attribute.
     */
    const StringPiece get_href() const {
      const Json::Value& v = Storage("href");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>href</code>' attribute.
     *
     * Link to the list of daily uploads for this custom data source. Link to
     * the list of uploads for this custom data source.
     *
     * @param[in] value The new value.
     */
    void set_href(const StringPiece& value) {
      *MutableStorage("href") = value.data();
    }

    /**
     * Determine if the '<code>type</code>' attribute was set.
     *
     * @return true if the '<code>type</code>' attribute was set.
     */
    bool has_type() const {
      return Storage().isMember("type");
    }

    /**
     * Clears the '<code>type</code>' attribute.
     */
    void clear_type() {
      MutableStorage()->removeMember("type");
    }


    /**
     * Get the value of the '<code>type</code>' attribute.
     */
    const StringPiece get_type() const {
      const Json::Value& v = Storage("type");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>type</code>' attribute.
     *
     * Value is "analytics#dailyUploads". Value is "analytics#uploads".
     *
     * @param[in] value The new value.
     */
    void set_type(const StringPiece& value) {
      *MutableStorage("type") = value.data();
    }

   private:
    void operator=(const CustomDataSourceChildLink&);
  };  // CustomDataSourceChildLink
  /**
   * Parent link for this custom data source. Points to the web property to
   * which this custom data source belongs.
   *
   * @ingroup DataObject
   */
  class CustomDataSourceParentLink : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static CustomDataSourceParentLink* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit CustomDataSourceParentLink(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit CustomDataSourceParentLink(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~CustomDataSourceParentLink();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::CustomDataSourceParentLink</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::CustomDataSourceParentLink";
    }

    /**
     * Determine if the '<code>href</code>' attribute was set.
     *
     * @return true if the '<code>href</code>' attribute was set.
     */
    bool has_href() const {
      return Storage().isMember("href");
    }

    /**
     * Clears the '<code>href</code>' attribute.
     */
    void clear_href() {
      MutableStorage()->removeMember("href");
    }


    /**
     * Get the value of the '<code>href</code>' attribute.
     */
    const StringPiece get_href() const {
      const Json::Value& v = Storage("href");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>href</code>' attribute.
     *
     * Link to the web property to which this custom data source belongs.
     *
     * @param[in] value The new value.
     */
    void set_href(const StringPiece& value) {
      *MutableStorage("href") = value.data();
    }

    /**
     * Determine if the '<code>type</code>' attribute was set.
     *
     * @return true if the '<code>type</code>' attribute was set.
     */
    bool has_type() const {
      return Storage().isMember("type");
    }

    /**
     * Clears the '<code>type</code>' attribute.
     */
    void clear_type() {
      MutableStorage()->removeMember("type");
    }


    /**
     * Get the value of the '<code>type</code>' attribute.
     */
    const StringPiece get_type() const {
      const Json::Value& v = Storage("type");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>type</code>' attribute.
     *
     * Value is "analytics#webproperty".
     *
     * @param[in] value The new value.
     */
    void set_type(const StringPiece& value) {
      *MutableStorage("type") = value.data();
    }

   private:
    void operator=(const CustomDataSourceParentLink&);
  };  // CustomDataSourceParentLink
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static CustomDataSource* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit CustomDataSource(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit CustomDataSource(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~CustomDataSource();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::CustomDataSource</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::CustomDataSource";
  }

  /**
   * Determine if the '<code>accountId</code>' attribute was set.
   *
   * @return true if the '<code>accountId</code>' attribute was set.
   */
  bool has_account_id() const {
    return Storage().isMember("accountId");
  }

  /**
   * Clears the '<code>accountId</code>' attribute.
   */
  void clear_account_id() {
    MutableStorage()->removeMember("accountId");
  }


  /**
   * Get the value of the '<code>accountId</code>' attribute.
   */
  const StringPiece get_account_id() const {
    const Json::Value& v = Storage("accountId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>accountId</code>' attribute.
   *
   * Account ID to which this custom data source belongs.
   *
   * @param[in] value The new value.
   */
  void set_account_id(const StringPiece& value) {
    *MutableStorage("accountId") = value.data();
  }

  /**
   * Determine if the '<code>childLink</code>' attribute was set.
   *
   * @return true if the '<code>childLink</code>' attribute was set.
   */
  bool has_child_link() const {
    return Storage().isMember("childLink");
  }

  /**
   * Clears the '<code>childLink</code>' attribute.
   */
  void clear_child_link() {
    MutableStorage()->removeMember("childLink");
  }


  /**
   * Get a reference to the value of the '<code>childLink</code>' attribute.
   */
  const CustomDataSourceChildLink get_child_link() const {
     const Json::Value& storage = Storage("childLink");
    return client::JsonValueToCppValueHelper<CustomDataSourceChildLink >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>childLink</code>'
   * property.
   * @return The result can be modified to change the attribute value.
   */
  CustomDataSourceChildLink mutable_childLink() {
    Json::Value* storage = MutableStorage("childLink");
    return client::JsonValueToMutableCppValueHelper<CustomDataSourceChildLink >(storage);
  }

  /**
   * Determine if the '<code>created</code>' attribute was set.
   *
   * @return true if the '<code>created</code>' attribute was set.
   */
  bool has_created() const {
    return Storage().isMember("created");
  }

  /**
   * Clears the '<code>created</code>' attribute.
   */
  void clear_created() {
    MutableStorage()->removeMember("created");
  }


  /**
   * Get the value of the '<code>created</code>' attribute.
   */
  client::DateTime get_created() const {
    const Json::Value& storage = Storage("created");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>created</code>' attribute.
   *
   * Time this custom data source was created.
   *
   * @param[in] value The new value.
   */
  void set_created(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("created"));
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * Description of custom data source.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * Custom data source ID.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>importBehavior</code>' attribute was set.
   *
   * @return true if the '<code>importBehavior</code>' attribute was set.
   */
  bool has_import_behavior() const {
    return Storage().isMember("importBehavior");
  }

  /**
   * Clears the '<code>importBehavior</code>' attribute.
   */
  void clear_import_behavior() {
    MutableStorage()->removeMember("importBehavior");
  }


  /**
   * Get the value of the '<code>importBehavior</code>' attribute.
   */
  const StringPiece get_import_behavior() const {
    const Json::Value& v = Storage("importBehavior");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>importBehavior</code>' attribute.
   * @param[in] value The new value.
   */
  void set_import_behavior(const StringPiece& value) {
    *MutableStorage("importBehavior") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Resource type for Analytics custom data source.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Name of this custom data source.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>parentLink</code>' attribute was set.
   *
   * @return true if the '<code>parentLink</code>' attribute was set.
   */
  bool has_parent_link() const {
    return Storage().isMember("parentLink");
  }

  /**
   * Clears the '<code>parentLink</code>' attribute.
   */
  void clear_parent_link() {
    MutableStorage()->removeMember("parentLink");
  }


  /**
   * Get a reference to the value of the '<code>parentLink</code>' attribute.
   */
  const CustomDataSourceParentLink get_parent_link() const {
     const Json::Value& storage = Storage("parentLink");
    return client::JsonValueToCppValueHelper<CustomDataSourceParentLink >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>parentLink</code>'
   * property.
   *
   * Parent link for this custom data source. Points to the web property to
   * which this custom data source belongs.
   *
   * @return The result can be modified to change the attribute value.
   */
  CustomDataSourceParentLink mutable_parentLink() {
    Json::Value* storage = MutableStorage("parentLink");
    return client::JsonValueToMutableCppValueHelper<CustomDataSourceParentLink >(storage);
  }

  /**
   * Determine if the '<code>profilesLinked</code>' attribute was set.
   *
   * @return true if the '<code>profilesLinked</code>' attribute was set.
   */
  bool has_profiles_linked() const {
    return Storage().isMember("profilesLinked");
  }

  /**
   * Clears the '<code>profilesLinked</code>' attribute.
   */
  void clear_profiles_linked() {
    MutableStorage()->removeMember("profilesLinked");
  }


  /**
   * Get a reference to the value of the '<code>profilesLinked</code>'
   * attribute.
   */
  const client::JsonCppArray<string > get_profiles_linked() const {
     const Json::Value& storage = Storage("profilesLinked");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>profilesLinked</code>'
   * property.
   *
   * IDs of views (profiles) linked to the custom data source.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_profilesLinked() {
    Json::Value* storage = MutableStorage("profilesLinked");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>schema</code>' attribute was set.
   *
   * @return true if the '<code>schema</code>' attribute was set.
   */
  bool has_schema() const {
    return Storage().isMember("schema");
  }

  /**
   * Clears the '<code>schema</code>' attribute.
   */
  void clear_schema() {
    MutableStorage()->removeMember("schema");
  }


  /**
   * Get a reference to the value of the '<code>schema</code>' attribute.
   */
  const client::JsonCppArray<string > get_schema() const {
     const Json::Value& storage = Storage("schema");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>schema</code>' property.
   *
   * Collection of schema headers of the custom data source.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_schema() {
    Json::Value* storage = MutableStorage("schema");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * Link for this Analytics custom data source.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>type</code>' attribute was set.
   *
   * @return true if the '<code>type</code>' attribute was set.
   */
  bool has_type() const {
    return Storage().isMember("type");
  }

  /**
   * Clears the '<code>type</code>' attribute.
   */
  void clear_type() {
    MutableStorage()->removeMember("type");
  }


  /**
   * Get the value of the '<code>type</code>' attribute.
   */
  const StringPiece get_type() const {
    const Json::Value& v = Storage("type");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>type</code>' attribute.
   *
   * Type of the custom data source.
   *
   * @param[in] value The new value.
   */
  void set_type(const StringPiece& value) {
    *MutableStorage("type") = value.data();
  }

  /**
   * Determine if the '<code>updated</code>' attribute was set.
   *
   * @return true if the '<code>updated</code>' attribute was set.
   */
  bool has_updated() const {
    return Storage().isMember("updated");
  }

  /**
   * Clears the '<code>updated</code>' attribute.
   */
  void clear_updated() {
    MutableStorage()->removeMember("updated");
  }


  /**
   * Get the value of the '<code>updated</code>' attribute.
   */
  client::DateTime get_updated() const {
    const Json::Value& storage = Storage("updated");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>updated</code>' attribute.
   *
   * Time this custom data source was last modified.
   *
   * @param[in] value The new value.
   */
  void set_updated(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("updated"));
  }

  /**
   * Determine if the '<code>uploadType</code>' attribute was set.
   *
   * @return true if the '<code>uploadType</code>' attribute was set.
   */
  bool has_upload_type() const {
    return Storage().isMember("uploadType");
  }

  /**
   * Clears the '<code>uploadType</code>' attribute.
   */
  void clear_upload_type() {
    MutableStorage()->removeMember("uploadType");
  }


  /**
   * Get the value of the '<code>uploadType</code>' attribute.
   */
  const StringPiece get_upload_type() const {
    const Json::Value& v = Storage("uploadType");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>uploadType</code>' attribute.
   *
   * Upload type of the custom data source.
   *
   * @param[in] value The new value.
   */
  void set_upload_type(const StringPiece& value) {
    *MutableStorage("uploadType") = value.data();
  }

  /**
   * Determine if the '<code>webPropertyId</code>' attribute was set.
   *
   * @return true if the '<code>webPropertyId</code>' attribute was set.
   */
  bool has_web_property_id() const {
    return Storage().isMember("webPropertyId");
  }

  /**
   * Clears the '<code>webPropertyId</code>' attribute.
   */
  void clear_web_property_id() {
    MutableStorage()->removeMember("webPropertyId");
  }


  /**
   * Get the value of the '<code>webPropertyId</code>' attribute.
   */
  const StringPiece get_web_property_id() const {
    const Json::Value& v = Storage("webPropertyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>webPropertyId</code>' attribute.
   *
   * Web property ID of the form UA-XXXXX-YY to which this custom data source
   * belongs.
   *
   * @param[in] value The new value.
   */
  void set_web_property_id(const StringPiece& value) {
    *MutableStorage("webPropertyId") = value.data();
  }

 private:
  void operator=(const CustomDataSource&);
};  // CustomDataSource
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_CUSTOM_DATA_SOURCE_H_
