// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_PROFILE_H_
#define  GOOGLE_ANALYTICS_API_PROFILE_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * JSON template for an Analytics view (profile).
 *
 * @ingroup DataObject
 */
class Profile : public client::JsonCppData {
 public:
  /**
   * Child link for this view (profile). Points to the list of goals for this
   * view (profile).
   *
   * @ingroup DataObject
   */
  class ProfileChildLink : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static ProfileChildLink* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ProfileChildLink(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ProfileChildLink(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~ProfileChildLink();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::ProfileChildLink</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::ProfileChildLink";
    }

    /**
     * Determine if the '<code>href</code>' attribute was set.
     *
     * @return true if the '<code>href</code>' attribute was set.
     */
    bool has_href() const {
      return Storage().isMember("href");
    }

    /**
     * Clears the '<code>href</code>' attribute.
     */
    void clear_href() {
      MutableStorage()->removeMember("href");
    }


    /**
     * Get the value of the '<code>href</code>' attribute.
     */
    const StringPiece get_href() const {
      const Json::Value& v = Storage("href");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>href</code>' attribute.
     *
     * Link to the list of goals for this view (profile).
     *
     * @param[in] value The new value.
     */
    void set_href(const StringPiece& value) {
      *MutableStorage("href") = value.data();
    }

    /**
     * Determine if the '<code>type</code>' attribute was set.
     *
     * @return true if the '<code>type</code>' attribute was set.
     */
    bool has_type() const {
      return Storage().isMember("type");
    }

    /**
     * Clears the '<code>type</code>' attribute.
     */
    void clear_type() {
      MutableStorage()->removeMember("type");
    }


    /**
     * Get the value of the '<code>type</code>' attribute.
     */
    const StringPiece get_type() const {
      const Json::Value& v = Storage("type");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>type</code>' attribute.
     *
     * Value is "analytics#goals".
     *
     * @param[in] value The new value.
     */
    void set_type(const StringPiece& value) {
      *MutableStorage("type") = value.data();
    }

   private:
    void operator=(const ProfileChildLink&);
  };  // ProfileChildLink
  /**
   * Parent link for this view (profile). Points to the web property to which
   * this view (profile) belongs.
   *
   * @ingroup DataObject
   */
  class ProfileParentLink : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static ProfileParentLink* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ProfileParentLink(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ProfileParentLink(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~ProfileParentLink();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::ProfileParentLink</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::ProfileParentLink";
    }

    /**
     * Determine if the '<code>href</code>' attribute was set.
     *
     * @return true if the '<code>href</code>' attribute was set.
     */
    bool has_href() const {
      return Storage().isMember("href");
    }

    /**
     * Clears the '<code>href</code>' attribute.
     */
    void clear_href() {
      MutableStorage()->removeMember("href");
    }


    /**
     * Get the value of the '<code>href</code>' attribute.
     */
    const StringPiece get_href() const {
      const Json::Value& v = Storage("href");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>href</code>' attribute.
     *
     * Link to the web property to which this view (profile) belongs.
     *
     * @param[in] value The new value.
     */
    void set_href(const StringPiece& value) {
      *MutableStorage("href") = value.data();
    }

    /**
     * Determine if the '<code>type</code>' attribute was set.
     *
     * @return true if the '<code>type</code>' attribute was set.
     */
    bool has_type() const {
      return Storage().isMember("type");
    }

    /**
     * Clears the '<code>type</code>' attribute.
     */
    void clear_type() {
      MutableStorage()->removeMember("type");
    }


    /**
     * Get the value of the '<code>type</code>' attribute.
     */
    const StringPiece get_type() const {
      const Json::Value& v = Storage("type");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>type</code>' attribute.
     *
     * Value is "analytics#webproperty".
     *
     * @param[in] value The new value.
     */
    void set_type(const StringPiece& value) {
      *MutableStorage("type") = value.data();
    }

   private:
    void operator=(const ProfileParentLink&);
  };  // ProfileParentLink
  /**
   * Permissions the user has for this view (profile).
   *
   * @ingroup DataObject
   */
  class ProfilePermissions : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static ProfilePermissions* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ProfilePermissions(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ProfilePermissions(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~ProfilePermissions();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::ProfilePermissions</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::ProfilePermissions";
    }

    /**
     * Determine if the '<code>effective</code>' attribute was set.
     *
     * @return true if the '<code>effective</code>' attribute was set.
     */
    bool has_effective() const {
      return Storage().isMember("effective");
    }

    /**
     * Clears the '<code>effective</code>' attribute.
     */
    void clear_effective() {
      MutableStorage()->removeMember("effective");
    }


    /**
     * Get a reference to the value of the '<code>effective</code>' attribute.
     */
    const client::JsonCppArray<string > get_effective() const {
       const Json::Value& storage = Storage("effective");
      return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>effective</code>'
     * property.
     *
     * All the permissions that the user has for this view (profile). These
     * include any implied permissions (e.g., EDIT implies VIEW) or inherited
     * permissions from the parent web property.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<string > mutable_effective() {
      Json::Value* storage = MutableStorage("effective");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
    }

   private:
    void operator=(const ProfilePermissions&);
  };  // ProfilePermissions
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Profile* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Profile(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Profile(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Profile();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::Profile</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::Profile";
  }

  /**
   * Determine if the '<code>accountId</code>' attribute was set.
   *
   * @return true if the '<code>accountId</code>' attribute was set.
   */
  bool has_account_id() const {
    return Storage().isMember("accountId");
  }

  /**
   * Clears the '<code>accountId</code>' attribute.
   */
  void clear_account_id() {
    MutableStorage()->removeMember("accountId");
  }


  /**
   * Get the value of the '<code>accountId</code>' attribute.
   */
  const StringPiece get_account_id() const {
    const Json::Value& v = Storage("accountId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>accountId</code>' attribute.
   *
   * Account ID to which this view (profile) belongs.
   *
   * @param[in] value The new value.
   */
  void set_account_id(const StringPiece& value) {
    *MutableStorage("accountId") = value.data();
  }

  /**
   * Determine if the '<code>botFilteringEnabled</code>' attribute was set.
   *
   * @return true if the '<code>botFilteringEnabled</code>' attribute was set.
   */
  bool has_bot_filtering_enabled() const {
    return Storage().isMember("botFilteringEnabled");
  }

  /**
   * Clears the '<code>botFilteringEnabled</code>' attribute.
   */
  void clear_bot_filtering_enabled() {
    MutableStorage()->removeMember("botFilteringEnabled");
  }


  /**
   * Get the value of the '<code>botFilteringEnabled</code>' attribute.
   */
  bool get_bot_filtering_enabled() const {
    const Json::Value& storage = Storage("botFilteringEnabled");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>botFilteringEnabled</code>' attribute.
   *
   * Indicates whether bot filtering is enabled for this view (profile).
   *
   * @param[in] value The new value.
   */
  void set_bot_filtering_enabled(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("botFilteringEnabled"));
  }

  /**
   * Determine if the '<code>childLink</code>' attribute was set.
   *
   * @return true if the '<code>childLink</code>' attribute was set.
   */
  bool has_child_link() const {
    return Storage().isMember("childLink");
  }

  /**
   * Clears the '<code>childLink</code>' attribute.
   */
  void clear_child_link() {
    MutableStorage()->removeMember("childLink");
  }


  /**
   * Get a reference to the value of the '<code>childLink</code>' attribute.
   */
  const ProfileChildLink get_child_link() const {
     const Json::Value& storage = Storage("childLink");
    return client::JsonValueToCppValueHelper<ProfileChildLink >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>childLink</code>'
   * property.
   *
   * Child link for this view (profile). Points to the list of goals for this
   * view (profile).
   *
   * @return The result can be modified to change the attribute value.
   */
  ProfileChildLink mutable_childLink() {
    Json::Value* storage = MutableStorage("childLink");
    return client::JsonValueToMutableCppValueHelper<ProfileChildLink >(storage);
  }

  /**
   * Determine if the '<code>created</code>' attribute was set.
   *
   * @return true if the '<code>created</code>' attribute was set.
   */
  bool has_created() const {
    return Storage().isMember("created");
  }

  /**
   * Clears the '<code>created</code>' attribute.
   */
  void clear_created() {
    MutableStorage()->removeMember("created");
  }


  /**
   * Get the value of the '<code>created</code>' attribute.
   */
  client::DateTime get_created() const {
    const Json::Value& storage = Storage("created");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>created</code>' attribute.
   *
   * Time this view (profile) was created.
   *
   * @param[in] value The new value.
   */
  void set_created(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("created"));
  }

  /**
   * Determine if the '<code>currency</code>' attribute was set.
   *
   * @return true if the '<code>currency</code>' attribute was set.
   */
  bool has_currency() const {
    return Storage().isMember("currency");
  }

  /**
   * Clears the '<code>currency</code>' attribute.
   */
  void clear_currency() {
    MutableStorage()->removeMember("currency");
  }


  /**
   * Get the value of the '<code>currency</code>' attribute.
   */
  const StringPiece get_currency() const {
    const Json::Value& v = Storage("currency");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>currency</code>' attribute.
   *
   * The currency type associated with this view (profile), defaults to USD. The
   * supported values are:
   * USD, JPY, EUR, GBP, AUD, KRW, BRL, CNY, DKK, RUB, SEK, NOK, PLN, TRY, TWD,
   * HKD, THB, IDR, ARS, MXN, VND, PHP, INR, CHF, CAD, CZK, NZD, HUF, BGN, LTL,
   * ZAR, UAH, AED, BOB, CLP, COP, EGP, HRK, ILS, MAD, MYR, PEN, PKR, RON, RSD,
   * SAR, SGD, VEF, LVL.
   *
   * @param[in] value The new value.
   */
  void set_currency(const StringPiece& value) {
    *MutableStorage("currency") = value.data();
  }

  /**
   * Determine if the '<code>defaultPage</code>' attribute was set.
   *
   * @return true if the '<code>defaultPage</code>' attribute was set.
   */
  bool has_default_page() const {
    return Storage().isMember("defaultPage");
  }

  /**
   * Clears the '<code>defaultPage</code>' attribute.
   */
  void clear_default_page() {
    MutableStorage()->removeMember("defaultPage");
  }


  /**
   * Get the value of the '<code>defaultPage</code>' attribute.
   */
  const StringPiece get_default_page() const {
    const Json::Value& v = Storage("defaultPage");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>defaultPage</code>' attribute.
   *
   * Default page for this view (profile).
   *
   * @param[in] value The new value.
   */
  void set_default_page(const StringPiece& value) {
    *MutableStorage("defaultPage") = value.data();
  }

  /**
   * Determine if the '<code>eCommerceTracking</code>' attribute was set.
   *
   * @return true if the '<code>eCommerceTracking</code>' attribute was set.
   */
  bool has_e_commerce_tracking() const {
    return Storage().isMember("eCommerceTracking");
  }

  /**
   * Clears the '<code>eCommerceTracking</code>' attribute.
   */
  void clear_e_commerce_tracking() {
    MutableStorage()->removeMember("eCommerceTracking");
  }


  /**
   * Get the value of the '<code>eCommerceTracking</code>' attribute.
   */
  bool get_e_commerce_tracking() const {
    const Json::Value& storage = Storage("eCommerceTracking");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>eCommerceTracking</code>' attribute.
   *
   * Indicates whether ecommerce tracking is enabled for this view (profile).
   *
   * @param[in] value The new value.
   */
  void set_e_commerce_tracking(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("eCommerceTracking"));
  }

  /**
   * Determine if the '<code>enhancedECommerceTracking</code>' attribute was
   * set.
   *
   * @return true if the '<code>enhancedECommerceTracking</code>' attribute was
   * set.
   */
  bool has_enhanced_ec_ommerce_tracking() const {
    return Storage().isMember("enhancedECommerceTracking");
  }

  /**
   * Clears the '<code>enhancedECommerceTracking</code>' attribute.
   */
  void clear_enhanced_ec_ommerce_tracking() {
    MutableStorage()->removeMember("enhancedECommerceTracking");
  }


  /**
   * Get the value of the '<code>enhancedECommerceTracking</code>' attribute.
   */
  bool get_enhanced_ec_ommerce_tracking() const {
    const Json::Value& storage = Storage("enhancedECommerceTracking");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>enhancedECommerceTracking</code>' attribute.
   *
   * Indicates whether enhanced ecommerce tracking is enabled for this view
   * (profile). This property can only be enabled if ecommerce tracking is
   * enabled.
   *
   * @param[in] value The new value.
   */
  void set_enhanced_ec_ommerce_tracking(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("enhancedECommerceTracking"));
  }

  /**
   * Determine if the '<code>excludeQueryParameters</code>' attribute was set.
   *
   * @return true if the '<code>excludeQueryParameters</code>' attribute was
   * set.
   */
  bool has_exclude_query_parameters() const {
    return Storage().isMember("excludeQueryParameters");
  }

  /**
   * Clears the '<code>excludeQueryParameters</code>' attribute.
   */
  void clear_exclude_query_parameters() {
    MutableStorage()->removeMember("excludeQueryParameters");
  }


  /**
   * Get the value of the '<code>excludeQueryParameters</code>' attribute.
   */
  const StringPiece get_exclude_query_parameters() const {
    const Json::Value& v = Storage("excludeQueryParameters");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>excludeQueryParameters</code>' attribute.
   *
   * The query parameters that are excluded from this view (profile).
   *
   * @param[in] value The new value.
   */
  void set_exclude_query_parameters(const StringPiece& value) {
    *MutableStorage("excludeQueryParameters") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * View (Profile) ID.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>internalWebPropertyId</code>' attribute was set.
   *
   * @return true if the '<code>internalWebPropertyId</code>' attribute was set.
   */
  bool has_internal_web_property_id() const {
    return Storage().isMember("internalWebPropertyId");
  }

  /**
   * Clears the '<code>internalWebPropertyId</code>' attribute.
   */
  void clear_internal_web_property_id() {
    MutableStorage()->removeMember("internalWebPropertyId");
  }


  /**
   * Get the value of the '<code>internalWebPropertyId</code>' attribute.
   */
  const StringPiece get_internal_web_property_id() const {
    const Json::Value& v = Storage("internalWebPropertyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>internalWebPropertyId</code>' attribute.
   *
   * Internal ID for the web property to which this view (profile) belongs.
   *
   * @param[in] value The new value.
   */
  void set_internal_web_property_id(const StringPiece& value) {
    *MutableStorage("internalWebPropertyId") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Resource type for Analytics view (profile).
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Name of this view (profile).
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>parentLink</code>' attribute was set.
   *
   * @return true if the '<code>parentLink</code>' attribute was set.
   */
  bool has_parent_link() const {
    return Storage().isMember("parentLink");
  }

  /**
   * Clears the '<code>parentLink</code>' attribute.
   */
  void clear_parent_link() {
    MutableStorage()->removeMember("parentLink");
  }


  /**
   * Get a reference to the value of the '<code>parentLink</code>' attribute.
   */
  const ProfileParentLink get_parent_link() const {
     const Json::Value& storage = Storage("parentLink");
    return client::JsonValueToCppValueHelper<ProfileParentLink >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>parentLink</code>'
   * property.
   *
   * Parent link for this view (profile). Points to the web property to which
   * this view (profile) belongs.
   *
   * @return The result can be modified to change the attribute value.
   */
  ProfileParentLink mutable_parentLink() {
    Json::Value* storage = MutableStorage("parentLink");
    return client::JsonValueToMutableCppValueHelper<ProfileParentLink >(storage);
  }

  /**
   * Determine if the '<code>permissions</code>' attribute was set.
   *
   * @return true if the '<code>permissions</code>' attribute was set.
   */
  bool has_permissions() const {
    return Storage().isMember("permissions");
  }

  /**
   * Clears the '<code>permissions</code>' attribute.
   */
  void clear_permissions() {
    MutableStorage()->removeMember("permissions");
  }


  /**
   * Get a reference to the value of the '<code>permissions</code>' attribute.
   */
  const ProfilePermissions get_permissions() const {
     const Json::Value& storage = Storage("permissions");
    return client::JsonValueToCppValueHelper<ProfilePermissions >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>permissions</code>'
   * property.
   *
   * Permissions the user has for this view (profile).
   *
   * @return The result can be modified to change the attribute value.
   */
  ProfilePermissions mutable_permissions() {
    Json::Value* storage = MutableStorage("permissions");
    return client::JsonValueToMutableCppValueHelper<ProfilePermissions >(storage);
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * Link for this view (profile).
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>siteSearchCategoryParameters</code>' attribute was
   * set.
   *
   * @return true if the '<code>siteSearchCategoryParameters</code>' attribute
   * was set.
   */
  bool has_site_search_category_parameters() const {
    return Storage().isMember("siteSearchCategoryParameters");
  }

  /**
   * Clears the '<code>siteSearchCategoryParameters</code>' attribute.
   */
  void clear_site_search_category_parameters() {
    MutableStorage()->removeMember("siteSearchCategoryParameters");
  }


  /**
   * Get the value of the '<code>siteSearchCategoryParameters</code>' attribute.
   */
  const StringPiece get_site_search_category_parameters() const {
    const Json::Value& v = Storage("siteSearchCategoryParameters");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>siteSearchCategoryParameters</code>' attribute.
   *
   * Site search category parameters for this view (profile).
   *
   * @param[in] value The new value.
   */
  void set_site_search_category_parameters(const StringPiece& value) {
    *MutableStorage("siteSearchCategoryParameters") = value.data();
  }

  /**
   * Determine if the '<code>siteSearchQueryParameters</code>' attribute was
   * set.
   *
   * @return true if the '<code>siteSearchQueryParameters</code>' attribute was
   * set.
   */
  bool has_site_search_query_parameters() const {
    return Storage().isMember("siteSearchQueryParameters");
  }

  /**
   * Clears the '<code>siteSearchQueryParameters</code>' attribute.
   */
  void clear_site_search_query_parameters() {
    MutableStorage()->removeMember("siteSearchQueryParameters");
  }


  /**
   * Get the value of the '<code>siteSearchQueryParameters</code>' attribute.
   */
  const StringPiece get_site_search_query_parameters() const {
    const Json::Value& v = Storage("siteSearchQueryParameters");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>siteSearchQueryParameters</code>' attribute.
   *
   * The site search query parameters for this view (profile).
   *
   * @param[in] value The new value.
   */
  void set_site_search_query_parameters(const StringPiece& value) {
    *MutableStorage("siteSearchQueryParameters") = value.data();
  }

  /**
   * Determine if the '<code>starred</code>' attribute was set.
   *
   * @return true if the '<code>starred</code>' attribute was set.
   */
  bool has_starred() const {
    return Storage().isMember("starred");
  }

  /**
   * Clears the '<code>starred</code>' attribute.
   */
  void clear_starred() {
    MutableStorage()->removeMember("starred");
  }


  /**
   * Get the value of the '<code>starred</code>' attribute.
   */
  bool get_starred() const {
    const Json::Value& storage = Storage("starred");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>starred</code>' attribute.
   *
   * Indicates whether this view (profile) is starred or not.
   *
   * @param[in] value The new value.
   */
  void set_starred(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("starred"));
  }

  /**
   * Determine if the '<code>stripSiteSearchCategoryParameters</code>' attribute
   * was set.
   *
   * @return true if the '<code>stripSiteSearchCategoryParameters</code>'
   * attribute was set.
   */
  bool has_strip_site_search_category_parameters() const {
    return Storage().isMember("stripSiteSearchCategoryParameters");
  }

  /**
   * Clears the '<code>stripSiteSearchCategoryParameters</code>' attribute.
   */
  void clear_strip_site_search_category_parameters() {
    MutableStorage()->removeMember("stripSiteSearchCategoryParameters");
  }


  /**
   * Get the value of the '<code>stripSiteSearchCategoryParameters</code>'
   * attribute.
   */
  bool get_strip_site_search_category_parameters() const {
    const Json::Value& storage = Storage("stripSiteSearchCategoryParameters");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>stripSiteSearchCategoryParameters</code>' attribute.
   *
   * Whether or not Analytics will strip search category parameters from the
   * URLs in your reports.
   *
   * @param[in] value The new value.
   */
  void set_strip_site_search_category_parameters(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("stripSiteSearchCategoryParameters"));
  }

  /**
   * Determine if the '<code>stripSiteSearchQueryParameters</code>' attribute
   * was set.
   *
   * @return true if the '<code>stripSiteSearchQueryParameters</code>' attribute
   * was set.
   */
  bool has_strip_site_search_query_parameters() const {
    return Storage().isMember("stripSiteSearchQueryParameters");
  }

  /**
   * Clears the '<code>stripSiteSearchQueryParameters</code>' attribute.
   */
  void clear_strip_site_search_query_parameters() {
    MutableStorage()->removeMember("stripSiteSearchQueryParameters");
  }


  /**
   * Get the value of the '<code>stripSiteSearchQueryParameters</code>'
   * attribute.
   */
  bool get_strip_site_search_query_parameters() const {
    const Json::Value& storage = Storage("stripSiteSearchQueryParameters");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>stripSiteSearchQueryParameters</code>' attribute.
   *
   * Whether or not Analytics will strip search query parameters from the URLs
   * in your reports.
   *
   * @param[in] value The new value.
   */
  void set_strip_site_search_query_parameters(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("stripSiteSearchQueryParameters"));
  }

  /**
   * Determine if the '<code>timezone</code>' attribute was set.
   *
   * @return true if the '<code>timezone</code>' attribute was set.
   */
  bool has_timezone() const {
    return Storage().isMember("timezone");
  }

  /**
   * Clears the '<code>timezone</code>' attribute.
   */
  void clear_timezone() {
    MutableStorage()->removeMember("timezone");
  }


  /**
   * Get the value of the '<code>timezone</code>' attribute.
   */
  const StringPiece get_timezone() const {
    const Json::Value& v = Storage("timezone");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>timezone</code>' attribute.
   *
   * Time zone for which this view (profile) has been configured. Time zones are
   * identified by strings from the TZ database.
   *
   * @param[in] value The new value.
   */
  void set_timezone(const StringPiece& value) {
    *MutableStorage("timezone") = value.data();
  }

  /**
   * Determine if the '<code>type</code>' attribute was set.
   *
   * @return true if the '<code>type</code>' attribute was set.
   */
  bool has_type() const {
    return Storage().isMember("type");
  }

  /**
   * Clears the '<code>type</code>' attribute.
   */
  void clear_type() {
    MutableStorage()->removeMember("type");
  }


  /**
   * Get the value of the '<code>type</code>' attribute.
   */
  const StringPiece get_type() const {
    const Json::Value& v = Storage("type");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>type</code>' attribute.
   *
   * View (Profile) type. Supported types: WEB or APP.
   *
   * @param[in] value The new value.
   */
  void set_type(const StringPiece& value) {
    *MutableStorage("type") = value.data();
  }

  /**
   * Determine if the '<code>updated</code>' attribute was set.
   *
   * @return true if the '<code>updated</code>' attribute was set.
   */
  bool has_updated() const {
    return Storage().isMember("updated");
  }

  /**
   * Clears the '<code>updated</code>' attribute.
   */
  void clear_updated() {
    MutableStorage()->removeMember("updated");
  }


  /**
   * Get the value of the '<code>updated</code>' attribute.
   */
  client::DateTime get_updated() const {
    const Json::Value& storage = Storage("updated");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>updated</code>' attribute.
   *
   * Time this view (profile) was last modified.
   *
   * @param[in] value The new value.
   */
  void set_updated(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("updated"));
  }

  /**
   * Determine if the '<code>webPropertyId</code>' attribute was set.
   *
   * @return true if the '<code>webPropertyId</code>' attribute was set.
   */
  bool has_web_property_id() const {
    return Storage().isMember("webPropertyId");
  }

  /**
   * Clears the '<code>webPropertyId</code>' attribute.
   */
  void clear_web_property_id() {
    MutableStorage()->removeMember("webPropertyId");
  }


  /**
   * Get the value of the '<code>webPropertyId</code>' attribute.
   */
  const StringPiece get_web_property_id() const {
    const Json::Value& v = Storage("webPropertyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>webPropertyId</code>' attribute.
   *
   * Web property ID of the form UA-XXXXX-YY to which this view (profile)
   * belongs.
   *
   * @param[in] value The new value.
   */
  void set_web_property_id(const StringPiece& value) {
    *MutableStorage("webPropertyId") = value.data();
  }

  /**
   * Determine if the '<code>websiteUrl</code>' attribute was set.
   *
   * @return true if the '<code>websiteUrl</code>' attribute was set.
   */
  bool has_website_url() const {
    return Storage().isMember("websiteUrl");
  }

  /**
   * Clears the '<code>websiteUrl</code>' attribute.
   */
  void clear_website_url() {
    MutableStorage()->removeMember("websiteUrl");
  }


  /**
   * Get the value of the '<code>websiteUrl</code>' attribute.
   */
  const StringPiece get_website_url() const {
    const Json::Value& v = Storage("websiteUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>websiteUrl</code>' attribute.
   *
   * Website URL for this view (profile).
   *
   * @param[in] value The new value.
   */
  void set_website_url(const StringPiece& value) {
    *MutableStorage("websiteUrl") = value.data();
  }

 private:
  void operator=(const Profile&);
};  // Profile
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_PROFILE_H_
