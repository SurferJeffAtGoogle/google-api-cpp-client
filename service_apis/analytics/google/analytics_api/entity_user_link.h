// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_ENTITY_USER_LINK_H_
#define  GOOGLE_ANALYTICS_API_ENTITY_USER_LINK_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/analytics_api/account_ref.h"
#include "google/analytics_api/profile_ref.h"
#include "google/analytics_api/user_ref.h"
#include "google/analytics_api/web_property_ref.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * JSON template for an Analytics Entity-User Link. Returns permissions that a
 * user has for an entity.
 *
 * @ingroup DataObject
 */
class EntityUserLink : public client::JsonCppData {
 public:
  /**
   * Entity for this link. It can be an account, a web property, or a view
   * (profile).
   *
   * @ingroup DataObject
   */
  class EntityUserLinkEntity : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static EntityUserLinkEntity* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit EntityUserLinkEntity(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit EntityUserLinkEntity(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~EntityUserLinkEntity();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::EntityUserLinkEntity</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::EntityUserLinkEntity";
    }

    /**
     * Determine if the '<code>accountRef</code>' attribute was set.
     *
     * @return true if the '<code>accountRef</code>' attribute was set.
     */
    bool has_account_ref() const {
      return Storage().isMember("accountRef");
    }

    /**
     * Clears the '<code>accountRef</code>' attribute.
     */
    void clear_account_ref() {
      MutableStorage()->removeMember("accountRef");
    }


    /**
     * Get a reference to the value of the '<code>accountRef</code>' attribute.
     */
    const AccountRef get_account_ref() const;

    /**
     * Gets a reference to a mutable value of the '<code>accountRef</code>'
     * property.
     *
     * Account for this link.
     *
     * @return The result can be modified to change the attribute value.
     */
    AccountRef mutable_accountRef();

    /**
     * Determine if the '<code>profileRef</code>' attribute was set.
     *
     * @return true if the '<code>profileRef</code>' attribute was set.
     */
    bool has_profile_ref() const {
      return Storage().isMember("profileRef");
    }

    /**
     * Clears the '<code>profileRef</code>' attribute.
     */
    void clear_profile_ref() {
      MutableStorage()->removeMember("profileRef");
    }


    /**
     * Get a reference to the value of the '<code>profileRef</code>' attribute.
     */
    const ProfileRef get_profile_ref() const;

    /**
     * Gets a reference to a mutable value of the '<code>profileRef</code>'
     * property.
     *
     * View (Profile) for this link.
     *
     * @return The result can be modified to change the attribute value.
     */
    ProfileRef mutable_profileRef();

    /**
     * Determine if the '<code>webPropertyRef</code>' attribute was set.
     *
     * @return true if the '<code>webPropertyRef</code>' attribute was set.
     */
    bool has_web_property_ref() const {
      return Storage().isMember("webPropertyRef");
    }

    /**
     * Clears the '<code>webPropertyRef</code>' attribute.
     */
    void clear_web_property_ref() {
      MutableStorage()->removeMember("webPropertyRef");
    }


    /**
     * Get a reference to the value of the '<code>webPropertyRef</code>'
     * attribute.
     */
    const WebPropertyRef get_web_property_ref() const;

    /**
     * Gets a reference to a mutable value of the '<code>webPropertyRef</code>'
     * property.
     *
     * Web property for this link.
     *
     * @return The result can be modified to change the attribute value.
     */
    WebPropertyRef mutable_webPropertyRef();

   private:
    void operator=(const EntityUserLinkEntity&);
  };  // EntityUserLinkEntity
  /**
   * Permissions the user has for this entity.
   *
   * @ingroup DataObject
   */
  class EntityUserLinkPermissions : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static EntityUserLinkPermissions* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit EntityUserLinkPermissions(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit EntityUserLinkPermissions(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~EntityUserLinkPermissions();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::EntityUserLinkPermissions</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::EntityUserLinkPermissions";
    }

    /**
     * Determine if the '<code>effective</code>' attribute was set.
     *
     * @return true if the '<code>effective</code>' attribute was set.
     */
    bool has_effective() const {
      return Storage().isMember("effective");
    }

    /**
     * Clears the '<code>effective</code>' attribute.
     */
    void clear_effective() {
      MutableStorage()->removeMember("effective");
    }


    /**
     * Get a reference to the value of the '<code>effective</code>' attribute.
     */
    const client::JsonCppArray<string > get_effective() const {
       const Json::Value& storage = Storage("effective");
      return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>effective</code>'
     * property.
     *
     * Effective permissions represent all the permissions that a user has for
     * this entity. These include any implied permissions (e.g., EDIT implies
     * VIEW) or inherited permissions from the parent entity. Effective
     * permissions are read-only.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<string > mutable_effective() {
      Json::Value* storage = MutableStorage("effective");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
    }

    /**
     * Determine if the '<code>local</code>' attribute was set.
     *
     * @return true if the '<code>local</code>' attribute was set.
     */
    bool has_local() const {
      return Storage().isMember("local");
    }

    /**
     * Clears the '<code>local</code>' attribute.
     */
    void clear_local() {
      MutableStorage()->removeMember("local");
    }


    /**
     * Get a reference to the value of the '<code>local</code>' attribute.
     */
    const client::JsonCppArray<string > get_local() const {
       const Json::Value& storage = Storage("local");
      return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>local</code>' property.
     *
     * Permissions that a user has been assigned at this very level. Does not
     * include any implied or inherited permissions. Local permissions are
     * modifiable.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<string > mutable_local() {
      Json::Value* storage = MutableStorage("local");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
    }

   private:
    void operator=(const EntityUserLinkPermissions&);
  };  // EntityUserLinkPermissions
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static EntityUserLink* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit EntityUserLink(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit EntityUserLink(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~EntityUserLink();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::EntityUserLink</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::EntityUserLink";
  }

  /**
   * Determine if the '<code>entity</code>' attribute was set.
   *
   * @return true if the '<code>entity</code>' attribute was set.
   */
  bool has_entity() const {
    return Storage().isMember("entity");
  }

  /**
   * Clears the '<code>entity</code>' attribute.
   */
  void clear_entity() {
    MutableStorage()->removeMember("entity");
  }


  /**
   * Get a reference to the value of the '<code>entity</code>' attribute.
   */
  const EntityUserLinkEntity get_entity() const {
     const Json::Value& storage = Storage("entity");
    return client::JsonValueToCppValueHelper<EntityUserLinkEntity >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>entity</code>' property.
   *
   * Entity for this link. It can be an account, a web property, or a view
   * (profile).
   *
   * @return The result can be modified to change the attribute value.
   */
  EntityUserLinkEntity mutable_entity() {
    Json::Value* storage = MutableStorage("entity");
    return client::JsonValueToMutableCppValueHelper<EntityUserLinkEntity >(storage);
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * Entity user link ID.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Resource type for entity user link.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>permissions</code>' attribute was set.
   *
   * @return true if the '<code>permissions</code>' attribute was set.
   */
  bool has_permissions() const {
    return Storage().isMember("permissions");
  }

  /**
   * Clears the '<code>permissions</code>' attribute.
   */
  void clear_permissions() {
    MutableStorage()->removeMember("permissions");
  }


  /**
   * Get a reference to the value of the '<code>permissions</code>' attribute.
   */
  const EntityUserLinkPermissions get_permissions() const {
     const Json::Value& storage = Storage("permissions");
    return client::JsonValueToCppValueHelper<EntityUserLinkPermissions >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>permissions</code>'
   * property.
   *
   * Permissions the user has for this entity.
   *
   * @return The result can be modified to change the attribute value.
   */
  EntityUserLinkPermissions mutable_permissions() {
    Json::Value* storage = MutableStorage("permissions");
    return client::JsonValueToMutableCppValueHelper<EntityUserLinkPermissions >(storage);
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * Self link for this resource.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>userRef</code>' attribute was set.
   *
   * @return true if the '<code>userRef</code>' attribute was set.
   */
  bool has_user_ref() const {
    return Storage().isMember("userRef");
  }

  /**
   * Clears the '<code>userRef</code>' attribute.
   */
  void clear_user_ref() {
    MutableStorage()->removeMember("userRef");
  }


  /**
   * Get a reference to the value of the '<code>userRef</code>' attribute.
   */
  const UserRef get_user_ref() const;

  /**
   * Gets a reference to a mutable value of the '<code>userRef</code>' property.
   *
   * User reference.
   *
   * @return The result can be modified to change the attribute value.
   */
  UserRef mutable_userRef();

 private:
  void operator=(const EntityUserLink&);
};  // EntityUserLink
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_ENTITY_USER_LINK_H_
