// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.1
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#ifndef  GOOGLE_ANALYTICS_API_ANALYTICS_SERVICE_H_
#define  GOOGLE_ANALYTICS_API_ANALYTICS_SERVICE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/media_uploader.h"
#include "googleapis/client/util/status.h"
#include "googleapis/client/util/uri_template.h"

#include "google/analytics_api/account_summaries.h"
#include "google/analytics_api/account_ticket.h"
#include "google/analytics_api/accounts.h"
#include "google/analytics_api/analytics_dataimport_delete_upload_data_request.h"
#include "google/analytics_api/columns.h"
#include "google/analytics_api/custom_data_sources.h"
#include "google/analytics_api/custom_dimension.h"
#include "google/analytics_api/custom_dimensions.h"
#include "google/analytics_api/custom_metric.h"
#include "google/analytics_api/custom_metrics.h"
#include "google/analytics_api/entity_ad_words_link.h"
#include "google/analytics_api/entity_ad_words_links.h"
#include "google/analytics_api/entity_user_link.h"
#include "google/analytics_api/entity_user_links.h"
#include "google/analytics_api/experiment.h"
#include "google/analytics_api/experiments.h"
#include "google/analytics_api/filter.h"
#include "google/analytics_api/filters.h"
#include "google/analytics_api/ga_data.h"
#include "google/analytics_api/goal.h"
#include "google/analytics_api/goals.h"
#include "google/analytics_api/mcf_data.h"
#include "google/analytics_api/profile.h"
#include "google/analytics_api/profile_filter_link.h"
#include "google/analytics_api/profile_filter_links.h"
#include "google/analytics_api/profiles.h"
#include "google/analytics_api/realtime_data.h"
#include "google/analytics_api/remarketing_audience.h"
#include "google/analytics_api/remarketing_audiences.h"
#include "google/analytics_api/segments.h"
#include "google/analytics_api/unsampled_report.h"
#include "google/analytics_api/unsampled_reports.h"
#include "google/analytics_api/upload.h"
#include "google/analytics_api/uploads.h"
#include "google/analytics_api/webproperties.h"
#include "google/analytics_api/webproperty.h"


namespace google_analytics_api {
using namespace googleapis;
/**
 * \mainpage
 *   Google Analytics API Version v3
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://developers.google.com/analytics/'>Google Analytics API</a>
 *      <tr><th>API Version<td>v3
 *      <tr><th>API Rev<td>20170807
 *      <tr><th>API Docs
 *          <td><a href='https://developers.google.com/analytics/'>
 *              https://developers.google.com/analytics/</a>
 *      <tr><th>Discovery Name<td>analytics
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Google Analytics API can be found at
 * <a href='https://developers.google.com/analytics/'>https://developers.google.com/analytics/</a>.
 *
 * For more information about the Google APIs Client Library for C++, see
 * <a href='https://developers.google.com/api-client-library/cpp/start/get_started'>
 * https://developers.google.com/api-client-library/cpp/start/get_started</a>
 */
class AnalyticsService;

/**
 * Implements a common base method for all methods within the AnalyticsService.
 *
 * This class defines all the attributes common across all methods.
 * It does not pertain to any specific service API so is not normally
 * explicitly instantiated.
 */
class AnalyticsServiceBaseRequest
      : public client::ClientServiceRequest {
 public:
  /**
   * Standard constructor.
   *
   * @param[in] service  The service instance to send to when executed.
   *        In practice this will be supplied internally by the service
   *        when it acts as a method factory.
   *
   * @param[in] credential  If not NULL then the credential to authorize with.
   *        In practice this is supplied by the user code that is creating
   *        the method instance.
   *
   * @param[in] method  The HTTP method to use for the underlying HTTP request.
   *        In practice this is specified by the particular API endpoint and
   *        supplied internally by the derived class for that endpoint.
   *
   * @param[in] uri_template  The <a href='http://tools.ietf.org/html/rfc6570'>
   *        RFC 6570 URI Template</a> specifying the url to invoke
   *        The parameters in the template should be resolvable attributes.
   *        In practice this parameter is supplied internally by the derived
   *        class for the endpoint.
   */
  AnalyticsServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const string& uri_template);

  /**
   * Standard destructor.
   */
  virtual ~AnalyticsServiceBaseRequest();


  /**
   * Clears the '<code>alt</code>' attribute so it is no longer set.
   */
  void clear_alt() {
    _have_alt_ = false;
    client::ClearCppValueHelper(&alt_);
  }


  /**
   * Gets the optional '<code>alt</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_alt() const { return alt_; }

  /**
   * Gets a modifiable pointer to the optional <code>alt</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_alt() {
    _have_alt_ = true;
    return &alt_;
  }


  /**
   * Sets the '<code>alt</code>' attribute.
   *
   * @param[in] value Data format for the response.
   */
  void set_alt(const string& value) {
    _have_alt_ = true;
    alt_ = value;
  }



  /**
   * Clears the '<code>fields</code>' attribute so it is no longer set.
   */
  void clear_fields() {
    _have_fields_ = false;
    client::ClearCppValueHelper(&fields_);
  }


  /**
   * Gets the optional '<code>fields</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_fields() const { return fields_; }

  /**
   * Gets a modifiable pointer to the optional <code>fields</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_fields() {
    _have_fields_ = true;
    return &fields_;
  }


  /**
   * Sets the '<code>fields</code>' attribute.
   *
   * @param[in] value Selector specifying which fields to include in a partial
   * response.
   */
  void set_fields(const string& value) {
    _have_fields_ = true;
    fields_ = value;
  }



  /**
   * Clears the '<code>key</code>' attribute so it is no longer set.
   */
  void clear_key() {
    _have_key_ = false;
    client::ClearCppValueHelper(&key_);
  }


  /**
   * Gets the optional '<code>key</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_key() const { return key_; }

  /**
   * Gets a modifiable pointer to the optional <code>key</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_key() {
    _have_key_ = true;
    return &key_;
  }


  /**
   * Sets the '<code>key</code>' attribute.
   *
   * @param[in] value API key. Your API key identifies your project and provides
   * you with API access, quota, and reports. Required unless you provide an
   * OAuth 2.0 token.
   */
  void set_key(const string& value) {
    _have_key_ = true;
    key_ = value;
  }



  /**
   * Clears the '<code>oauth_token</code>' attribute so it is no longer set.
   */
  void clear_oauth_token() {
    _have_oauth_token_ = false;
    client::ClearCppValueHelper(&oauth_token_);
  }


  /**
   * Gets the optional '<code>oauth_token</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_oauth_token() const { return oauth_token_; }

  /**
   * Gets a modifiable pointer to the optional <code>oauth_token</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_oauthToken() {
    _have_oauth_token_ = true;
    return &oauth_token_;
  }


  /**
   * Sets the '<code>oauth_token</code>' attribute.
   *
   * @param[in] value OAuth 2.0 token for the current user.
   */
  void set_oauth_token(const string& value) {
    _have_oauth_token_ = true;
    oauth_token_ = value;
  }



  /**
   * Clears the '<code>prettyPrint</code>' attribute so it is no longer set.
   */
  void clear_pretty_print() {
    _have_pretty_print_ = false;
    client::ClearCppValueHelper(&pretty_print_);
  }


  /**
   * Gets the optional '<code>prettyPrint</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  bool get_pretty_print() const { return pretty_print_; }

  /**
   * Sets the '<code>prettyPrint</code>' attribute.
   *
   * @param[in] value Returns response with indentations and line breaks.
   */
  void set_pretty_print(bool value) {
    _have_pretty_print_ = true;
    pretty_print_ = value;
  }

  /**
   * Clears the '<code>quotaUser</code>' attribute so it is no longer set.
   */
  void clear_quota_user() {
    _have_quota_user_ = false;
    client::ClearCppValueHelper(&quota_user_);
  }


  /**
   * Gets the optional '<code>quotaUser</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_quota_user() const { return quota_user_; }

  /**
   * Gets a modifiable pointer to the optional <code>quotaUser</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_quotaUser() {
    _have_quota_user_ = true;
    return &quota_user_;
  }


  /**
   * Sets the '<code>quotaUser</code>' attribute.
   *
   * @param[in] value Available to use for quota purposes for server-side
   * applications. Can be any arbitrary string assigned to a user, but should
   * not exceed 40 characters. Overrides userIp if both are provided.
   */
  void set_quota_user(const string& value) {
    _have_quota_user_ = true;
    quota_user_ = value;
  }



  /**
   * Clears the '<code>userIp</code>' attribute so it is no longer set.
   */
  void clear_user_ip() {
    _have_user_ip_ = false;
    client::ClearCppValueHelper(&user_ip_);
  }


  /**
   * Gets the optional '<code>userIp</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_user_ip() const { return user_ip_; }

  /**
   * Gets a modifiable pointer to the optional <code>userIp</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_userIp() {
    _have_user_ip_ = true;
    return &user_ip_;
  }


  /**
   * Sets the '<code>userIp</code>' attribute.
   *
   * @param[in] value IP address of the site where the request originates. Use
   * this if you want to enforce per-user limits.
   */
  void set_user_ip(const string& value) {
    _have_user_ip_ = true;
    user_ip_ = value;
  }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the
   * URI supplied to the constructor.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
      const string& variable_name,
      const client::UriTemplateConfig& config,
      string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 protected:
  /**
   * Prepares the method's HTTP request to send body content as JSON.
   *
   * Only to be used for method constructors.
   */
  void AddJsonContentToRequest(const client::JsonCppData *content);

 private:
  string alt_;
  string fields_;
  string key_;
  string oauth_token_;
  bool pretty_print_;
  string quota_user_;
  string user_ip_;
  bool _have_alt_ : 1;
  bool _have_fields_ : 1;
  bool _have_key_ : 1;
  bool _have_oauth_token_ : 1;
  bool _have_pretty_print_ : 1;
  bool _have_quota_user_ : 1;
  bool _have_user_ip_ : 1;

  DISALLOW_COPY_AND_ASSIGN(AnalyticsServiceBaseRequest);
};






/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.readonly
 */
class DataResource_GaResource_GetMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] ids Unique table ID for retrieving Analytics data. Table ID is
   * of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.
   * @param[in] start_date Start date for fetching Analytics data. Requests can
   * specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g.,
   * today, yesterday, or 7daysAgo). The default value is 7daysAgo.
   * @param[in] end_date End date for fetching Analytics data. Request can
   * should specify an end date formatted as YYYY-MM-DD, or as a relative date
   * (e.g., today, yesterday, or 7daysAgo). The default value is yesterday.
   * @param[in] metrics A comma-separated list of Analytics metrics. E.g.,
   * 'ga:sessions,ga:pageviews'. At least one metric must be specified.
   */
  DataResource_GaResource_GetMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& ids,
      const StringPiece& start_date,
      const StringPiece& end_date,
      const StringPiece& metrics);

  /**
   * Standard destructor.
   */
  virtual ~DataResource_GaResource_GetMethod();


    /**
     * Clears the '<code>dimensions</code>' attribute so it is no longer set.
     */
    void clear_dimensions() {
      _have_dimensions_ = false;
      client::ClearCppValueHelper(&dimensions_);
    }


    /**
     * Gets the optional '<code>dimensions</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_dimensions() const { return dimensions_; }

    /**
     * Gets a modifiable pointer to the optional <code>dimensions</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_dimensions() {
      _have_dimensions_ = true;
      return &dimensions_;
    }


    /**
     * Sets the '<code>dimensions</code>' attribute.
     *
     * @param[in] value A comma-separated list of Analytics dimensions. E.g.,
     * 'ga:browser,ga:city'.
     */
    void set_dimensions(const string& value) {
      _have_dimensions_ = true;
      dimensions_ = value;
    }



    /**
     * Clears the '<code>filters</code>' attribute so it is no longer set.
     */
    void clear_filters() {
      _have_filters_ = false;
      client::ClearCppValueHelper(&filters_);
    }


    /**
     * Gets the optional '<code>filters</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filters() const { return filters_; }

    /**
     * Gets a modifiable pointer to the optional <code>filters</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filters() {
      _have_filters_ = true;
      return &filters_;
    }


    /**
     * Sets the '<code>filters</code>' attribute.
     *
     * @param[in] value A comma-separated list of dimension or metric filters to
     * be applied to Analytics data.
     */
    void set_filters(const string& value) {
      _have_filters_ = true;
      filters_ = value;
    }



    /**
     * Clears the '<code>include-empty-rows</code>' attribute so it is no longer
     * set.
     */
    void clear_include_empty_rows() {
      _have_include_empty_rows_ = false;
      client::ClearCppValueHelper(&include_empty_rows_);
    }


    /**
     * Gets the optional '<code>include-empty-rows</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_empty_rows() const { return include_empty_rows_; }

    /**
     * Sets the '<code>include-empty-rows</code>' attribute.
     *
     * @param[in] value The response will include empty rows if this parameter
     * is set to true, the default is true.
     */
    void set_include_empty_rows(bool value) {
      _have_include_empty_rows_ = true;
      include_empty_rows_ = value;
    }

    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of entries to include in this feed.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>output</code>' attribute so it is no longer set.
     */
    void clear_output() {
      _have_output_ = false;
      client::ClearCppValueHelper(&output_);
    }


    /**
     * Gets the optional '<code>output</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_output() const { return output_; }

    /**
     * Gets a modifiable pointer to the optional <code>output</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_output() {
      _have_output_ = true;
      return &output_;
    }


    /**
     * Sets the '<code>output</code>' attribute.
     *
     * @param[in] value The selected format for the response. Default format is
     * JSON.
     */
    void set_output(const string& value) {
      _have_output_ = true;
      output_ = value;
    }



    /**
     * Clears the '<code>samplingLevel</code>' attribute so it is no longer set.
     */
    void clear_sampling_level() {
      _have_sampling_level_ = false;
      client::ClearCppValueHelper(&sampling_level_);
    }


    /**
     * Gets the optional '<code>samplingLevel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_sampling_level() const { return sampling_level_; }

    /**
     * Gets a modifiable pointer to the optional <code>samplingLevel</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_samplingLevel() {
      _have_sampling_level_ = true;
      return &sampling_level_;
    }


    /**
     * Sets the '<code>samplingLevel</code>' attribute.
     *
     * @param[in] value The desired sampling level.
     */
    void set_sampling_level(const string& value) {
      _have_sampling_level_ = true;
      sampling_level_ = value;
    }



    /**
     * Clears the '<code>segment</code>' attribute so it is no longer set.
     */
    void clear_segment() {
      _have_segment_ = false;
      client::ClearCppValueHelper(&segment_);
    }


    /**
     * Gets the optional '<code>segment</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_segment() const { return segment_; }

    /**
     * Gets a modifiable pointer to the optional <code>segment</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_segment() {
      _have_segment_ = true;
      return &segment_;
    }


    /**
     * Sets the '<code>segment</code>' attribute.
     *
     * @param[in] value An Analytics segment to be applied to data.
     */
    void set_segment(const string& value) {
      _have_segment_ = true;
      segment_ = value;
    }



    /**
     * Clears the '<code>sort</code>' attribute so it is no longer set.
     */
    void clear_sort() {
      _have_sort_ = false;
      client::ClearCppValueHelper(&sort_);
    }


    /**
     * Gets the optional '<code>sort</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_sort() const { return sort_; }

    /**
     * Gets a modifiable pointer to the optional <code>sort</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_sort() {
      _have_sort_ = true;
      return &sort_;
    }


    /**
     * Sets the '<code>sort</code>' attribute.
     *
     * @param[in] value A comma-separated list of dimensions or metrics that
     * determine the sort order for Analytics data.
     */
    void set_sort(const string& value) {
      _have_sort_ = true;
      sort_ = value;
    }



    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first entity to retrieve. Use this
     * parameter as a pagination mechanism along with the max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      GaData* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string ids_;
  string start_date_;
  string end_date_;
  string metrics_;
  string dimensions_;
  string filters_;
  bool include_empty_rows_;
  int32 max_results_;
  string output_;
  string sampling_level_;
  string segment_;
  string sort_;
  int32 start_index_;
  bool _have_dimensions_ : 1;
  bool _have_filters_ : 1;
  bool _have_include_empty_rows_ : 1;
  bool _have_max_results_ : 1;
  bool _have_output_ : 1;
  bool _have_sampling_level_ : 1;
  bool _have_segment_ : 1;
  bool _have_sort_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(DataResource_GaResource_GetMethod);
};


/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.readonly
 */
class DataResource_McfResource_GetMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] ids Unique table ID for retrieving Analytics data. Table ID is
   * of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.
   * @param[in] start_date Start date for fetching Analytics data. Requests can
   * specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g.,
   * today, yesterday, or 7daysAgo). The default value is 7daysAgo.
   * @param[in] end_date End date for fetching Analytics data. Requests can
   * specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g.,
   * today, yesterday, or 7daysAgo). The default value is 7daysAgo.
   * @param[in] metrics A comma-separated list of Multi-Channel Funnels metrics.
   * E.g., 'mcf:totalConversions,mcf:totalConversionValue'. At least one metric
   * must be specified.
   */
  DataResource_McfResource_GetMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& ids,
      const StringPiece& start_date,
      const StringPiece& end_date,
      const StringPiece& metrics);

  /**
   * Standard destructor.
   */
  virtual ~DataResource_McfResource_GetMethod();


    /**
     * Clears the '<code>dimensions</code>' attribute so it is no longer set.
     */
    void clear_dimensions() {
      _have_dimensions_ = false;
      client::ClearCppValueHelper(&dimensions_);
    }


    /**
     * Gets the optional '<code>dimensions</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_dimensions() const { return dimensions_; }

    /**
     * Gets a modifiable pointer to the optional <code>dimensions</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_dimensions() {
      _have_dimensions_ = true;
      return &dimensions_;
    }


    /**
     * Sets the '<code>dimensions</code>' attribute.
     *
     * @param[in] value A comma-separated list of Multi-Channel Funnels
     * dimensions. E.g., 'mcf:source,mcf:medium'.
     */
    void set_dimensions(const string& value) {
      _have_dimensions_ = true;
      dimensions_ = value;
    }



    /**
     * Clears the '<code>filters</code>' attribute so it is no longer set.
     */
    void clear_filters() {
      _have_filters_ = false;
      client::ClearCppValueHelper(&filters_);
    }


    /**
     * Gets the optional '<code>filters</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filters() const { return filters_; }

    /**
     * Gets a modifiable pointer to the optional <code>filters</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filters() {
      _have_filters_ = true;
      return &filters_;
    }


    /**
     * Sets the '<code>filters</code>' attribute.
     *
     * @param[in] value A comma-separated list of dimension or metric filters to
     * be applied to the Analytics data.
     */
    void set_filters(const string& value) {
      _have_filters_ = true;
      filters_ = value;
    }



    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of entries to include in this feed.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>samplingLevel</code>' attribute so it is no longer set.
     */
    void clear_sampling_level() {
      _have_sampling_level_ = false;
      client::ClearCppValueHelper(&sampling_level_);
    }


    /**
     * Gets the optional '<code>samplingLevel</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_sampling_level() const { return sampling_level_; }

    /**
     * Gets a modifiable pointer to the optional <code>samplingLevel</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_samplingLevel() {
      _have_sampling_level_ = true;
      return &sampling_level_;
    }


    /**
     * Sets the '<code>samplingLevel</code>' attribute.
     *
     * @param[in] value The desired sampling level.
     */
    void set_sampling_level(const string& value) {
      _have_sampling_level_ = true;
      sampling_level_ = value;
    }



    /**
     * Clears the '<code>sort</code>' attribute so it is no longer set.
     */
    void clear_sort() {
      _have_sort_ = false;
      client::ClearCppValueHelper(&sort_);
    }


    /**
     * Gets the optional '<code>sort</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_sort() const { return sort_; }

    /**
     * Gets a modifiable pointer to the optional <code>sort</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_sort() {
      _have_sort_ = true;
      return &sort_;
    }


    /**
     * Sets the '<code>sort</code>' attribute.
     *
     * @param[in] value A comma-separated list of dimensions or metrics that
     * determine the sort order for the Analytics data.
     */
    void set_sort(const string& value) {
      _have_sort_ = true;
      sort_ = value;
    }



    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first entity to retrieve. Use this
     * parameter as a pagination mechanism along with the max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      McfData* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string ids_;
  string start_date_;
  string end_date_;
  string metrics_;
  string dimensions_;
  string filters_;
  int32 max_results_;
  string sampling_level_;
  string sort_;
  int32 start_index_;
  bool _have_dimensions_ : 1;
  bool _have_filters_ : 1;
  bool _have_max_results_ : 1;
  bool _have_sampling_level_ : 1;
  bool _have_sort_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(DataResource_McfResource_GetMethod);
};


/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.readonly
 */
class DataResource_RealtimeResource_GetMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] ids Unique table ID for retrieving real time data. Table ID is
   * of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.
   * @param[in] metrics A comma-separated list of real time metrics. E.g.,
   * 'rt:activeUsers'. At least one metric must be specified.
   */
  DataResource_RealtimeResource_GetMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& ids,
      const StringPiece& metrics);

  /**
   * Standard destructor.
   */
  virtual ~DataResource_RealtimeResource_GetMethod();


    /**
     * Clears the '<code>dimensions</code>' attribute so it is no longer set.
     */
    void clear_dimensions() {
      _have_dimensions_ = false;
      client::ClearCppValueHelper(&dimensions_);
    }


    /**
     * Gets the optional '<code>dimensions</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_dimensions() const { return dimensions_; }

    /**
     * Gets a modifiable pointer to the optional <code>dimensions</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_dimensions() {
      _have_dimensions_ = true;
      return &dimensions_;
    }


    /**
     * Sets the '<code>dimensions</code>' attribute.
     *
     * @param[in] value A comma-separated list of real time dimensions. E.g.,
     * 'rt:medium,rt:city'.
     */
    void set_dimensions(const string& value) {
      _have_dimensions_ = true;
      dimensions_ = value;
    }



    /**
     * Clears the '<code>filters</code>' attribute so it is no longer set.
     */
    void clear_filters() {
      _have_filters_ = false;
      client::ClearCppValueHelper(&filters_);
    }


    /**
     * Gets the optional '<code>filters</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filters() const { return filters_; }

    /**
     * Gets a modifiable pointer to the optional <code>filters</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filters() {
      _have_filters_ = true;
      return &filters_;
    }


    /**
     * Sets the '<code>filters</code>' attribute.
     *
     * @param[in] value A comma-separated list of dimension or metric filters to
     * be applied to real time data.
     */
    void set_filters(const string& value) {
      _have_filters_ = true;
      filters_ = value;
    }



    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of entries to include in this feed.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>sort</code>' attribute so it is no longer set.
     */
    void clear_sort() {
      _have_sort_ = false;
      client::ClearCppValueHelper(&sort_);
    }


    /**
     * Gets the optional '<code>sort</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_sort() const { return sort_; }

    /**
     * Gets a modifiable pointer to the optional <code>sort</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_sort() {
      _have_sort_ = true;
      return &sort_;
    }


    /**
     * Sets the '<code>sort</code>' attribute.
     *
     * @param[in] value A comma-separated list of dimensions or metrics that
     * determine the sort order for real time data.
     */
    void set_sort(const string& value) {
      _have_sort_ = true;
      sort_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RealtimeData* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string ids_;
  string metrics_;
  string dimensions_;
  string filters_;
  int32 max_results_;
  string sort_;
  bool _have_dimensions_ : 1;
  bool _have_filters_ : 1;
  bool _have_max_results_ : 1;
  bool _have_sort_ : 1;
  DISALLOW_COPY_AND_ASSIGN(DataResource_RealtimeResource_GetMethod);
};






/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_AccountSummariesResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  ManagementResource_AccountSummariesResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_AccountSummariesResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of account summaries to include in
     * this response, where the largest acceptable value is 1000.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first entity to retrieve. Use this
     * parameter as a pagination mechanism along with the max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      AccountSummaries* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_AccountSummariesResource_ListMethod);
};


/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.manage.users
 */
class ManagementResource_AccountUserLinksResource_DeleteMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to delete the user link for.
   * @param[in] link_id Link ID to delete the user link for.
   */
  ManagementResource_AccountUserLinksResource_DeleteMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& link_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_AccountUserLinksResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string account_id_;
  string link_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_AccountUserLinksResource_DeleteMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.manage.users
 */
class ManagementResource_AccountUserLinksResource_InsertMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to create the user link for.
   * @param[in] _content_ The data object to insert.
   */
  ManagementResource_AccountUserLinksResource_InsertMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const EntityUserLink& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_AccountUserLinksResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      EntityUserLink* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_AccountUserLinksResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.manage.users
 * https://www.googleapis.com/auth/analytics.manage.users.readonly
 */
class ManagementResource_AccountUserLinksResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to retrieve the user links for.
   */
  ManagementResource_AccountUserLinksResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_AccountUserLinksResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of account-user links to include in
     * this response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first account-user link to retrieve. Use
     * this parameter as a pagination mechanism along with the max-results
     * parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      EntityUserLinks* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_AccountUserLinksResource_ListMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.manage.users
 */
class ManagementResource_AccountUserLinksResource_UpdateMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to update the account-user link for.
   * @param[in] link_id Link ID to update the account-user link for.
   * @param[in] _content_ The data object to update.
   */
  ManagementResource_AccountUserLinksResource_UpdateMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& link_id,
      const EntityUserLink& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_AccountUserLinksResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      EntityUserLink* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string link_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_AccountUserLinksResource_UpdateMethod);
};


/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_AccountsResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  ManagementResource_AccountsResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_AccountsResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of accounts to include in this
     * response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first account to retrieve. Use this
     * parameter as a pagination mechanism along with the max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Accounts* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_AccountsResource_ListMethod);
};


/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_CustomDataSourcesResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account Id for the custom data sources to retrieve.
   * @param[in] web_property_id Web property Id for the custom data sources to
   * retrieve.
   */
  ManagementResource_CustomDataSourcesResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_CustomDataSourcesResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of custom data sources to include in
     * this response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value A 1-based index of the first custom data source to
     * retrieve. Use this parameter as a pagination mechanism along with the
     * max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CustomDataSources* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_CustomDataSourcesResource_ListMethod);
};


/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_CustomDimensionsResource_GetMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID for the custom dimension to retrieve.
   * @param[in] web_property_id Web property ID for the custom dimension to
   * retrieve.
   * @param[in] custom_dimension_id The ID of the custom dimension to retrieve.
   */
  ManagementResource_CustomDimensionsResource_GetMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& custom_dimension_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_CustomDimensionsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CustomDimension* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string custom_dimension_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_CustomDimensionsResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_CustomDimensionsResource_InsertMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID for the custom dimension to create.
   * @param[in] web_property_id Web property ID for the custom dimension to
   * create.
   * @param[in] _content_ The data object to insert.
   */
  ManagementResource_CustomDimensionsResource_InsertMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const CustomDimension& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_CustomDimensionsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CustomDimension* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_CustomDimensionsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_CustomDimensionsResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID for the custom dimensions to retrieve.
   * @param[in] web_property_id Web property ID for the custom dimensions to
   * retrieve.
   */
  ManagementResource_CustomDimensionsResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_CustomDimensionsResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of custom dimensions to include in
     * this response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first entity to retrieve. Use this
     * parameter as a pagination mechanism along with the max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CustomDimensions* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_CustomDimensionsResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_CustomDimensionsResource_PatchMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID for the custom dimension to update.
   * @param[in] web_property_id Web property ID for the custom dimension to
   * update.
   * @param[in] custom_dimension_id Custom dimension ID for the custom dimension
   * to update.
   * @param[in] _content_ The data object to patch.
   */
  ManagementResource_CustomDimensionsResource_PatchMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& custom_dimension_id,
      const CustomDimension& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_CustomDimensionsResource_PatchMethod();


    /**
     * Clears the '<code>ignoreCustomDataSourceLinks</code>' attribute so it is
     * no longer set.
     */
    void clear_ignore_custom_data_source_links() {
      _have_ignore_custom_data_source_links_ = false;
      client::ClearCppValueHelper(&ignore_custom_data_source_links_);
    }


    /**
     * Gets the optional '<code>ignoreCustomDataSourceLinks</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_ignore_custom_data_source_links() const { return ignore_custom_data_source_links_; }

    /**
     * Sets the '<code>ignoreCustomDataSourceLinks</code>' attribute.
     *
     * @param[in] value Force the update and ignore any warnings related to the
     * custom dimension being linked to a custom data source / data set.
     */
    void set_ignore_custom_data_source_links(bool value) {
      _have_ignore_custom_data_source_links_ = true;
      ignore_custom_data_source_links_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CustomDimension* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string custom_dimension_id_;
  bool ignore_custom_data_source_links_;
  bool _have_ignore_custom_data_source_links_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_CustomDimensionsResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_CustomDimensionsResource_UpdateMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID for the custom dimension to update.
   * @param[in] web_property_id Web property ID for the custom dimension to
   * update.
   * @param[in] custom_dimension_id Custom dimension ID for the custom dimension
   * to update.
   * @param[in] _content_ The data object to update.
   */
  ManagementResource_CustomDimensionsResource_UpdateMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& custom_dimension_id,
      const CustomDimension& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_CustomDimensionsResource_UpdateMethod();


    /**
     * Clears the '<code>ignoreCustomDataSourceLinks</code>' attribute so it is
     * no longer set.
     */
    void clear_ignore_custom_data_source_links() {
      _have_ignore_custom_data_source_links_ = false;
      client::ClearCppValueHelper(&ignore_custom_data_source_links_);
    }


    /**
     * Gets the optional '<code>ignoreCustomDataSourceLinks</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_ignore_custom_data_source_links() const { return ignore_custom_data_source_links_; }

    /**
     * Sets the '<code>ignoreCustomDataSourceLinks</code>' attribute.
     *
     * @param[in] value Force the update and ignore any warnings related to the
     * custom dimension being linked to a custom data source / data set.
     */
    void set_ignore_custom_data_source_links(bool value) {
      _have_ignore_custom_data_source_links_ = true;
      ignore_custom_data_source_links_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CustomDimension* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string custom_dimension_id_;
  bool ignore_custom_data_source_links_;
  bool _have_ignore_custom_data_source_links_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_CustomDimensionsResource_UpdateMethod);
};


/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_CustomMetricsResource_GetMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID for the custom metric to retrieve.
   * @param[in] web_property_id Web property ID for the custom metric to
   * retrieve.
   * @param[in] custom_metric_id The ID of the custom metric to retrieve.
   */
  ManagementResource_CustomMetricsResource_GetMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& custom_metric_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_CustomMetricsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CustomMetric* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string custom_metric_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_CustomMetricsResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_CustomMetricsResource_InsertMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID for the custom metric to create.
   * @param[in] web_property_id Web property ID for the custom dimension to
   * create.
   * @param[in] _content_ The data object to insert.
   */
  ManagementResource_CustomMetricsResource_InsertMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const CustomMetric& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_CustomMetricsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CustomMetric* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_CustomMetricsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_CustomMetricsResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID for the custom metrics to retrieve.
   * @param[in] web_property_id Web property ID for the custom metrics to
   * retrieve.
   */
  ManagementResource_CustomMetricsResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_CustomMetricsResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of custom metrics to include in this
     * response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first entity to retrieve. Use this
     * parameter as a pagination mechanism along with the max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CustomMetrics* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_CustomMetricsResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_CustomMetricsResource_PatchMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID for the custom metric to update.
   * @param[in] web_property_id Web property ID for the custom metric to update.
   * @param[in] custom_metric_id Custom metric ID for the custom metric to
   * update.
   * @param[in] _content_ The data object to patch.
   */
  ManagementResource_CustomMetricsResource_PatchMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& custom_metric_id,
      const CustomMetric& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_CustomMetricsResource_PatchMethod();


    /**
     * Clears the '<code>ignoreCustomDataSourceLinks</code>' attribute so it is
     * no longer set.
     */
    void clear_ignore_custom_data_source_links() {
      _have_ignore_custom_data_source_links_ = false;
      client::ClearCppValueHelper(&ignore_custom_data_source_links_);
    }


    /**
     * Gets the optional '<code>ignoreCustomDataSourceLinks</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_ignore_custom_data_source_links() const { return ignore_custom_data_source_links_; }

    /**
     * Sets the '<code>ignoreCustomDataSourceLinks</code>' attribute.
     *
     * @param[in] value Force the update and ignore any warnings related to the
     * custom metric being linked to a custom data source / data set.
     */
    void set_ignore_custom_data_source_links(bool value) {
      _have_ignore_custom_data_source_links_ = true;
      ignore_custom_data_source_links_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CustomMetric* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string custom_metric_id_;
  bool ignore_custom_data_source_links_;
  bool _have_ignore_custom_data_source_links_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_CustomMetricsResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_CustomMetricsResource_UpdateMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID for the custom metric to update.
   * @param[in] web_property_id Web property ID for the custom metric to update.
   * @param[in] custom_metric_id Custom metric ID for the custom metric to
   * update.
   * @param[in] _content_ The data object to update.
   */
  ManagementResource_CustomMetricsResource_UpdateMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& custom_metric_id,
      const CustomMetric& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_CustomMetricsResource_UpdateMethod();


    /**
     * Clears the '<code>ignoreCustomDataSourceLinks</code>' attribute so it is
     * no longer set.
     */
    void clear_ignore_custom_data_source_links() {
      _have_ignore_custom_data_source_links_ = false;
      client::ClearCppValueHelper(&ignore_custom_data_source_links_);
    }


    /**
     * Gets the optional '<code>ignoreCustomDataSourceLinks</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_ignore_custom_data_source_links() const { return ignore_custom_data_source_links_; }

    /**
     * Sets the '<code>ignoreCustomDataSourceLinks</code>' attribute.
     *
     * @param[in] value Force the update and ignore any warnings related to the
     * custom metric being linked to a custom data source / data set.
     */
    void set_ignore_custom_data_source_links(bool value) {
      _have_ignore_custom_data_source_links_ = true;
      ignore_custom_data_source_links_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CustomMetric* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string custom_metric_id_;
  bool ignore_custom_data_source_links_;
  bool _have_ignore_custom_data_source_links_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_CustomMetricsResource_UpdateMethod);
};


/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_ExperimentsResource_DeleteMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to which the experiment belongs.
   * @param[in] web_property_id Web property ID to which the experiment belongs.
   * @param[in] profile_id View (Profile) ID to which the experiment belongs.
   * @param[in] experiment_id ID of the experiment to delete.
   */
  ManagementResource_ExperimentsResource_DeleteMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const StringPiece& experiment_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ExperimentsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  string experiment_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ExperimentsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_ExperimentsResource_GetMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to retrieve the experiment for.
   * @param[in] web_property_id Web property ID to retrieve the experiment for.
   * @param[in] profile_id View (Profile) ID to retrieve the experiment for.
   * @param[in] experiment_id Experiment ID to retrieve the experiment for.
   */
  ManagementResource_ExperimentsResource_GetMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const StringPiece& experiment_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ExperimentsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Experiment* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  string experiment_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ExperimentsResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_ExperimentsResource_InsertMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to create the experiment for.
   * @param[in] web_property_id Web property ID to create the experiment for.
   * @param[in] profile_id View (Profile) ID to create the experiment for.
   * @param[in] _content_ The data object to insert.
   */
  ManagementResource_ExperimentsResource_InsertMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const Experiment& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ExperimentsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Experiment* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ExperimentsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_ExperimentsResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to retrieve experiments for.
   * @param[in] web_property_id Web property ID to retrieve experiments for.
   * @param[in] profile_id View (Profile) ID to retrieve experiments for.
   */
  ManagementResource_ExperimentsResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ExperimentsResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of experiments to include in this
     * response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first experiment to retrieve. Use this
     * parameter as a pagination mechanism along with the max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Experiments* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ExperimentsResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_ExperimentsResource_PatchMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID of the experiment to update.
   * @param[in] web_property_id Web property ID of the experiment to update.
   * @param[in] profile_id View (Profile) ID of the experiment to update.
   * @param[in] experiment_id Experiment ID of the experiment to update.
   * @param[in] _content_ The data object to patch.
   */
  ManagementResource_ExperimentsResource_PatchMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const StringPiece& experiment_id,
      const Experiment& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ExperimentsResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Experiment* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  string experiment_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ExperimentsResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_ExperimentsResource_UpdateMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID of the experiment to update.
   * @param[in] web_property_id Web property ID of the experiment to update.
   * @param[in] profile_id View (Profile) ID of the experiment to update.
   * @param[in] experiment_id Experiment ID of the experiment to update.
   * @param[in] _content_ The data object to update.
   */
  ManagementResource_ExperimentsResource_UpdateMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const StringPiece& experiment_id,
      const Experiment& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ExperimentsResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Experiment* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  string experiment_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ExperimentsResource_UpdateMethod);
};


/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_FiltersResource_DeleteMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to delete the filter for.
   * @param[in] filter_id ID of the filter to be deleted.
   */
  ManagementResource_FiltersResource_DeleteMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& filter_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_FiltersResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Filter* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string filter_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_FiltersResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_FiltersResource_GetMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to retrieve filters for.
   * @param[in] filter_id Filter ID to retrieve filters for.
   */
  ManagementResource_FiltersResource_GetMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& filter_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_FiltersResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Filter* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string filter_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_FiltersResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_FiltersResource_InsertMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to create filter for.
   * @param[in] _content_ The data object to insert.
   */
  ManagementResource_FiltersResource_InsertMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const Filter& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_FiltersResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Filter* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_FiltersResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_FiltersResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to retrieve filters for.
   */
  ManagementResource_FiltersResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_FiltersResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of filters to include in this
     * response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first entity to retrieve. Use this
     * parameter as a pagination mechanism along with the max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Filters* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_FiltersResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_FiltersResource_PatchMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to which the filter belongs.
   * @param[in] filter_id ID of the filter to be updated.
   * @param[in] _content_ The data object to patch.
   */
  ManagementResource_FiltersResource_PatchMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& filter_id,
      const Filter& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_FiltersResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Filter* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string filter_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_FiltersResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_FiltersResource_UpdateMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to which the filter belongs.
   * @param[in] filter_id ID of the filter to be updated.
   * @param[in] _content_ The data object to update.
   */
  ManagementResource_FiltersResource_UpdateMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& filter_id,
      const Filter& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_FiltersResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Filter* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string filter_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_FiltersResource_UpdateMethod);
};


/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_GoalsResource_GetMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to retrieve the goal for.
   * @param[in] web_property_id Web property ID to retrieve the goal for.
   * @param[in] profile_id View (Profile) ID to retrieve the goal for.
   * @param[in] goal_id Goal ID to retrieve the goal for.
   */
  ManagementResource_GoalsResource_GetMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const StringPiece& goal_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_GoalsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Goal* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  string goal_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_GoalsResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_GoalsResource_InsertMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to create the goal for.
   * @param[in] web_property_id Web property ID to create the goal for.
   * @param[in] profile_id View (Profile) ID to create the goal for.
   * @param[in] _content_ The data object to insert.
   */
  ManagementResource_GoalsResource_InsertMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const Goal& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_GoalsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Goal* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_GoalsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_GoalsResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to retrieve goals for. Can either be a
   * specific account ID or '~all', which refers to all the accounts that user
   * has access to.
   * @param[in] web_property_id Web property ID to retrieve goals for. Can
   * either be a specific web property ID or '~all', which refers to all the web
   * properties that user has access to.
   * @param[in] profile_id View (Profile) ID to retrieve goals for. Can either
   * be a specific view (profile) ID or '~all', which refers to all the views
   * (profiles) that user has access to.
   */
  ManagementResource_GoalsResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_GoalsResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of goals to include in this response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first goal to retrieve. Use this
     * parameter as a pagination mechanism along with the max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Goals* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_GoalsResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_GoalsResource_PatchMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to update the goal.
   * @param[in] web_property_id Web property ID to update the goal.
   * @param[in] profile_id View (Profile) ID to update the goal.
   * @param[in] goal_id Index of the goal to be updated.
   * @param[in] _content_ The data object to patch.
   */
  ManagementResource_GoalsResource_PatchMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const StringPiece& goal_id,
      const Goal& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_GoalsResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Goal* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  string goal_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_GoalsResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_GoalsResource_UpdateMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to update the goal.
   * @param[in] web_property_id Web property ID to update the goal.
   * @param[in] profile_id View (Profile) ID to update the goal.
   * @param[in] goal_id Index of the goal to be updated.
   * @param[in] _content_ The data object to update.
   */
  ManagementResource_GoalsResource_UpdateMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const StringPiece& goal_id,
      const Goal& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_GoalsResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Goal* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  string goal_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_GoalsResource_UpdateMethod);
};


/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_ProfileFilterLinksResource_DeleteMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to which the profile filter link belongs.
   * @param[in] web_property_id Web property Id to which the profile filter link
   * belongs.
   * @param[in] profile_id Profile ID to which the filter link belongs.
   * @param[in] link_id ID of the profile filter link to delete.
   */
  ManagementResource_ProfileFilterLinksResource_DeleteMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const StringPiece& link_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfileFilterLinksResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  string link_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfileFilterLinksResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_ProfileFilterLinksResource_GetMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to retrieve profile filter link for.
   * @param[in] web_property_id Web property Id to retrieve profile filter link
   * for.
   * @param[in] profile_id Profile ID to retrieve filter link for.
   * @param[in] link_id ID of the profile filter link.
   */
  ManagementResource_ProfileFilterLinksResource_GetMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const StringPiece& link_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfileFilterLinksResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ProfileFilterLink* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  string link_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfileFilterLinksResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_ProfileFilterLinksResource_InsertMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to create profile filter link for.
   * @param[in] web_property_id Web property Id to create profile filter link
   * for.
   * @param[in] profile_id Profile ID to create filter link for.
   * @param[in] _content_ The data object to insert.
   */
  ManagementResource_ProfileFilterLinksResource_InsertMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const ProfileFilterLink& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfileFilterLinksResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ProfileFilterLink* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfileFilterLinksResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_ProfileFilterLinksResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to retrieve profile filter links for.
   * @param[in] web_property_id Web property Id for profile filter links for.
   * Can either be a specific web property ID or '~all', which refers to all the
   * web properties that user has access to.
   * @param[in] profile_id Profile ID to retrieve filter links for. Can either
   * be a specific profile ID or '~all', which refers to all the profiles that
   * user has access to.
   */
  ManagementResource_ProfileFilterLinksResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfileFilterLinksResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of profile filter links to include in
     * this response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first entity to retrieve. Use this
     * parameter as a pagination mechanism along with the max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ProfileFilterLinks* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfileFilterLinksResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_ProfileFilterLinksResource_PatchMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to which profile filter link belongs.
   * @param[in] web_property_id Web property Id to which profile filter link
   * belongs.
   * @param[in] profile_id Profile ID to which filter link belongs.
   * @param[in] link_id ID of the profile filter link to be updated.
   * @param[in] _content_ The data object to patch.
   */
  ManagementResource_ProfileFilterLinksResource_PatchMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const StringPiece& link_id,
      const ProfileFilterLink& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfileFilterLinksResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ProfileFilterLink* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  string link_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfileFilterLinksResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_ProfileFilterLinksResource_UpdateMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to which profile filter link belongs.
   * @param[in] web_property_id Web property Id to which profile filter link
   * belongs.
   * @param[in] profile_id Profile ID to which filter link belongs.
   * @param[in] link_id ID of the profile filter link to be updated.
   * @param[in] _content_ The data object to update.
   */
  ManagementResource_ProfileFilterLinksResource_UpdateMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const StringPiece& link_id,
      const ProfileFilterLink& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfileFilterLinksResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ProfileFilterLink* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  string link_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfileFilterLinksResource_UpdateMethod);
};


/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.manage.users
 */
class ManagementResource_ProfileUserLinksResource_DeleteMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to delete the user link for.
   * @param[in] web_property_id Web Property ID to delete the user link for.
   * @param[in] profile_id View (Profile) ID to delete the user link for.
   * @param[in] link_id Link ID to delete the user link for.
   */
  ManagementResource_ProfileUserLinksResource_DeleteMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const StringPiece& link_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfileUserLinksResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  string link_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfileUserLinksResource_DeleteMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.manage.users
 */
class ManagementResource_ProfileUserLinksResource_InsertMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to create the user link for.
   * @param[in] web_property_id Web Property ID to create the user link for.
   * @param[in] profile_id View (Profile) ID to create the user link for.
   * @param[in] _content_ The data object to insert.
   */
  ManagementResource_ProfileUserLinksResource_InsertMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const EntityUserLink& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfileUserLinksResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      EntityUserLink* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfileUserLinksResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.manage.users
 * https://www.googleapis.com/auth/analytics.manage.users.readonly
 */
class ManagementResource_ProfileUserLinksResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID which the given view (profile) belongs to.
   * @param[in] web_property_id Web Property ID which the given view (profile)
   * belongs to. Can either be a specific web property ID or '~all', which
   * refers to all the web properties that user has access to.
   * @param[in] profile_id View (Profile) ID to retrieve the profile-user links
   * for. Can either be a specific profile ID or '~all', which refers to all the
   * profiles that user has access to.
   */
  ManagementResource_ProfileUserLinksResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfileUserLinksResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of profile-user links to include in
     * this response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first profile-user link to retrieve. Use
     * this parameter as a pagination mechanism along with the max-results
     * parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      EntityUserLinks* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfileUserLinksResource_ListMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.manage.users
 */
class ManagementResource_ProfileUserLinksResource_UpdateMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to update the user link for.
   * @param[in] web_property_id Web Property ID to update the user link for.
   * @param[in] profile_id View (Profile ID) to update the user link for.
   * @param[in] link_id Link ID to update the user link for.
   * @param[in] _content_ The data object to update.
   */
  ManagementResource_ProfileUserLinksResource_UpdateMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const StringPiece& link_id,
      const EntityUserLink& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfileUserLinksResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      EntityUserLink* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  string link_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfileUserLinksResource_UpdateMethod);
};


/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_ProfilesResource_DeleteMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to delete the view (profile) for.
   * @param[in] web_property_id Web property ID to delete the view (profile)
   * for.
   * @param[in] profile_id ID of the view (profile) to be deleted.
   */
  ManagementResource_ProfilesResource_DeleteMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfilesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfilesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_ProfilesResource_GetMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to retrieve the view (profile) for.
   * @param[in] web_property_id Web property ID to retrieve the view (profile)
   * for.
   * @param[in] profile_id View (Profile) ID to retrieve the view (profile) for.
   */
  ManagementResource_ProfilesResource_GetMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfilesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Profile* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfilesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_ProfilesResource_InsertMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to create the view (profile) for.
   * @param[in] web_property_id Web property ID to create the view (profile)
   * for.
   * @param[in] _content_ The data object to insert.
   */
  ManagementResource_ProfilesResource_InsertMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const Profile& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfilesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Profile* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfilesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_ProfilesResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID for the view (profiles) to retrieve. Can
   * either be a specific account ID or '~all', which refers to all the accounts
   * to which the user has access.
   * @param[in] web_property_id Web property ID for the views (profiles) to
   * retrieve. Can either be a specific web property ID or '~all', which refers
   * to all the web properties to which the user has access.
   */
  ManagementResource_ProfilesResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfilesResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of views (profiles) to include in
     * this response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first entity to retrieve. Use this
     * parameter as a pagination mechanism along with the max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Profiles* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfilesResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_ProfilesResource_PatchMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to which the view (profile) belongs.
   * @param[in] web_property_id Web property ID to which the view (profile)
   * belongs.
   * @param[in] profile_id ID of the view (profile) to be updated.
   * @param[in] _content_ The data object to patch.
   */
  ManagementResource_ProfilesResource_PatchMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const Profile& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfilesResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Profile* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfilesResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_ProfilesResource_UpdateMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to which the view (profile) belongs.
   * @param[in] web_property_id Web property ID to which the view (profile)
   * belongs.
   * @param[in] profile_id ID of the view (profile) to be updated.
   * @param[in] _content_ The data object to update.
   */
  ManagementResource_ProfilesResource_UpdateMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const Profile& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_ProfilesResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Profile* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_ProfilesResource_UpdateMethod);
};


/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_RemarketingAudienceResource_DeleteMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to which the remarketing audience belongs.
   * @param[in] web_property_id Web property ID to which the remarketing
   * audience belongs.
   * @param[in] remarketing_audience_id The ID of the remarketing audience to
   * delete.
   */
  ManagementResource_RemarketingAudienceResource_DeleteMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& remarketing_audience_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_RemarketingAudienceResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string account_id_;
  string web_property_id_;
  string remarketing_audience_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_RemarketingAudienceResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_RemarketingAudienceResource_GetMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id The account ID of the remarketing audience to
   * retrieve.
   * @param[in] web_property_id The web property ID of the remarketing audience
   * to retrieve.
   * @param[in] remarketing_audience_id The ID of the remarketing audience to
   * retrieve.
   */
  ManagementResource_RemarketingAudienceResource_GetMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& remarketing_audience_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_RemarketingAudienceResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RemarketingAudience* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string remarketing_audience_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_RemarketingAudienceResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_RemarketingAudienceResource_InsertMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id The account ID for which to create the remarketing
   * audience.
   * @param[in] web_property_id Web property ID for which to create the
   * remarketing audience.
   * @param[in] _content_ The data object to insert.
   */
  ManagementResource_RemarketingAudienceResource_InsertMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const RemarketingAudience& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_RemarketingAudienceResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RemarketingAudience* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_RemarketingAudienceResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_RemarketingAudienceResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id The account ID of the remarketing audiences to
   * retrieve.
   * @param[in] web_property_id The web property ID of the remarketing audiences
   * to retrieve.
   */
  ManagementResource_RemarketingAudienceResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_RemarketingAudienceResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of remarketing audiences to include
     * in this response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first entity to retrieve. Use this
     * parameter as a pagination mechanism along with the max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

    /**
     * Clears the '<code>type</code>' attribute so it is no longer set.
     */
    void clear_type() {
      _have_type_ = false;
      client::ClearCppValueHelper(&type_);
    }


    /**
     * Gets the optional '<code>type</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_type() const { return type_; }

    /**
     * Gets a modifiable pointer to the optional <code>type</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_type() {
      _have_type_ = true;
      return &type_;
    }


    /**
     * Sets the '<code>type</code>' attribute.
     *
     * @param[in] value
     */
    void set_type(const string& value) {
      _have_type_ = true;
      type_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RemarketingAudiences* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  int32 max_results_;
  int32 start_index_;
  string type_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  bool _have_type_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_RemarketingAudienceResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_RemarketingAudienceResource_PatchMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id The account ID of the remarketing audience to update.
   * @param[in] web_property_id The web property ID of the remarketing audience
   * to update.
   * @param[in] remarketing_audience_id The ID of the remarketing audience to
   * update.
   * @param[in] _content_ The data object to patch.
   */
  ManagementResource_RemarketingAudienceResource_PatchMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& remarketing_audience_id,
      const RemarketingAudience& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_RemarketingAudienceResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RemarketingAudience* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string remarketing_audience_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_RemarketingAudienceResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_RemarketingAudienceResource_UpdateMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id The account ID of the remarketing audience to update.
   * @param[in] web_property_id The web property ID of the remarketing audience
   * to update.
   * @param[in] remarketing_audience_id The ID of the remarketing audience to
   * update.
   * @param[in] _content_ The data object to update.
   */
  ManagementResource_RemarketingAudienceResource_UpdateMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& remarketing_audience_id,
      const RemarketingAudience& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_RemarketingAudienceResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RemarketingAudience* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string remarketing_audience_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_RemarketingAudienceResource_UpdateMethod);
};


/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_SegmentsResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  ManagementResource_SegmentsResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_SegmentsResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of segments to include in this
     * response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first segment to retrieve. Use this
     * parameter as a pagination mechanism along with the max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Segments* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_SegmentsResource_ListMethod);
};


/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_UnsampledReportsResource_DeleteMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to delete the unsampled report for.
   * @param[in] web_property_id Web property ID to delete the unsampled reports
   * for.
   * @param[in] profile_id View (Profile) ID to delete the unsampled report for.
   * @param[in] unsampled_report_id ID of the unsampled report to be deleted.
   */
  ManagementResource_UnsampledReportsResource_DeleteMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const StringPiece& unsampled_report_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_UnsampledReportsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  string unsampled_report_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_UnsampledReportsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_UnsampledReportsResource_GetMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to retrieve unsampled report for.
   * @param[in] web_property_id Web property ID to retrieve unsampled reports
   * for.
   * @param[in] profile_id View (Profile) ID to retrieve unsampled report for.
   * @param[in] unsampled_report_id ID of the unsampled report to retrieve.
   */
  ManagementResource_UnsampledReportsResource_GetMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const StringPiece& unsampled_report_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_UnsampledReportsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      UnsampledReport* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  string unsampled_report_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_UnsampledReportsResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_UnsampledReportsResource_InsertMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to create the unsampled report for.
   * @param[in] web_property_id Web property ID to create the unsampled report
   * for.
   * @param[in] profile_id View (Profile) ID to create the unsampled report for.
   * @param[in] _content_ The data object to insert.
   */
  ManagementResource_UnsampledReportsResource_InsertMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id,
      const UnsampledReport& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_UnsampledReportsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      UnsampledReport* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_UnsampledReportsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_UnsampledReportsResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to retrieve unsampled reports for. Must be
   * a specific account ID, ~all is not supported.
   * @param[in] web_property_id Web property ID to retrieve unsampled reports
   * for. Must be a specific web property ID, ~all is not supported.
   * @param[in] profile_id View (Profile) ID to retrieve unsampled reports for.
   * Must be a specific view (profile) ID, ~all is not supported.
   */
  ManagementResource_UnsampledReportsResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& profile_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_UnsampledReportsResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of unsampled reports to include in
     * this response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first unsampled report to retrieve. Use
     * this parameter as a pagination mechanism along with the max-results
     * parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      UnsampledReports* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string profile_id_;
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_UnsampledReportsResource_ListMethod);
};


/**
 * Implements the deleteUploadData method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_UploadsResource_DeleteUploadDataMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account Id for the uploads to be deleted.
   * @param[in] web_property_id Web property Id for the uploads to be deleted.
   * @param[in] custom_data_source_id Custom data source Id for the uploads to
   * be deleted.
   * @param[in] _content_ The data object to deleteUploadData.
   */
  ManagementResource_UploadsResource_DeleteUploadDataMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& custom_data_source_id,
      const AnalyticsDataimportDeleteUploadDataRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_UploadsResource_DeleteUploadDataMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string account_id_;
  string web_property_id_;
  string custom_data_source_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_UploadsResource_DeleteUploadDataMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_UploadsResource_GetMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account Id for the upload to retrieve.
   * @param[in] web_property_id Web property Id for the upload to retrieve.
   * @param[in] custom_data_source_id Custom data source Id for upload to
   * retrieve.
   * @param[in] upload_id Upload Id to retrieve.
   */
  ManagementResource_UploadsResource_GetMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& custom_data_source_id,
      const StringPiece& upload_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_UploadsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Upload* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string custom_data_source_id_;
  string upload_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_UploadsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_UploadsResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account Id for the uploads to retrieve.
   * @param[in] web_property_id Web property Id for the uploads to retrieve.
   * @param[in] custom_data_source_id Custom data source Id for uploads to
   * retrieve.
   */
  ManagementResource_UploadsResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& custom_data_source_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_UploadsResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of uploads to include in this
     * response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value A 1-based index of the first upload to retrieve. Use
     * this parameter as a pagination mechanism along with the max-results
     * parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Uploads* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string custom_data_source_id_;
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_UploadsResource_ListMethod);
};

/**
 * Implements the uploadData method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_UploadsResource_UploadDataMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account Id associated with the upload.
   * @param[in] web_property_id Web property UA-string associated with the
   * upload.
   * @param[in] custom_data_source_id Custom data source Id to which the data
   * being uploaded belongs.
   * @param[in] _media_content_type_ The content type of the data in the
   *            _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to uploadData. If
   *            this is NULL then do not upload any media and ignore
   *            _media_content_type_.
   */
  ManagementResource_UploadsResource_UploadDataMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& custom_data_source_id,
      const char* _media_content_type_,
      client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_UploadsResource_UploadDataMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Upload* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }


  /**
   * Returns MediaUploader for uploading the content.
   */

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec RESUMABLE_MEDIA_UPLOAD;

 private:
  string account_id_;
  string web_property_id_;
  string custom_data_source_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_UploadsResource_UploadDataMethod);
};


/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_WebPropertyAdWordsLinksResource_DeleteMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id ID of the account which the given web property
   * belongs to.
   * @param[in] web_property_id Web property ID to delete the AdWords link for.
   * @param[in] web_property_ad_words_link_id Web property AdWords link ID.
   */
  ManagementResource_WebPropertyAdWordsLinksResource_DeleteMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& web_property_ad_words_link_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_WebPropertyAdWordsLinksResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string account_id_;
  string web_property_id_;
  string web_property_ad_words_link_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_WebPropertyAdWordsLinksResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_WebPropertyAdWordsLinksResource_GetMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id ID of the account which the given web property
   * belongs to.
   * @param[in] web_property_id Web property ID to retrieve the AdWords link
   * for.
   * @param[in] web_property_ad_words_link_id Web property-AdWords link ID.
   */
  ManagementResource_WebPropertyAdWordsLinksResource_GetMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& web_property_ad_words_link_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_WebPropertyAdWordsLinksResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      EntityAdWordsLink* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string web_property_ad_words_link_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_WebPropertyAdWordsLinksResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_WebPropertyAdWordsLinksResource_InsertMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id ID of the Google Analytics account to create the link
   * for.
   * @param[in] web_property_id Web property ID to create the link for.
   * @param[in] _content_ The data object to insert.
   */
  ManagementResource_WebPropertyAdWordsLinksResource_InsertMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const EntityAdWordsLink& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_WebPropertyAdWordsLinksResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      EntityAdWordsLink* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_WebPropertyAdWordsLinksResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_WebPropertyAdWordsLinksResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id ID of the account which the given web property
   * belongs to.
   * @param[in] web_property_id Web property ID to retrieve the AdWords links
   * for.
   */
  ManagementResource_WebPropertyAdWordsLinksResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_WebPropertyAdWordsLinksResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of webProperty-AdWords links to
     * include in this response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first webProperty-AdWords link to
     * retrieve. Use this parameter as a pagination mechanism along with the
     * max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      EntityAdWordsLinks* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_WebPropertyAdWordsLinksResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_WebPropertyAdWordsLinksResource_PatchMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id ID of the account which the given web property
   * belongs to.
   * @param[in] web_property_id Web property ID to retrieve the AdWords link
   * for.
   * @param[in] web_property_ad_words_link_id Web property-AdWords link ID.
   * @param[in] _content_ The data object to patch.
   */
  ManagementResource_WebPropertyAdWordsLinksResource_PatchMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& web_property_ad_words_link_id,
      const EntityAdWordsLink& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_WebPropertyAdWordsLinksResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      EntityAdWordsLink* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string web_property_ad_words_link_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_WebPropertyAdWordsLinksResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_WebPropertyAdWordsLinksResource_UpdateMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id ID of the account which the given web property
   * belongs to.
   * @param[in] web_property_id Web property ID to retrieve the AdWords link
   * for.
   * @param[in] web_property_ad_words_link_id Web property-AdWords link ID.
   * @param[in] _content_ The data object to update.
   */
  ManagementResource_WebPropertyAdWordsLinksResource_UpdateMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& web_property_ad_words_link_id,
      const EntityAdWordsLink& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_WebPropertyAdWordsLinksResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      EntityAdWordsLink* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string web_property_ad_words_link_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_WebPropertyAdWordsLinksResource_UpdateMethod);
};


/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_WebpropertiesResource_GetMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to retrieve the web property for.
   * @param[in] web_property_id ID to retrieve the web property for.
   */
  ManagementResource_WebpropertiesResource_GetMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_WebpropertiesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Webproperty* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_WebpropertiesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_WebpropertiesResource_InsertMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to create the web property for.
   * @param[in] _content_ The data object to insert.
   */
  ManagementResource_WebpropertiesResource_InsertMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const Webproperty& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_WebpropertiesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Webproperty* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_WebpropertiesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class ManagementResource_WebpropertiesResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to retrieve web properties for. Can either
   * be a specific account ID or '~all', which refers to all the accounts that
   * user has access to.
   */
  ManagementResource_WebpropertiesResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_WebpropertiesResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of web properties to include in this
     * response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first entity to retrieve. Use this
     * parameter as a pagination mechanism along with the max-results parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Webproperties* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_WebpropertiesResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_WebpropertiesResource_PatchMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to which the web property belongs.
   * @param[in] web_property_id Web property ID.
   * @param[in] _content_ The data object to patch.
   */
  ManagementResource_WebpropertiesResource_PatchMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const Webproperty& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_WebpropertiesResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Webproperty* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_WebpropertiesResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.edit
 */
class ManagementResource_WebpropertiesResource_UpdateMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to which the web property belongs.
   * @param[in] web_property_id Web property ID.
   * @param[in] _content_ The data object to update.
   */
  ManagementResource_WebpropertiesResource_UpdateMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const Webproperty& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_WebpropertiesResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Webproperty* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_WebpropertiesResource_UpdateMethod);
};


/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.manage.users
 */
class ManagementResource_WebpropertyUserLinksResource_DeleteMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to delete the user link for.
   * @param[in] web_property_id Web Property ID to delete the user link for.
   * @param[in] link_id Link ID to delete the user link for.
   */
  ManagementResource_WebpropertyUserLinksResource_DeleteMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& link_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_WebpropertyUserLinksResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string account_id_;
  string web_property_id_;
  string link_id_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_WebpropertyUserLinksResource_DeleteMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.manage.users
 */
class ManagementResource_WebpropertyUserLinksResource_InsertMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to create the user link for.
   * @param[in] web_property_id Web Property ID to create the user link for.
   * @param[in] _content_ The data object to insert.
   */
  ManagementResource_WebpropertyUserLinksResource_InsertMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const EntityUserLink& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_WebpropertyUserLinksResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      EntityUserLink* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_WebpropertyUserLinksResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.manage.users
 * https://www.googleapis.com/auth/analytics.manage.users.readonly
 */
class ManagementResource_WebpropertyUserLinksResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID which the given web property belongs to.
   * @param[in] web_property_id Web Property ID for the webProperty-user links
   * to retrieve. Can either be a specific web property ID or '~all', which
   * refers to all the web properties that user has access to.
   */
  ManagementResource_WebpropertyUserLinksResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_WebpropertyUserLinksResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value The maximum number of webProperty-user Links to include
     * in this response.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value An index of the first webProperty-user link to retrieve.
     * Use this parameter as a pagination mechanism along with the max-results
     * parameter.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      EntityUserLinks* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  int32 max_results_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_WebpropertyUserLinksResource_ListMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.manage.users
 */
class ManagementResource_WebpropertyUserLinksResource_UpdateMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] account_id Account ID to update the account-user link for.
   * @param[in] web_property_id Web property ID to update the account-user link
   * for.
   * @param[in] link_id Link ID to update the account-user link for.
   * @param[in] _content_ The data object to update.
   */
  ManagementResource_WebpropertyUserLinksResource_UpdateMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& account_id,
      const StringPiece& web_property_id,
      const StringPiece& link_id,
      const EntityUserLink& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ManagementResource_WebpropertyUserLinksResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      EntityUserLink* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string account_id_;
  string web_property_id_;
  string link_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ManagementResource_WebpropertyUserLinksResource_UpdateMethod);
};






/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics
 * https://www.googleapis.com/auth/analytics.edit
 * https://www.googleapis.com/auth/analytics.readonly
 */
class MetadataResource_ColumnsResource_ListMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] report_type Report type. Allowed Values: 'ga'. Where 'ga'
   * corresponds to the Core Reporting API.
   */
  MetadataResource_ColumnsResource_ListMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& report_type);

  /**
   * Standard destructor.
   */
  virtual ~MetadataResource_ColumnsResource_ListMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Columns* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string report_type_;
  DISALLOW_COPY_AND_ASSIGN(MetadataResource_ColumnsResource_ListMethod);
};



/**
 * Implements the createAccountTicket method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/analytics.provision
 */
class ProvisioningResource_CreateAccountTicketMethod : public AnalyticsServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _content_ The data object to createAccountTicket.
   */
  ProvisioningResource_CreateAccountTicketMethod(
      const AnalyticsService* _service_,
      client::AuthorizationCredential* _credential_,
      const AccountTicket& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProvisioningResource_CreateAccountTicketMethod();

  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      AccountTicket* data) {
    return AnalyticsServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProvisioningResource_CreateAccountTicketMethod);
};



/**
 * Service definition for AnalyticsService (v3).
 *
 * @ingroup ServiceClass
 *
 * For more information about this service, see the API Documentation at
 * <a href='https://developers.google.com/analytics/'>'https://developers.google.com/analytics/</a>
 */
class AnalyticsService : public client::ClientService {
 public:
  /**
   * The name of the API that this was generated from.
   */
  static const char googleapis_API_NAME[];

  /**
   * The version of the API that this interface was generated from.
   */
  static const char googleapis_API_VERSION[];

  /**
   * The code generator used to generate this API.
   */
  static const char googleapis_API_GENERATOR[];


  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class DataResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit DataResource(AnalyticsService* service);

    /**
     * Standard destructor.
     */
    ~DataResource() {}

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class GaResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit GaResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~GaResource() {}


      /**
       * Creates a new DataResource_GaResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] ids Unique table ID for retrieving Analytics data. Table ID
       * is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.
       * @param[in] start_date Start date for fetching Analytics data. Requests
       * can specify a start date formatted as YYYY-MM-DD, or as a relative date
       * (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo.
       * @param[in] end_date End date for fetching Analytics data. Request can
       * should specify an end date formatted as YYYY-MM-DD, or as a relative
       * date (e.g., today, yesterday, or 7daysAgo). The default value is
       * yesterday.
       * @param[in] metrics A comma-separated list of Analytics metrics. E.g.,
       * 'ga:sessions,ga:pageviews'. At least one metric must be specified.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      DataResource_GaResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& ids,
          const StringPiece& start_date,
          const StringPiece& end_date,
          const StringPiece& metrics) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(GaResource);
    };
    /**
     * Gets the ga resource method factory.
     *
     * @return GaResource for creating methods.
     */
    const GaResource& get_ga() const {
      return ga_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class McfResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit McfResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~McfResource() {}


      /**
       * Creates a new DataResource_McfResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] ids Unique table ID for retrieving Analytics data. Table ID
       * is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.
       * @param[in] start_date Start date for fetching Analytics data. Requests
       * can specify a start date formatted as YYYY-MM-DD, or as a relative date
       * (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo.
       * @param[in] end_date End date for fetching Analytics data. Requests can
       * specify a start date formatted as YYYY-MM-DD, or as a relative date
       * (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo.
       * @param[in] metrics A comma-separated list of Multi-Channel Funnels
       * metrics. E.g., 'mcf:totalConversions,mcf:totalConversionValue'. At
       * least one metric must be specified.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      DataResource_McfResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& ids,
          const StringPiece& start_date,
          const StringPiece& end_date,
          const StringPiece& metrics) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(McfResource);
    };
    /**
     * Gets the mcf resource method factory.
     *
     * @return McfResource for creating methods.
     */
    const McfResource& get_mcf() const {
      return mcf_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class RealtimeResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit RealtimeResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~RealtimeResource() {}


      /**
       * Creates a new DataResource_RealtimeResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] ids Unique table ID for retrieving real time data. Table ID
       * is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.
       * @param[in] metrics A comma-separated list of real time metrics. E.g.,
       * 'rt:activeUsers'. At least one metric must be specified.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      DataResource_RealtimeResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& ids,
          const StringPiece& metrics) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(RealtimeResource);
    };
    /**
     * Gets the realtime resource method factory.
     *
     * @return RealtimeResource for creating methods.
     */
    const RealtimeResource& get_realtime() const {
      return realtime_;
    }



   private:
    AnalyticsService* service_;
    GaResource ga_;
    McfResource mcf_;
    RealtimeResource realtime_;

    DISALLOW_COPY_AND_ASSIGN(DataResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class ManagementResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit ManagementResource(AnalyticsService* service);

    /**
     * Standard destructor.
     */
    ~ManagementResource() {}

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class AccountSummariesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit AccountSummariesResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~AccountSummariesResource() {}


      /**
       * Creates a new ManagementResource_AccountSummariesResource_ListMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_AccountSummariesResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(AccountSummariesResource);
    };
    /**
     * Gets the accountSummaries resource method factory.
     *
     * @return AccountSummariesResource for creating methods.
     */
    const AccountSummariesResource& get_account_summaries() const {
      return account_summaries_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class AccountUserLinksResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit AccountUserLinksResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~AccountUserLinksResource() {}


      /**
       * Creates a new ManagementResource_AccountUserLinksResource_DeleteMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to delete the user link for.
       * @param[in] link_id Link ID to delete the user link for.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_AccountUserLinksResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& link_id) const;

      /**
       * Creates a new ManagementResource_AccountUserLinksResource_InsertMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to create the user link for.
       * @param[in] _content_ The data object to insert.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_AccountUserLinksResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const EntityUserLink& _content_) const;

      /**
       * Creates a new ManagementResource_AccountUserLinksResource_ListMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to retrieve the user links for.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_AccountUserLinksResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id) const;

      /**
       * Creates a new ManagementResource_AccountUserLinksResource_UpdateMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to update the account-user link for.
       * @param[in] link_id Link ID to update the account-user link for.
       * @param[in] _content_ The data object to update.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_AccountUserLinksResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& link_id,
          const EntityUserLink& _content_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(AccountUserLinksResource);
    };
    /**
     * Gets the accountUserLinks resource method factory.
     *
     * @return AccountUserLinksResource for creating methods.
     */
    const AccountUserLinksResource& get_account_user_links() const {
      return account_user_links_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class AccountsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit AccountsResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~AccountsResource() {}


      /**
       * Creates a new ManagementResource_AccountsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_AccountsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(AccountsResource);
    };
    /**
     * Gets the accounts resource method factory.
     *
     * @return AccountsResource for creating methods.
     */
    const AccountsResource& get_accounts() const {
      return accounts_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class CustomDataSourcesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit CustomDataSourcesResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~CustomDataSourcesResource() {}


      /**
       * Creates a new ManagementResource_CustomDataSourcesResource_ListMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account Id for the custom data sources to
       * retrieve.
       * @param[in] web_property_id Web property Id for the custom data sources
       * to retrieve.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_CustomDataSourcesResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(CustomDataSourcesResource);
    };
    /**
     * Gets the customDataSources resource method factory.
     *
     * @return CustomDataSourcesResource for creating methods.
     */
    const CustomDataSourcesResource& get_custom_data_sources() const {
      return custom_data_sources_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class CustomDimensionsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit CustomDimensionsResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~CustomDimensionsResource() {}


      /**
       * Creates a new ManagementResource_CustomDimensionsResource_GetMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID for the custom dimension to retrieve.
       * @param[in] web_property_id Web property ID for the custom dimension to
       * retrieve.
       * @param[in] custom_dimension_id The ID of the custom dimension to
       * retrieve.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_CustomDimensionsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& custom_dimension_id) const;

      /**
       * Creates a new ManagementResource_CustomDimensionsResource_InsertMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID for the custom dimension to create.
       * @param[in] web_property_id Web property ID for the custom dimension to
       * create.
       * @param[in] _content_ The data object to insert.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_CustomDimensionsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const CustomDimension& _content_) const;

      /**
       * Creates a new ManagementResource_CustomDimensionsResource_ListMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID for the custom dimensions to retrieve.
       * @param[in] web_property_id Web property ID for the custom dimensions to
       * retrieve.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_CustomDimensionsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id) const;

      /**
       * Creates a new ManagementResource_CustomDimensionsResource_PatchMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID for the custom dimension to update.
       * @param[in] web_property_id Web property ID for the custom dimension to
       * update.
       * @param[in] custom_dimension_id Custom dimension ID for the custom
       * dimension to update.
       * @param[in] _content_ The data object to patch.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_CustomDimensionsResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& custom_dimension_id,
          const CustomDimension& _content_) const;

      /**
       * Creates a new ManagementResource_CustomDimensionsResource_UpdateMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID for the custom dimension to update.
       * @param[in] web_property_id Web property ID for the custom dimension to
       * update.
       * @param[in] custom_dimension_id Custom dimension ID for the custom
       * dimension to update.
       * @param[in] _content_ The data object to update.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_CustomDimensionsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& custom_dimension_id,
          const CustomDimension& _content_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(CustomDimensionsResource);
    };
    /**
     * Gets the customDimensions resource method factory.
     *
     * @return CustomDimensionsResource for creating methods.
     */
    const CustomDimensionsResource& get_custom_dimensions() const {
      return custom_dimensions_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class CustomMetricsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit CustomMetricsResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~CustomMetricsResource() {}


      /**
       * Creates a new ManagementResource_CustomMetricsResource_GetMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID for the custom metric to retrieve.
       * @param[in] web_property_id Web property ID for the custom metric to
       * retrieve.
       * @param[in] custom_metric_id The ID of the custom metric to retrieve.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_CustomMetricsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& custom_metric_id) const;

      /**
       * Creates a new ManagementResource_CustomMetricsResource_InsertMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID for the custom metric to create.
       * @param[in] web_property_id Web property ID for the custom dimension to
       * create.
       * @param[in] _content_ The data object to insert.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_CustomMetricsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const CustomMetric& _content_) const;

      /**
       * Creates a new ManagementResource_CustomMetricsResource_ListMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID for the custom metrics to retrieve.
       * @param[in] web_property_id Web property ID for the custom metrics to
       * retrieve.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_CustomMetricsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id) const;

      /**
       * Creates a new ManagementResource_CustomMetricsResource_PatchMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID for the custom metric to update.
       * @param[in] web_property_id Web property ID for the custom metric to
       * update.
       * @param[in] custom_metric_id Custom metric ID for the custom metric to
       * update.
       * @param[in] _content_ The data object to patch.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_CustomMetricsResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& custom_metric_id,
          const CustomMetric& _content_) const;

      /**
       * Creates a new ManagementResource_CustomMetricsResource_UpdateMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID for the custom metric to update.
       * @param[in] web_property_id Web property ID for the custom metric to
       * update.
       * @param[in] custom_metric_id Custom metric ID for the custom metric to
       * update.
       * @param[in] _content_ The data object to update.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_CustomMetricsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& custom_metric_id,
          const CustomMetric& _content_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(CustomMetricsResource);
    };
    /**
     * Gets the customMetrics resource method factory.
     *
     * @return CustomMetricsResource for creating methods.
     */
    const CustomMetricsResource& get_custom_metrics() const {
      return custom_metrics_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ExperimentsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit ExperimentsResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~ExperimentsResource() {}


      /**
       * Creates a new ManagementResource_ExperimentsResource_DeleteMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to which the experiment belongs.
       * @param[in] web_property_id Web property ID to which the experiment
       * belongs.
       * @param[in] profile_id View (Profile) ID to which the experiment
       * belongs.
       * @param[in] experiment_id ID of the experiment to delete.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ExperimentsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const StringPiece& experiment_id) const;

      /**
       * Creates a new ManagementResource_ExperimentsResource_GetMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to retrieve the experiment for.
       * @param[in] web_property_id Web property ID to retrieve the experiment
       * for.
       * @param[in] profile_id View (Profile) ID to retrieve the experiment for.
       * @param[in] experiment_id Experiment ID to retrieve the experiment for.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ExperimentsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const StringPiece& experiment_id) const;

      /**
       * Creates a new ManagementResource_ExperimentsResource_InsertMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to create the experiment for.
       * @param[in] web_property_id Web property ID to create the experiment
       * for.
       * @param[in] profile_id View (Profile) ID to create the experiment for.
       * @param[in] _content_ The data object to insert.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ExperimentsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const Experiment& _content_) const;

      /**
       * Creates a new ManagementResource_ExperimentsResource_ListMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to retrieve experiments for.
       * @param[in] web_property_id Web property ID to retrieve experiments for.
       * @param[in] profile_id View (Profile) ID to retrieve experiments for.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ExperimentsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id) const;

      /**
       * Creates a new ManagementResource_ExperimentsResource_PatchMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID of the experiment to update.
       * @param[in] web_property_id Web property ID of the experiment to update.
       * @param[in] profile_id View (Profile) ID of the experiment to update.
       * @param[in] experiment_id Experiment ID of the experiment to update.
       * @param[in] _content_ The data object to patch.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ExperimentsResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const StringPiece& experiment_id,
          const Experiment& _content_) const;

      /**
       * Creates a new ManagementResource_ExperimentsResource_UpdateMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID of the experiment to update.
       * @param[in] web_property_id Web property ID of the experiment to update.
       * @param[in] profile_id View (Profile) ID of the experiment to update.
       * @param[in] experiment_id Experiment ID of the experiment to update.
       * @param[in] _content_ The data object to update.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ExperimentsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const StringPiece& experiment_id,
          const Experiment& _content_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(ExperimentsResource);
    };
    /**
     * Gets the experiments resource method factory.
     *
     * @return ExperimentsResource for creating methods.
     */
    const ExperimentsResource& get_experiments() const {
      return experiments_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class FiltersResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit FiltersResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~FiltersResource() {}


      /**
       * Creates a new ManagementResource_FiltersResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to delete the filter for.
       * @param[in] filter_id ID of the filter to be deleted.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_FiltersResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& filter_id) const;

      /**
       * Creates a new ManagementResource_FiltersResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to retrieve filters for.
       * @param[in] filter_id Filter ID to retrieve filters for.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_FiltersResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& filter_id) const;

      /**
       * Creates a new ManagementResource_FiltersResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to create filter for.
       * @param[in] _content_ The data object to insert.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_FiltersResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const Filter& _content_) const;

      /**
       * Creates a new ManagementResource_FiltersResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to retrieve filters for.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_FiltersResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id) const;

      /**
       * Creates a new ManagementResource_FiltersResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to which the filter belongs.
       * @param[in] filter_id ID of the filter to be updated.
       * @param[in] _content_ The data object to patch.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_FiltersResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& filter_id,
          const Filter& _content_) const;

      /**
       * Creates a new ManagementResource_FiltersResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to which the filter belongs.
       * @param[in] filter_id ID of the filter to be updated.
       * @param[in] _content_ The data object to update.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_FiltersResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& filter_id,
          const Filter& _content_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(FiltersResource);
    };
    /**
     * Gets the filters resource method factory.
     *
     * @return FiltersResource for creating methods.
     */
    const FiltersResource& get_filters() const {
      return filters_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class GoalsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit GoalsResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~GoalsResource() {}


      /**
       * Creates a new ManagementResource_GoalsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to retrieve the goal for.
       * @param[in] web_property_id Web property ID to retrieve the goal for.
       * @param[in] profile_id View (Profile) ID to retrieve the goal for.
       * @param[in] goal_id Goal ID to retrieve the goal for.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_GoalsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const StringPiece& goal_id) const;

      /**
       * Creates a new ManagementResource_GoalsResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to create the goal for.
       * @param[in] web_property_id Web property ID to create the goal for.
       * @param[in] profile_id View (Profile) ID to create the goal for.
       * @param[in] _content_ The data object to insert.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_GoalsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const Goal& _content_) const;

      /**
       * Creates a new ManagementResource_GoalsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to retrieve goals for. Can either be a
       * specific account ID or '~all', which refers to all the accounts that
       * user has access to.
       * @param[in] web_property_id Web property ID to retrieve goals for. Can
       * either be a specific web property ID or '~all', which refers to all the
       * web properties that user has access to.
       * @param[in] profile_id View (Profile) ID to retrieve goals for. Can
       * either be a specific view (profile) ID or '~all', which refers to all
       * the views (profiles) that user has access to.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_GoalsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id) const;

      /**
       * Creates a new ManagementResource_GoalsResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to update the goal.
       * @param[in] web_property_id Web property ID to update the goal.
       * @param[in] profile_id View (Profile) ID to update the goal.
       * @param[in] goal_id Index of the goal to be updated.
       * @param[in] _content_ The data object to patch.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_GoalsResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const StringPiece& goal_id,
          const Goal& _content_) const;

      /**
       * Creates a new ManagementResource_GoalsResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to update the goal.
       * @param[in] web_property_id Web property ID to update the goal.
       * @param[in] profile_id View (Profile) ID to update the goal.
       * @param[in] goal_id Index of the goal to be updated.
       * @param[in] _content_ The data object to update.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_GoalsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const StringPiece& goal_id,
          const Goal& _content_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(GoalsResource);
    };
    /**
     * Gets the goals resource method factory.
     *
     * @return GoalsResource for creating methods.
     */
    const GoalsResource& get_goals() const {
      return goals_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ProfileFilterLinksResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit ProfileFilterLinksResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~ProfileFilterLinksResource() {}


      /**
       * Creates a new
       * ManagementResource_ProfileFilterLinksResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to which the profile filter link
       * belongs.
       * @param[in] web_property_id Web property Id to which the profile filter
       * link belongs.
       * @param[in] profile_id Profile ID to which the filter link belongs.
       * @param[in] link_id ID of the profile filter link to delete.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfileFilterLinksResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const StringPiece& link_id) const;

      /**
       * Creates a new ManagementResource_ProfileFilterLinksResource_GetMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to retrieve profile filter link for.
       * @param[in] web_property_id Web property Id to retrieve profile filter
       * link for.
       * @param[in] profile_id Profile ID to retrieve filter link for.
       * @param[in] link_id ID of the profile filter link.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfileFilterLinksResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const StringPiece& link_id) const;

      /**
       * Creates a new
       * ManagementResource_ProfileFilterLinksResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to create profile filter link for.
       * @param[in] web_property_id Web property Id to create profile filter
       * link for.
       * @param[in] profile_id Profile ID to create filter link for.
       * @param[in] _content_ The data object to insert.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfileFilterLinksResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const ProfileFilterLink& _content_) const;

      /**
       * Creates a new ManagementResource_ProfileFilterLinksResource_ListMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to retrieve profile filter links for.
       * @param[in] web_property_id Web property Id for profile filter links
       * for. Can either be a specific web property ID or '~all', which refers
       * to all the web properties that user has access to.
       * @param[in] profile_id Profile ID to retrieve filter links for. Can
       * either be a specific profile ID or '~all', which refers to all the
       * profiles that user has access to.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfileFilterLinksResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id) const;

      /**
       * Creates a new ManagementResource_ProfileFilterLinksResource_PatchMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to which profile filter link belongs.
       * @param[in] web_property_id Web property Id to which profile filter link
       * belongs.
       * @param[in] profile_id Profile ID to which filter link belongs.
       * @param[in] link_id ID of the profile filter link to be updated.
       * @param[in] _content_ The data object to patch.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfileFilterLinksResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const StringPiece& link_id,
          const ProfileFilterLink& _content_) const;

      /**
       * Creates a new
       * ManagementResource_ProfileFilterLinksResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to which profile filter link belongs.
       * @param[in] web_property_id Web property Id to which profile filter link
       * belongs.
       * @param[in] profile_id Profile ID to which filter link belongs.
       * @param[in] link_id ID of the profile filter link to be updated.
       * @param[in] _content_ The data object to update.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfileFilterLinksResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const StringPiece& link_id,
          const ProfileFilterLink& _content_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(ProfileFilterLinksResource);
    };
    /**
     * Gets the profileFilterLinks resource method factory.
     *
     * @return ProfileFilterLinksResource for creating methods.
     */
    const ProfileFilterLinksResource& get_profile_filter_links() const {
      return profile_filter_links_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ProfileUserLinksResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit ProfileUserLinksResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~ProfileUserLinksResource() {}


      /**
       * Creates a new ManagementResource_ProfileUserLinksResource_DeleteMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to delete the user link for.
       * @param[in] web_property_id Web Property ID to delete the user link for.
       * @param[in] profile_id View (Profile) ID to delete the user link for.
       * @param[in] link_id Link ID to delete the user link for.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfileUserLinksResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const StringPiece& link_id) const;

      /**
       * Creates a new ManagementResource_ProfileUserLinksResource_InsertMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to create the user link for.
       * @param[in] web_property_id Web Property ID to create the user link for.
       * @param[in] profile_id View (Profile) ID to create the user link for.
       * @param[in] _content_ The data object to insert.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfileUserLinksResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const EntityUserLink& _content_) const;

      /**
       * Creates a new ManagementResource_ProfileUserLinksResource_ListMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID which the given view (profile) belongs
       * to.
       * @param[in] web_property_id Web Property ID which the given view
       * (profile) belongs to. Can either be a specific web property ID or
       * '~all', which refers to all the web properties that user has access to.
       * @param[in] profile_id View (Profile) ID to retrieve the profile-user
       * links for. Can either be a specific profile ID or '~all', which refers
       * to all the profiles that user has access to.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfileUserLinksResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id) const;

      /**
       * Creates a new ManagementResource_ProfileUserLinksResource_UpdateMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to update the user link for.
       * @param[in] web_property_id Web Property ID to update the user link for.
       * @param[in] profile_id View (Profile ID) to update the user link for.
       * @param[in] link_id Link ID to update the user link for.
       * @param[in] _content_ The data object to update.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfileUserLinksResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const StringPiece& link_id,
          const EntityUserLink& _content_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(ProfileUserLinksResource);
    };
    /**
     * Gets the profileUserLinks resource method factory.
     *
     * @return ProfileUserLinksResource for creating methods.
     */
    const ProfileUserLinksResource& get_profile_user_links() const {
      return profile_user_links_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ProfilesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit ProfilesResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~ProfilesResource() {}


      /**
       * Creates a new ManagementResource_ProfilesResource_DeleteMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to delete the view (profile) for.
       * @param[in] web_property_id Web property ID to delete the view (profile)
       * for.
       * @param[in] profile_id ID of the view (profile) to be deleted.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfilesResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id) const;

      /**
       * Creates a new ManagementResource_ProfilesResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to retrieve the view (profile) for.
       * @param[in] web_property_id Web property ID to retrieve the view
       * (profile) for.
       * @param[in] profile_id View (Profile) ID to retrieve the view (profile)
       * for.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfilesResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id) const;

      /**
       * Creates a new ManagementResource_ProfilesResource_InsertMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to create the view (profile) for.
       * @param[in] web_property_id Web property ID to create the view (profile)
       * for.
       * @param[in] _content_ The data object to insert.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfilesResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const Profile& _content_) const;

      /**
       * Creates a new ManagementResource_ProfilesResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID for the view (profiles) to retrieve.
       * Can either be a specific account ID or '~all', which refers to all the
       * accounts to which the user has access.
       * @param[in] web_property_id Web property ID for the views (profiles) to
       * retrieve. Can either be a specific web property ID or '~all', which
       * refers to all the web properties to which the user has access.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfilesResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id) const;

      /**
       * Creates a new ManagementResource_ProfilesResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to which the view (profile) belongs.
       * @param[in] web_property_id Web property ID to which the view (profile)
       * belongs.
       * @param[in] profile_id ID of the view (profile) to be updated.
       * @param[in] _content_ The data object to patch.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfilesResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const Profile& _content_) const;

      /**
       * Creates a new ManagementResource_ProfilesResource_UpdateMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to which the view (profile) belongs.
       * @param[in] web_property_id Web property ID to which the view (profile)
       * belongs.
       * @param[in] profile_id ID of the view (profile) to be updated.
       * @param[in] _content_ The data object to update.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_ProfilesResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const Profile& _content_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(ProfilesResource);
    };
    /**
     * Gets the profiles resource method factory.
     *
     * @return ProfilesResource for creating methods.
     */
    const ProfilesResource& get_profiles() const {
      return profiles_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class RemarketingAudienceResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit RemarketingAudienceResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~RemarketingAudienceResource() {}


      /**
       * Creates a new
       * ManagementResource_RemarketingAudienceResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to which the remarketing audience
       * belongs.
       * @param[in] web_property_id Web property ID to which the remarketing
       * audience belongs.
       * @param[in] remarketing_audience_id The ID of the remarketing audience
       * to delete.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_RemarketingAudienceResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& remarketing_audience_id) const;

      /**
       * Creates a new ManagementResource_RemarketingAudienceResource_GetMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id The account ID of the remarketing audience to
       * retrieve.
       * @param[in] web_property_id The web property ID of the remarketing
       * audience to retrieve.
       * @param[in] remarketing_audience_id The ID of the remarketing audience
       * to retrieve.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_RemarketingAudienceResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& remarketing_audience_id) const;

      /**
       * Creates a new
       * ManagementResource_RemarketingAudienceResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id The account ID for which to create the
       * remarketing audience.
       * @param[in] web_property_id Web property ID for which to create the
       * remarketing audience.
       * @param[in] _content_ The data object to insert.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_RemarketingAudienceResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const RemarketingAudience& _content_) const;

      /**
       * Creates a new ManagementResource_RemarketingAudienceResource_ListMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id The account ID of the remarketing audiences to
       * retrieve.
       * @param[in] web_property_id The web property ID of the remarketing
       * audiences to retrieve.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_RemarketingAudienceResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id) const;

      /**
       * Creates a new
       * ManagementResource_RemarketingAudienceResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id The account ID of the remarketing audience to
       * update.
       * @param[in] web_property_id The web property ID of the remarketing
       * audience to update.
       * @param[in] remarketing_audience_id The ID of the remarketing audience
       * to update.
       * @param[in] _content_ The data object to patch.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_RemarketingAudienceResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& remarketing_audience_id,
          const RemarketingAudience& _content_) const;

      /**
       * Creates a new
       * ManagementResource_RemarketingAudienceResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id The account ID of the remarketing audience to
       * update.
       * @param[in] web_property_id The web property ID of the remarketing
       * audience to update.
       * @param[in] remarketing_audience_id The ID of the remarketing audience
       * to update.
       * @param[in] _content_ The data object to update.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_RemarketingAudienceResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& remarketing_audience_id,
          const RemarketingAudience& _content_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(RemarketingAudienceResource);
    };
    /**
     * Gets the remarketingAudience resource method factory.
     *
     * @return RemarketingAudienceResource for creating methods.
     */
    const RemarketingAudienceResource& get_remarketing_audience() const {
      return remarketing_audience_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class SegmentsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit SegmentsResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~SegmentsResource() {}


      /**
       * Creates a new ManagementResource_SegmentsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_SegmentsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(SegmentsResource);
    };
    /**
     * Gets the segments resource method factory.
     *
     * @return SegmentsResource for creating methods.
     */
    const SegmentsResource& get_segments() const {
      return segments_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class UnsampledReportsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit UnsampledReportsResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~UnsampledReportsResource() {}


      /**
       * Creates a new ManagementResource_UnsampledReportsResource_DeleteMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to delete the unsampled report for.
       * @param[in] web_property_id Web property ID to delete the unsampled
       * reports for.
       * @param[in] profile_id View (Profile) ID to delete the unsampled report
       * for.
       * @param[in] unsampled_report_id ID of the unsampled report to be
       * deleted.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_UnsampledReportsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const StringPiece& unsampled_report_id) const;

      /**
       * Creates a new ManagementResource_UnsampledReportsResource_GetMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to retrieve unsampled report for.
       * @param[in] web_property_id Web property ID to retrieve unsampled
       * reports for.
       * @param[in] profile_id View (Profile) ID to retrieve unsampled report
       * for.
       * @param[in] unsampled_report_id ID of the unsampled report to retrieve.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_UnsampledReportsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const StringPiece& unsampled_report_id) const;

      /**
       * Creates a new ManagementResource_UnsampledReportsResource_InsertMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to create the unsampled report for.
       * @param[in] web_property_id Web property ID to create the unsampled
       * report for.
       * @param[in] profile_id View (Profile) ID to create the unsampled report
       * for.
       * @param[in] _content_ The data object to insert.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_UnsampledReportsResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id,
          const UnsampledReport& _content_) const;

      /**
       * Creates a new ManagementResource_UnsampledReportsResource_ListMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to retrieve unsampled reports for.
       * Must be a specific account ID, ~all is not supported.
       * @param[in] web_property_id Web property ID to retrieve unsampled
       * reports for. Must be a specific web property ID, ~all is not supported.
       * @param[in] profile_id View (Profile) ID to retrieve unsampled reports
       * for. Must be a specific view (profile) ID, ~all is not supported.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_UnsampledReportsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& profile_id) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(UnsampledReportsResource);
    };
    /**
     * Gets the unsampledReports resource method factory.
     *
     * @return UnsampledReportsResource for creating methods.
     */
    const UnsampledReportsResource& get_unsampled_reports() const {
      return unsampled_reports_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class UploadsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit UploadsResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~UploadsResource() {}


      /**
       * Creates a new ManagementResource_UploadsResource_DeleteUploadDataMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account Id for the uploads to be deleted.
       * @param[in] web_property_id Web property Id for the uploads to be
       * deleted.
       * @param[in] custom_data_source_id Custom data source Id for the uploads
       * to be deleted.
       * @param[in] _content_ The data object to deleteUploadData.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_UploadsResource_DeleteUploadDataMethod* NewDeleteUploadDataMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& custom_data_source_id,
          const AnalyticsDataimportDeleteUploadDataRequest& _content_) const;

      /**
       * Creates a new ManagementResource_UploadsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account Id for the upload to retrieve.
       * @param[in] web_property_id Web property Id for the upload to retrieve.
       * @param[in] custom_data_source_id Custom data source Id for upload to
       * retrieve.
       * @param[in] upload_id Upload Id to retrieve.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_UploadsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& custom_data_source_id,
          const StringPiece& upload_id) const;

      /**
       * Creates a new ManagementResource_UploadsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account Id for the uploads to retrieve.
       * @param[in] web_property_id Web property Id for the uploads to retrieve.
       * @param[in] custom_data_source_id Custom data source Id for uploads to
       * retrieve.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_UploadsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& custom_data_source_id) const;

      /**
       * Creates a new ManagementResource_UploadsResource_UploadDataMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account Id associated with the upload.
       * @param[in] web_property_id Web property UA-string associated with the
       * upload.
       * @param[in] custom_data_source_id Custom data source Id to which the
       * data being uploaded belongs.
       * @param[in] _media_content_type_ The content type of the data in the
       * _media_content_reader_.
       * @param[in] _media_content_reader_ The media content to uploadData. If
       * this is NULL then do not upload any media and ignore
       * _media_content_type_.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_UploadsResource_UploadDataMethod* NewUploadDataMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& custom_data_source_id,
          const char* _media_content_type_,
          client::DataReader* _media_content_reader_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(UploadsResource);
    };
    /**
     * Gets the uploads resource method factory.
     *
     * @return UploadsResource for creating methods.
     */
    const UploadsResource& get_uploads() const {
      return uploads_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class WebPropertyAdWordsLinksResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit WebPropertyAdWordsLinksResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~WebPropertyAdWordsLinksResource() {}


      /**
       * Creates a new
       * ManagementResource_WebPropertyAdWordsLinksResource_DeleteMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id ID of the account which the given web property
       * belongs to.
       * @param[in] web_property_id Web property ID to delete the AdWords link
       * for.
       * @param[in] web_property_ad_words_link_id Web property AdWords link ID.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_WebPropertyAdWordsLinksResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& web_property_ad_words_link_id) const;

      /**
       * Creates a new
       * ManagementResource_WebPropertyAdWordsLinksResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id ID of the account which the given web property
       * belongs to.
       * @param[in] web_property_id Web property ID to retrieve the AdWords link
       * for.
       * @param[in] web_property_ad_words_link_id Web property-AdWords link ID.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_WebPropertyAdWordsLinksResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& web_property_ad_words_link_id) const;

      /**
       * Creates a new
       * ManagementResource_WebPropertyAdWordsLinksResource_InsertMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id ID of the Google Analytics account to create the
       * link for.
       * @param[in] web_property_id Web property ID to create the link for.
       * @param[in] _content_ The data object to insert.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_WebPropertyAdWordsLinksResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const EntityAdWordsLink& _content_) const;

      /**
       * Creates a new
       * ManagementResource_WebPropertyAdWordsLinksResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id ID of the account which the given web property
       * belongs to.
       * @param[in] web_property_id Web property ID to retrieve the AdWords
       * links for.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_WebPropertyAdWordsLinksResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id) const;

      /**
       * Creates a new
       * ManagementResource_WebPropertyAdWordsLinksResource_PatchMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id ID of the account which the given web property
       * belongs to.
       * @param[in] web_property_id Web property ID to retrieve the AdWords link
       * for.
       * @param[in] web_property_ad_words_link_id Web property-AdWords link ID.
       * @param[in] _content_ The data object to patch.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_WebPropertyAdWordsLinksResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& web_property_ad_words_link_id,
          const EntityAdWordsLink& _content_) const;

      /**
       * Creates a new
       * ManagementResource_WebPropertyAdWordsLinksResource_UpdateMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id ID of the account which the given web property
       * belongs to.
       * @param[in] web_property_id Web property ID to retrieve the AdWords link
       * for.
       * @param[in] web_property_ad_words_link_id Web property-AdWords link ID.
       * @param[in] _content_ The data object to update.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_WebPropertyAdWordsLinksResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& web_property_ad_words_link_id,
          const EntityAdWordsLink& _content_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(WebPropertyAdWordsLinksResource);
    };
    /**
     * Gets the webPropertyAdWordsLinks resource method factory.
     *
     * @return WebPropertyAdWordsLinksResource for creating methods.
     */
    const WebPropertyAdWordsLinksResource& get_web_property_ad_words_links() const {
      return web_property_ad_words_links_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class WebpropertiesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit WebpropertiesResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~WebpropertiesResource() {}


      /**
       * Creates a new ManagementResource_WebpropertiesResource_GetMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to retrieve the web property for.
       * @param[in] web_property_id ID to retrieve the web property for.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_WebpropertiesResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id) const;

      /**
       * Creates a new ManagementResource_WebpropertiesResource_InsertMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to create the web property for.
       * @param[in] _content_ The data object to insert.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_WebpropertiesResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const Webproperty& _content_) const;

      /**
       * Creates a new ManagementResource_WebpropertiesResource_ListMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to retrieve web properties for. Can
       * either be a specific account ID or '~all', which refers to all the
       * accounts that user has access to.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_WebpropertiesResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id) const;

      /**
       * Creates a new ManagementResource_WebpropertiesResource_PatchMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to which the web property belongs.
       * @param[in] web_property_id Web property ID.
       * @param[in] _content_ The data object to patch.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_WebpropertiesResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const Webproperty& _content_) const;

      /**
       * Creates a new ManagementResource_WebpropertiesResource_UpdateMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to which the web property belongs.
       * @param[in] web_property_id Web property ID.
       * @param[in] _content_ The data object to update.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_WebpropertiesResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const Webproperty& _content_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(WebpropertiesResource);
    };
    /**
     * Gets the webproperties resource method factory.
     *
     * @return WebpropertiesResource for creating methods.
     */
    const WebpropertiesResource& get_webproperties() const {
      return webproperties_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class WebpropertyUserLinksResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit WebpropertyUserLinksResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~WebpropertyUserLinksResource() {}


      /**
       * Creates a new
       * ManagementResource_WebpropertyUserLinksResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to delete the user link for.
       * @param[in] web_property_id Web Property ID to delete the user link for.
       * @param[in] link_id Link ID to delete the user link for.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_WebpropertyUserLinksResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& link_id) const;

      /**
       * Creates a new
       * ManagementResource_WebpropertyUserLinksResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to create the user link for.
       * @param[in] web_property_id Web Property ID to create the user link for.
       * @param[in] _content_ The data object to insert.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_WebpropertyUserLinksResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const EntityUserLink& _content_) const;

      /**
       * Creates a new
       * ManagementResource_WebpropertyUserLinksResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID which the given web property belongs
       * to.
       * @param[in] web_property_id Web Property ID for the webProperty-user
       * links to retrieve. Can either be a specific web property ID or '~all',
       * which refers to all the web properties that user has access to.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_WebpropertyUserLinksResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id) const;

      /**
       * Creates a new
       * ManagementResource_WebpropertyUserLinksResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] account_id Account ID to update the account-user link for.
       * @param[in] web_property_id Web property ID to update the account-user
       * link for.
       * @param[in] link_id Link ID to update the account-user link for.
       * @param[in] _content_ The data object to update.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ManagementResource_WebpropertyUserLinksResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& account_id,
          const StringPiece& web_property_id,
          const StringPiece& link_id,
          const EntityUserLink& _content_) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(WebpropertyUserLinksResource);
    };
    /**
     * Gets the webpropertyUserLinks resource method factory.
     *
     * @return WebpropertyUserLinksResource for creating methods.
     */
    const WebpropertyUserLinksResource& get_webproperty_user_links() const {
      return webproperty_user_links_;
    }



   private:
    AnalyticsService* service_;
    AccountSummariesResource account_summaries_;
    AccountUserLinksResource account_user_links_;
    AccountsResource accounts_;
    CustomDataSourcesResource custom_data_sources_;
    CustomDimensionsResource custom_dimensions_;
    CustomMetricsResource custom_metrics_;
    ExperimentsResource experiments_;
    FiltersResource filters_;
    GoalsResource goals_;
    ProfileFilterLinksResource profile_filter_links_;
    ProfileUserLinksResource profile_user_links_;
    ProfilesResource profiles_;
    RemarketingAudienceResource remarketing_audience_;
    SegmentsResource segments_;
    UnsampledReportsResource unsampled_reports_;
    UploadsResource uploads_;
    WebPropertyAdWordsLinksResource web_property_ad_words_links_;
    WebpropertiesResource webproperties_;
    WebpropertyUserLinksResource webproperty_user_links_;

    DISALLOW_COPY_AND_ASSIGN(ManagementResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class MetadataResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit MetadataResource(AnalyticsService* service);

    /**
     * Standard destructor.
     */
    ~MetadataResource() {}

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ColumnsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit ColumnsResource(AnalyticsService* service);

      /**
       * Standard destructor.
       */
      ~ColumnsResource() {}


      /**
       * Creates a new MetadataResource_ColumnsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] report_type Report type. Allowed Values: 'ga'. Where 'ga'
       * corresponds to the Core Reporting API.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      MetadataResource_ColumnsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& report_type) const;

     private:
      AnalyticsService* service_;

      DISALLOW_COPY_AND_ASSIGN(ColumnsResource);
    };
    /**
     * Gets the columns resource method factory.
     *
     * @return ColumnsResource for creating methods.
     */
    const ColumnsResource& get_columns() const {
      return columns_;
    }



   private:
    AnalyticsService* service_;
    ColumnsResource columns_;

    DISALLOW_COPY_AND_ASSIGN(MetadataResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class ProvisioningResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit ProvisioningResource(AnalyticsService* service);

    /**
     * Standard destructor.
     */
    ~ProvisioningResource() {}


    /**
     * Creates a new ProvisioningResource_CreateAccountTicketMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] _content_ The data object to createAccountTicket.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ProvisioningResource_CreateAccountTicketMethod* NewCreateAccountTicketMethod(
        client::AuthorizationCredential* _credential_,
        const AccountTicket& _content_) const;

   private:
    AnalyticsService* service_;

    DISALLOW_COPY_AND_ASSIGN(ProvisioningResource);
  };



  /**
   * Standard constructor.
   *
   * @param[in] transport  The transport to use when creating methods to invoke
   *                       on this service instance.
   */
  explicit AnalyticsService(client::HttpTransport* transport);

  /**
   * Standard destructor.
   */
  virtual ~AnalyticsService();

  /**
   * Gets the  resource method factory.
   *
   * @return DataResource for creating methods.
   */
  const DataResource& get_data() const {
    return data_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ManagementResource for creating methods.
   */
  const ManagementResource& get_management() const {
    return management_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return MetadataResource for creating methods.
   */
  const MetadataResource& get_metadata() const {
    return metadata_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ProvisioningResource for creating methods.
   */
  const ProvisioningResource& get_provisioning() const {
    return provisioning_;
  }

  /**
   * Declares the OAuth2.0 scopes used within Google Analytics API
   *
   * These scopes shoudl be used when asking for credentials to invoke methods
   * in the AnalyticsService.
   */
  class SCOPES {
   public:
    /**
     * View and manage your Google Analytics data.
     */
    static const char ANALYTICS[];

    /**
     * Edit Google Analytics management entities.
     */
    static const char ANALYTICS_EDIT[];

    /**
     * Manage Google Analytics Account users by email address.
     */
    static const char ANALYTICS_MANAGE_USERS[];

    /**
     * View Google Analytics user permissions.
     */
    static const char ANALYTICS_MANAGE_USERS_READONLY[];

    /**
     * Create a new Google Analytics account along with its default property and
     * view.
     */
    static const char ANALYTICS_PROVISION[];

    /**
     * View your Google Analytics data.
     */
    static const char ANALYTICS_READONLY[];

   private:
    SCOPES();  // Never instantiated.
    ~SCOPES();  // Never instantiated.
  };

 private:
  DataResource data_;
  ManagementResource management_;
  MetadataResource metadata_;
  ProvisioningResource provisioning_;

  DISALLOW_COPY_AND_ASSIGN(AnalyticsService);
};


/**
 * @defgroup DataObject Google Analytics API Data Objects
 *
 * The data objects are used as parameters and responses from service requests.
 * For more information about using data objects, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceClass Google Analytics API Service
 *
 * The service classes contain information about accessing and using the
 * Google Analytics API cloud service.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceMethod Google Analytics API Service Methods
 *
 * The service method classes are used to create and invoke methods in the
 * AnalyticsService to access the Google Analytics API.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_ANALYTICS_SERVICE_H_
