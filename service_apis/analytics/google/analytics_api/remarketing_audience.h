// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_REMARKETING_AUDIENCE_H_
#define  GOOGLE_ANALYTICS_API_REMARKETING_AUDIENCE_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

#include "google/analytics_api/include_conditions.h"
#include "google/analytics_api/linked_foreign_account.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * JSON template for an Analytics remarketing audience.
 *
 * @ingroup DataObject
 */
class RemarketingAudience : public client::JsonCppData {
 public:
  /**
   * The simple audience definition that will cause a user to be added to an
   * audience.
   *
   * @ingroup DataObject
   */
  class RemarketingAudienceAudienceDefinition : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static RemarketingAudienceAudienceDefinition* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit RemarketingAudienceAudienceDefinition(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit RemarketingAudienceAudienceDefinition(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~RemarketingAudienceAudienceDefinition();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return
     * <code>google_analytics_api::RemarketingAudienceAudienceDefinition</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::RemarketingAudienceAudienceDefinition";
    }

    /**
     * Determine if the '<code>includeConditions</code>' attribute was set.
     *
     * @return true if the '<code>includeConditions</code>' attribute was set.
     */
    bool has_include_conditions() const {
      return Storage().isMember("includeConditions");
    }

    /**
     * Clears the '<code>includeConditions</code>' attribute.
     */
    void clear_include_conditions() {
      MutableStorage()->removeMember("includeConditions");
    }


    /**
     * Get a reference to the value of the '<code>includeConditions</code>'
     * attribute.
     */
    const IncludeConditions get_include_conditions() const;

    /**
     * Gets a reference to a mutable value of the
     * '<code>includeConditions</code>' property.
     *
     * Defines the conditions to include users to the audience.
     *
     * @return The result can be modified to change the attribute value.
     */
    IncludeConditions mutable_includeConditions();

   private:
    void operator=(const RemarketingAudienceAudienceDefinition&);
  };  // RemarketingAudienceAudienceDefinition
  /**
   * A state based audience definition that will cause a user to be added or
   * removed from an audience.
   *
   * @ingroup DataObject
   */
  class RemarketingAudienceStateBasedAudienceDefinition : public client::JsonCppData {
   public:
    /**
     * Defines the conditions to exclude users from the audience.
     *
     * @ingroup DataObject
     */
    class RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions : public client::JsonCppData {
     public:
      /**
       * Creates a new default instance.
       *
       * @return Ownership is passed back to the caller.
       */
      static RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions* New();

      /**
       * Standard constructor for an immutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions(const Json::Value& storage);

      /**
       * Standard constructor for a mutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions(Json::Value* storage);

      /**
       * Standard destructor.
       */
      virtual ~RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions();

      /**
       * Returns a string denoting the type of this data object.
       *
       * @return <code>google_analytics_api::RemarketingAudienceStateBasedAudien
       * ceDefinitionExcludeConditions</code>
       */
      const char* GetTypeName() const {
        return "google_analytics_api::RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions";
      }

      /**
       * Determine if the '<code>exclusionDuration</code>' attribute was set.
       *
       * @return true if the '<code>exclusionDuration</code>' attribute was set.
       */
      bool has_exclusion_duration() const {
        return Storage().isMember("exclusionDuration");
      }

      /**
       * Clears the '<code>exclusionDuration</code>' attribute.
       */
      void clear_exclusion_duration() {
        MutableStorage()->removeMember("exclusionDuration");
      }


      /**
       * Get the value of the '<code>exclusionDuration</code>' attribute.
       */
      const StringPiece get_exclusion_duration() const {
        const Json::Value& v = Storage("exclusionDuration");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>exclusionDuration</code>' attribute.
       *
       * Whether to make the exclusion TEMPORARY or PERMANENT.
       *
       * @param[in] value The new value.
       */
      void set_exclusion_duration(const StringPiece& value) {
        *MutableStorage("exclusionDuration") = value.data();
      }

      /**
       * Determine if the '<code>segment</code>' attribute was set.
       *
       * @return true if the '<code>segment</code>' attribute was set.
       */
      bool has_segment() const {
        return Storage().isMember("segment");
      }

      /**
       * Clears the '<code>segment</code>' attribute.
       */
      void clear_segment() {
        MutableStorage()->removeMember("segment");
      }


      /**
       * Get the value of the '<code>segment</code>' attribute.
       */
      const StringPiece get_segment() const {
        const Json::Value& v = Storage("segment");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>segment</code>' attribute.
       *
       * The segment condition that will cause a user to be removed from an
       * audience.
       *
       * @param[in] value The new value.
       */
      void set_segment(const StringPiece& value) {
        *MutableStorage("segment") = value.data();
      }

     private:
      void operator=(const RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions&);
    };  // RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static RemarketingAudienceStateBasedAudienceDefinition* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit RemarketingAudienceStateBasedAudienceDefinition(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit RemarketingAudienceStateBasedAudienceDefinition(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~RemarketingAudienceStateBasedAudienceDefinition();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::RemarketingAudienceStateBasedAudience
     * Definition</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::RemarketingAudienceStateBasedAudienceDefinition";
    }

    /**
     * Determine if the '<code>excludeConditions</code>' attribute was set.
     *
     * @return true if the '<code>excludeConditions</code>' attribute was set.
     */
    bool has_exclude_conditions() const {
      return Storage().isMember("excludeConditions");
    }

    /**
     * Clears the '<code>excludeConditions</code>' attribute.
     */
    void clear_exclude_conditions() {
      MutableStorage()->removeMember("excludeConditions");
    }


    /**
     * Get a reference to the value of the '<code>excludeConditions</code>'
     * attribute.
     */
    const RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions get_exclude_conditions() const {
       const Json::Value& storage = Storage("excludeConditions");
      return client::JsonValueToCppValueHelper<RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions >(storage);
    }

    /**
     * Gets a reference to a mutable value of the
     * '<code>excludeConditions</code>' property.
     *
     * Defines the conditions to exclude users from the audience.
     *
     * @return The result can be modified to change the attribute value.
     */
    RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions mutable_excludeConditions() {
      Json::Value* storage = MutableStorage("excludeConditions");
      return client::JsonValueToMutableCppValueHelper<RemarketingAudienceStateBasedAudienceDefinitionExcludeConditions >(storage);
    }

    /**
     * Determine if the '<code>includeConditions</code>' attribute was set.
     *
     * @return true if the '<code>includeConditions</code>' attribute was set.
     */
    bool has_include_conditions() const {
      return Storage().isMember("includeConditions");
    }

    /**
     * Clears the '<code>includeConditions</code>' attribute.
     */
    void clear_include_conditions() {
      MutableStorage()->removeMember("includeConditions");
    }


    /**
     * Get a reference to the value of the '<code>includeConditions</code>'
     * attribute.
     */
    const IncludeConditions get_include_conditions() const;

    /**
     * Gets a reference to a mutable value of the
     * '<code>includeConditions</code>' property.
     *
     * Defines the conditions to include users to the audience.
     *
     * @return The result can be modified to change the attribute value.
     */
    IncludeConditions mutable_includeConditions();

   private:
    void operator=(const RemarketingAudienceStateBasedAudienceDefinition&);
  };  // RemarketingAudienceStateBasedAudienceDefinition
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static RemarketingAudience* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit RemarketingAudience(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit RemarketingAudience(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~RemarketingAudience();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::RemarketingAudience</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::RemarketingAudience";
  }

  /**
   * Determine if the '<code>accountId</code>' attribute was set.
   *
   * @return true if the '<code>accountId</code>' attribute was set.
   */
  bool has_account_id() const {
    return Storage().isMember("accountId");
  }

  /**
   * Clears the '<code>accountId</code>' attribute.
   */
  void clear_account_id() {
    MutableStorage()->removeMember("accountId");
  }


  /**
   * Get the value of the '<code>accountId</code>' attribute.
   */
  const StringPiece get_account_id() const {
    const Json::Value& v = Storage("accountId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>accountId</code>' attribute.
   *
   * Account ID to which this remarketing audience belongs.
   *
   * @param[in] value The new value.
   */
  void set_account_id(const StringPiece& value) {
    *MutableStorage("accountId") = value.data();
  }

  /**
   * Determine if the '<code>audienceDefinition</code>' attribute was set.
   *
   * @return true if the '<code>audienceDefinition</code>' attribute was set.
   */
  bool has_audience_definition() const {
    return Storage().isMember("audienceDefinition");
  }

  /**
   * Clears the '<code>audienceDefinition</code>' attribute.
   */
  void clear_audience_definition() {
    MutableStorage()->removeMember("audienceDefinition");
  }


  /**
   * Get a reference to the value of the '<code>audienceDefinition</code>'
   * attribute.
   */
  const RemarketingAudienceAudienceDefinition get_audience_definition() const {
     const Json::Value& storage = Storage("audienceDefinition");
    return client::JsonValueToCppValueHelper<RemarketingAudienceAudienceDefinition >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>audienceDefinition</code>' property.
   *
   * The simple audience definition that will cause a user to be added to an
   * audience.
   *
   * @return The result can be modified to change the attribute value.
   */
  RemarketingAudienceAudienceDefinition mutable_audienceDefinition() {
    Json::Value* storage = MutableStorage("audienceDefinition");
    return client::JsonValueToMutableCppValueHelper<RemarketingAudienceAudienceDefinition >(storage);
  }

  /**
   * Determine if the '<code>audienceType</code>' attribute was set.
   *
   * @return true if the '<code>audienceType</code>' attribute was set.
   */
  bool has_audience_type() const {
    return Storage().isMember("audienceType");
  }

  /**
   * Clears the '<code>audienceType</code>' attribute.
   */
  void clear_audience_type() {
    MutableStorage()->removeMember("audienceType");
  }


  /**
   * Get the value of the '<code>audienceType</code>' attribute.
   */
  const StringPiece get_audience_type() const {
    const Json::Value& v = Storage("audienceType");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>audienceType</code>' attribute.
   *
   * The type of audience, either SIMPLE or STATE_BASED.
   *
   * @param[in] value The new value.
   */
  void set_audience_type(const StringPiece& value) {
    *MutableStorage("audienceType") = value.data();
  }

  /**
   * Determine if the '<code>created</code>' attribute was set.
   *
   * @return true if the '<code>created</code>' attribute was set.
   */
  bool has_created() const {
    return Storage().isMember("created");
  }

  /**
   * Clears the '<code>created</code>' attribute.
   */
  void clear_created() {
    MutableStorage()->removeMember("created");
  }


  /**
   * Get the value of the '<code>created</code>' attribute.
   */
  client::DateTime get_created() const {
    const Json::Value& storage = Storage("created");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>created</code>' attribute.
   *
   * Time this remarketing audience was created.
   *
   * @param[in] value The new value.
   */
  void set_created(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("created"));
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * The description of this remarketing audience.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * Remarketing Audience ID.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>internalWebPropertyId</code>' attribute was set.
   *
   * @return true if the '<code>internalWebPropertyId</code>' attribute was set.
   */
  bool has_internal_web_property_id() const {
    return Storage().isMember("internalWebPropertyId");
  }

  /**
   * Clears the '<code>internalWebPropertyId</code>' attribute.
   */
  void clear_internal_web_property_id() {
    MutableStorage()->removeMember("internalWebPropertyId");
  }


  /**
   * Get the value of the '<code>internalWebPropertyId</code>' attribute.
   */
  const StringPiece get_internal_web_property_id() const {
    const Json::Value& v = Storage("internalWebPropertyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>internalWebPropertyId</code>' attribute.
   *
   * Internal ID for the web property to which this remarketing audience
   * belongs.
   *
   * @param[in] value The new value.
   */
  void set_internal_web_property_id(const StringPiece& value) {
    *MutableStorage("internalWebPropertyId") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Collection type.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>linkedAdAccounts</code>' attribute was set.
   *
   * @return true if the '<code>linkedAdAccounts</code>' attribute was set.
   */
  bool has_linked_ad_accounts() const {
    return Storage().isMember("linkedAdAccounts");
  }

  /**
   * Clears the '<code>linkedAdAccounts</code>' attribute.
   */
  void clear_linked_ad_accounts() {
    MutableStorage()->removeMember("linkedAdAccounts");
  }


  /**
   * Get a reference to the value of the '<code>linkedAdAccounts</code>'
   * attribute.
   */
  const client::JsonCppArray<LinkedForeignAccount > get_linked_ad_accounts() const;

  /**
   * Gets a reference to a mutable value of the '<code>linkedAdAccounts</code>'
   * property.
   *
   * The linked ad accounts associated with this remarketing audience. A
   * remarketing audience can have only one linkedAdAccount currently.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<LinkedForeignAccount > mutable_linkedAdAccounts();

  /**
   * Determine if the '<code>linkedViews</code>' attribute was set.
   *
   * @return true if the '<code>linkedViews</code>' attribute was set.
   */
  bool has_linked_views() const {
    return Storage().isMember("linkedViews");
  }

  /**
   * Clears the '<code>linkedViews</code>' attribute.
   */
  void clear_linked_views() {
    MutableStorage()->removeMember("linkedViews");
  }


  /**
   * Get a reference to the value of the '<code>linkedViews</code>' attribute.
   */
  const client::JsonCppArray<string > get_linked_views() const {
     const Json::Value& storage = Storage("linkedViews");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>linkedViews</code>'
   * property.
   *
   * The views (profiles) that this remarketing audience is linked to.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_linkedViews() {
    Json::Value* storage = MutableStorage("linkedViews");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * The name of this remarketing audience.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>stateBasedAudienceDefinition</code>' attribute was
   * set.
   *
   * @return true if the '<code>stateBasedAudienceDefinition</code>' attribute
   * was set.
   */
  bool has_state_based_audience_definition() const {
    return Storage().isMember("stateBasedAudienceDefinition");
  }

  /**
   * Clears the '<code>stateBasedAudienceDefinition</code>' attribute.
   */
  void clear_state_based_audience_definition() {
    MutableStorage()->removeMember("stateBasedAudienceDefinition");
  }


  /**
   * Get a reference to the value of the
   * '<code>stateBasedAudienceDefinition</code>' attribute.
   */
  const RemarketingAudienceStateBasedAudienceDefinition get_state_based_audience_definition() const {
     const Json::Value& storage = Storage("stateBasedAudienceDefinition");
    return client::JsonValueToCppValueHelper<RemarketingAudienceStateBasedAudienceDefinition >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>stateBasedAudienceDefinition</code>' property.
   *
   * A state based audience definition that will cause a user to be added or
   * removed from an audience.
   *
   * @return The result can be modified to change the attribute value.
   */
  RemarketingAudienceStateBasedAudienceDefinition mutable_stateBasedAudienceDefinition() {
    Json::Value* storage = MutableStorage("stateBasedAudienceDefinition");
    return client::JsonValueToMutableCppValueHelper<RemarketingAudienceStateBasedAudienceDefinition >(storage);
  }

  /**
   * Determine if the '<code>updated</code>' attribute was set.
   *
   * @return true if the '<code>updated</code>' attribute was set.
   */
  bool has_updated() const {
    return Storage().isMember("updated");
  }

  /**
   * Clears the '<code>updated</code>' attribute.
   */
  void clear_updated() {
    MutableStorage()->removeMember("updated");
  }


  /**
   * Get the value of the '<code>updated</code>' attribute.
   */
  client::DateTime get_updated() const {
    const Json::Value& storage = Storage("updated");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>updated</code>' attribute.
   *
   * Time this remarketing audience was last modified.
   *
   * @param[in] value The new value.
   */
  void set_updated(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("updated"));
  }

  /**
   * Determine if the '<code>webPropertyId</code>' attribute was set.
   *
   * @return true if the '<code>webPropertyId</code>' attribute was set.
   */
  bool has_web_property_id() const {
    return Storage().isMember("webPropertyId");
  }

  /**
   * Clears the '<code>webPropertyId</code>' attribute.
   */
  void clear_web_property_id() {
    MutableStorage()->removeMember("webPropertyId");
  }


  /**
   * Get the value of the '<code>webPropertyId</code>' attribute.
   */
  const StringPiece get_web_property_id() const {
    const Json::Value& v = Storage("webPropertyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>webPropertyId</code>' attribute.
   *
   * Web property ID of the form UA-XXXXX-YY to which this remarketing audience
   * belongs.
   *
   * @param[in] value The new value.
   */
  void set_web_property_id(const StringPiece& value) {
    *MutableStorage("webPropertyId") = value.data();
  }

 private:
  void operator=(const RemarketingAudience&);
};  // RemarketingAudience
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_REMARKETING_AUDIENCE_H_
