// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_INCLUDE_CONDITIONS_H_
#define  GOOGLE_ANALYTICS_API_INCLUDE_CONDITIONS_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * JSON template for an Analytics Remarketing Include Conditions.
 *
 * @ingroup DataObject
 */
class IncludeConditions : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static IncludeConditions* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit IncludeConditions(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit IncludeConditions(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~IncludeConditions();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::IncludeConditions</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::IncludeConditions";
  }

  /**
   * Determine if the '<code>daysToLookBack</code>' attribute was set.
   *
   * @return true if the '<code>daysToLookBack</code>' attribute was set.
   */
  bool has_days_to_look_back() const {
    return Storage().isMember("daysToLookBack");
  }

  /**
   * Clears the '<code>daysToLookBack</code>' attribute.
   */
  void clear_days_to_look_back() {
    MutableStorage()->removeMember("daysToLookBack");
  }


  /**
   * Get the value of the '<code>daysToLookBack</code>' attribute.
   */
  int32 get_days_to_look_back() const {
    const Json::Value& storage = Storage("daysToLookBack");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>daysToLookBack</code>' attribute.
   *
   * The look-back window lets you specify a time frame for evaluating the
   * behavior that qualifies users for your audience. For example, if your
   * filters include users from Central Asia, and Transactions Greater than 2,
   * and you set the look-back window to 14 days, then any user from Central
   * Asia whose cumulative transactions exceed 2 during the last 14 days is
   * added to the audience.
   *
   * @param[in] value The new value.
   */
  void set_days_to_look_back(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("daysToLookBack"));
  }

  /**
   * Determine if the '<code>isSmartList</code>' attribute was set.
   *
   * @return true if the '<code>isSmartList</code>' attribute was set.
   */
  bool has_is_smart_list() const {
    return Storage().isMember("isSmartList");
  }

  /**
   * Clears the '<code>isSmartList</code>' attribute.
   */
  void clear_is_smart_list() {
    MutableStorage()->removeMember("isSmartList");
  }


  /**
   * Get the value of the '<code>isSmartList</code>' attribute.
   */
  bool get_is_smart_list() const {
    const Json::Value& storage = Storage("isSmartList");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>isSmartList</code>' attribute.
   *
   * Boolean indicating whether this segment is a smart list.
   * https://support.google.com/analytics/answer/4628577.
   *
   * @param[in] value The new value.
   */
  void set_is_smart_list(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("isSmartList"));
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Resource type for include conditions.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>membershipDurationDays</code>' attribute was set.
   *
   * @return true if the '<code>membershipDurationDays</code>' attribute was
   * set.
   */
  bool has_membership_duration_days() const {
    return Storage().isMember("membershipDurationDays");
  }

  /**
   * Clears the '<code>membershipDurationDays</code>' attribute.
   */
  void clear_membership_duration_days() {
    MutableStorage()->removeMember("membershipDurationDays");
  }


  /**
   * Get the value of the '<code>membershipDurationDays</code>' attribute.
   */
  int32 get_membership_duration_days() const {
    const Json::Value& storage = Storage("membershipDurationDays");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>membershipDurationDays</code>' attribute.
   *
   * Number of days (in the range 1 to 540) a user remains in the audience.
   *
   * @param[in] value The new value.
   */
  void set_membership_duration_days(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("membershipDurationDays"));
  }

  /**
   * Determine if the '<code>segment</code>' attribute was set.
   *
   * @return true if the '<code>segment</code>' attribute was set.
   */
  bool has_segment() const {
    return Storage().isMember("segment");
  }

  /**
   * Clears the '<code>segment</code>' attribute.
   */
  void clear_segment() {
    MutableStorage()->removeMember("segment");
  }


  /**
   * Get the value of the '<code>segment</code>' attribute.
   */
  const StringPiece get_segment() const {
    const Json::Value& v = Storage("segment");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>segment</code>' attribute.
   *
   * The segment condition that will cause a user to be added to an audience.
   *
   * @param[in] value The new value.
   */
  void set_segment(const StringPiece& value) {
    *MutableStorage("segment") = value.data();
  }

 private:
  void operator=(const IncludeConditions&);
};  // IncludeConditions
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_INCLUDE_CONDITIONS_H_
