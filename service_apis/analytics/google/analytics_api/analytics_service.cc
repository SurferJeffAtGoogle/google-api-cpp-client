// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.1
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#include "google/analytics_api/analytics_service.h"

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/media_uploader.h"
#include "googleapis/client/util/status.h"

#include "google/analytics_api/account_summaries.h"
#include "google/analytics_api/account_ticket.h"
#include "google/analytics_api/accounts.h"
#include "google/analytics_api/analytics_dataimport_delete_upload_data_request.h"
#include "google/analytics_api/columns.h"
#include "google/analytics_api/custom_data_sources.h"
#include "google/analytics_api/custom_dimension.h"
#include "google/analytics_api/custom_dimensions.h"
#include "google/analytics_api/custom_metric.h"
#include "google/analytics_api/custom_metrics.h"
#include "google/analytics_api/entity_ad_words_link.h"
#include "google/analytics_api/entity_ad_words_links.h"
#include "google/analytics_api/entity_user_link.h"
#include "google/analytics_api/entity_user_links.h"
#include "google/analytics_api/experiment.h"
#include "google/analytics_api/experiments.h"
#include "google/analytics_api/filter.h"
#include "google/analytics_api/filters.h"
#include "google/analytics_api/ga_data.h"
#include "google/analytics_api/goal.h"
#include "google/analytics_api/goals.h"
#include "google/analytics_api/mcf_data.h"
#include "google/analytics_api/profile.h"
#include "google/analytics_api/profile_filter_link.h"
#include "google/analytics_api/profile_filter_links.h"
#include "google/analytics_api/profiles.h"
#include "google/analytics_api/realtime_data.h"
#include "google/analytics_api/remarketing_audience.h"
#include "google/analytics_api/remarketing_audiences.h"
#include "google/analytics_api/segments.h"
#include "google/analytics_api/unsampled_report.h"
#include "google/analytics_api/unsampled_reports.h"
#include "google/analytics_api/upload.h"
#include "google/analytics_api/uploads.h"
#include "google/analytics_api/webproperties.h"
#include "google/analytics_api/webproperty.h"


#include "googleapis/client/data/data_reader.h"
#include "googleapis/client/transport/http_request.h"
#include "googleapis/client/transport/http_transport.h"
#include "googleapis/client/util/uri_utils.h"
#include "googleapis/strings/strcat.h"

namespace google_analytics_api {
using namespace googleapis;
const char AnalyticsService::googleapis_API_NAME[] = { "analytics" };

const char AnalyticsService::googleapis_API_VERSION[] = { "v3" };

const char AnalyticsService::googleapis_API_GENERATOR[] = {
  "google-apis-code-generator 1.5.1 / 0.1.5"};


const char AnalyticsService::SCOPES::ANALYTICS[] = {"https://www.googleapis.com/auth/analytics"};

const char AnalyticsService::SCOPES::ANALYTICS_EDIT[] = {"https://www.googleapis.com/auth/analytics.edit"};

const char AnalyticsService::SCOPES::ANALYTICS_MANAGE_USERS[] = {"https://www.googleapis.com/auth/analytics.manage.users"};

const char AnalyticsService::SCOPES::ANALYTICS_MANAGE_USERS_READONLY[] = {"https://www.googleapis.com/auth/analytics.manage.users.readonly"};

const char AnalyticsService::SCOPES::ANALYTICS_PROVISION[] = {"https://www.googleapis.com/auth/analytics.provision"};

const char AnalyticsService::SCOPES::ANALYTICS_READONLY[] = {"https://www.googleapis.com/auth/analytics.readonly"};
AnalyticsServiceBaseRequest::AnalyticsServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const string& uri_template)
    : client::ClientServiceRequest(
          service, credential, method, uri_template),
      alt_("json"),
      pretty_print_(false),
      _have_alt_(false),
      _have_fields_(false),
      _have_key_(false),
      _have_oauth_token_(false),
      _have_pretty_print_(false),
      _have_quota_user_(false),
      _have_user_ip_(false) {
}

AnalyticsServiceBaseRequest::~AnalyticsServiceBaseRequest() {
}

util::Status AnalyticsServiceBaseRequest::AppendVariable(
    const string& variable_name,
    const client::UriTemplateConfig& config,
    string* target) {
  return client::StatusInvalidArgument(
      StrCat("Unknown url variable='", variable_name, "'"));
}

util::Status AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(
    string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_alt_) {
    StrAppend(target, sep, "alt=",
              client::CppValueToEscapedUrlValue(
                alt_));
    sep = "&";
  }
  if (_have_fields_) {
    StrAppend(target, sep, "fields=",
              client::CppValueToEscapedUrlValue(
                fields_));
    sep = "&";
  }
  if (_have_key_) {
    StrAppend(target, sep, "key=",
              client::CppValueToEscapedUrlValue(
                key_));
    sep = "&";
  }
  if (_have_oauth_token_) {
    StrAppend(target, sep, "oauth_token=",
              client::CppValueToEscapedUrlValue(
                oauth_token_));
    sep = "&";
  }
  if (_have_pretty_print_) {
    StrAppend(target, sep, "prettyPrint=",
              client::CppValueToEscapedUrlValue(
                pretty_print_));
    sep = "&";
  }
  if (_have_quota_user_) {
    StrAppend(target, sep, "quotaUser=",
              client::CppValueToEscapedUrlValue(
                quota_user_));
    sep = "&";
  }
  if (_have_user_ip_) {
    StrAppend(target, sep, "userIp=",
              client::CppValueToEscapedUrlValue(
                user_ip_));
    sep = "&";
  }
  return client::ClientServiceRequest
         ::AppendOptionalQueryParameters(target);
}


void AnalyticsServiceBaseRequest::AddJsonContentToRequest(
    const client::JsonCppData *content) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
        client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(content->MakeJsonReader());
}






// Standard constructor.
DataResource_GaResource_GetMethod::DataResource_GaResource_GetMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& ids, const StringPiece& start_date, const StringPiece& end_date, const StringPiece& metrics)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "data/ga"),
      ids_(ids.as_string()),
      start_date_(start_date.as_string()),
      end_date_(end_date.as_string()),
      metrics_(metrics.as_string()),
      _have_dimensions_(false),
      _have_filters_(false),
      _have_include_empty_rows_(false),
      _have_max_results_(false),
      _have_output_(false),
      _have_sampling_level_(false),
      _have_segment_(false),
      _have_sort_(false),
      _have_start_index_(false) {
}

// Standard destructor.
DataResource_GaResource_GetMethod::~DataResource_GaResource_GetMethod() {
}

util::Status DataResource_GaResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "ids=",
              client::CppValueToEscapedUrlValue(
                ids_));
    sep = "&";
    StrAppend(target, sep, "start-date=",
              client::CppValueToEscapedUrlValue(
                start_date_));
    sep = "&";
    StrAppend(target, sep, "end-date=",
              client::CppValueToEscapedUrlValue(
                end_date_));
    sep = "&";
    StrAppend(target, sep, "metrics=",
              client::CppValueToEscapedUrlValue(
                metrics_));
    sep = "&";
  if (_have_dimensions_) {
    StrAppend(target, sep, "dimensions=",
              client::CppValueToEscapedUrlValue(
                dimensions_));
    sep = "&";
  }
  if (_have_filters_) {
    StrAppend(target, sep, "filters=",
              client::CppValueToEscapedUrlValue(
                filters_));
    sep = "&";
  }
  if (_have_include_empty_rows_) {
    StrAppend(target, sep, "include-empty-rows=",
              client::CppValueToEscapedUrlValue(
                include_empty_rows_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_output_) {
    StrAppend(target, sep, "output=",
              client::CppValueToEscapedUrlValue(
                output_));
    sep = "&";
  }
  if (_have_sampling_level_) {
    StrAppend(target, sep, "samplingLevel=",
              client::CppValueToEscapedUrlValue(
                sampling_level_));
    sep = "&";
  }
  if (_have_segment_) {
    StrAppend(target, sep, "segment=",
              client::CppValueToEscapedUrlValue(
                segment_));
    sep = "&";
  }
  if (_have_sort_) {
    StrAppend(target, sep, "sort=",
              client::CppValueToEscapedUrlValue(
                sort_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status DataResource_GaResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
DataResource_McfResource_GetMethod::DataResource_McfResource_GetMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& ids, const StringPiece& start_date, const StringPiece& end_date, const StringPiece& metrics)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "data/mcf"),
      ids_(ids.as_string()),
      start_date_(start_date.as_string()),
      end_date_(end_date.as_string()),
      metrics_(metrics.as_string()),
      _have_dimensions_(false),
      _have_filters_(false),
      _have_max_results_(false),
      _have_sampling_level_(false),
      _have_sort_(false),
      _have_start_index_(false) {
}

// Standard destructor.
DataResource_McfResource_GetMethod::~DataResource_McfResource_GetMethod() {
}

util::Status DataResource_McfResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "ids=",
              client::CppValueToEscapedUrlValue(
                ids_));
    sep = "&";
    StrAppend(target, sep, "start-date=",
              client::CppValueToEscapedUrlValue(
                start_date_));
    sep = "&";
    StrAppend(target, sep, "end-date=",
              client::CppValueToEscapedUrlValue(
                end_date_));
    sep = "&";
    StrAppend(target, sep, "metrics=",
              client::CppValueToEscapedUrlValue(
                metrics_));
    sep = "&";
  if (_have_dimensions_) {
    StrAppend(target, sep, "dimensions=",
              client::CppValueToEscapedUrlValue(
                dimensions_));
    sep = "&";
  }
  if (_have_filters_) {
    StrAppend(target, sep, "filters=",
              client::CppValueToEscapedUrlValue(
                filters_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_sampling_level_) {
    StrAppend(target, sep, "samplingLevel=",
              client::CppValueToEscapedUrlValue(
                sampling_level_));
    sep = "&";
  }
  if (_have_sort_) {
    StrAppend(target, sep, "sort=",
              client::CppValueToEscapedUrlValue(
                sort_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status DataResource_McfResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
DataResource_RealtimeResource_GetMethod::DataResource_RealtimeResource_GetMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& ids, const StringPiece& metrics)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "data/realtime"),
      ids_(ids.as_string()),
      metrics_(metrics.as_string()),
      _have_dimensions_(false),
      _have_filters_(false),
      _have_max_results_(false),
      _have_sort_(false) {
}

// Standard destructor.
DataResource_RealtimeResource_GetMethod::~DataResource_RealtimeResource_GetMethod() {
}

util::Status DataResource_RealtimeResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "ids=",
              client::CppValueToEscapedUrlValue(
                ids_));
    sep = "&";
    StrAppend(target, sep, "metrics=",
              client::CppValueToEscapedUrlValue(
                metrics_));
    sep = "&";
  if (_have_dimensions_) {
    StrAppend(target, sep, "dimensions=",
              client::CppValueToEscapedUrlValue(
                dimensions_));
    sep = "&";
  }
  if (_have_filters_) {
    StrAppend(target, sep, "filters=",
              client::CppValueToEscapedUrlValue(
                filters_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_sort_) {
    StrAppend(target, sep, "sort=",
              client::CppValueToEscapedUrlValue(
                sort_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status DataResource_RealtimeResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}





// Standard constructor.
ManagementResource_AccountSummariesResource_ListMethod::ManagementResource_AccountSummariesResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accountSummaries"),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_AccountSummariesResource_ListMethod::~ManagementResource_AccountSummariesResource_ListMethod() {
}

util::Status ManagementResource_AccountSummariesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_AccountSummariesResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_AccountUserLinksResource_DeleteMethod::ManagementResource_AccountUserLinksResource_DeleteMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& link_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "management/accounts/{accountId}/entityUserLinks/{linkId}"),
      account_id_(account_id.as_string()),
      link_id_(link_id.as_string()) {
}

// Standard destructor.
ManagementResource_AccountUserLinksResource_DeleteMethod::~ManagementResource_AccountUserLinksResource_DeleteMethod() {
}


util::Status ManagementResource_AccountUserLinksResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "linkId") {
    client::UriTemplate::AppendValue(
        link_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_AccountUserLinksResource_InsertMethod::ManagementResource_AccountUserLinksResource_InsertMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const EntityUserLink& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/entityUserLinks"),
      account_id_(account_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_AccountUserLinksResource_InsertMethod::~ManagementResource_AccountUserLinksResource_InsertMethod() {
}


util::Status ManagementResource_AccountUserLinksResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_AccountUserLinksResource_ListMethod::ManagementResource_AccountUserLinksResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/entityUserLinks"),
      account_id_(account_id.as_string()),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_AccountUserLinksResource_ListMethod::~ManagementResource_AccountUserLinksResource_ListMethod() {
}

util::Status ManagementResource_AccountUserLinksResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_AccountUserLinksResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_AccountUserLinksResource_UpdateMethod::ManagementResource_AccountUserLinksResource_UpdateMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& link_id, const EntityUserLink& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "management/accounts/{accountId}/entityUserLinks/{linkId}"),
      account_id_(account_id.as_string()),
      link_id_(link_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_AccountUserLinksResource_UpdateMethod::~ManagementResource_AccountUserLinksResource_UpdateMethod() {
}


util::Status ManagementResource_AccountUserLinksResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "linkId") {
    client::UriTemplate::AppendValue(
        link_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_AccountsResource_ListMethod::ManagementResource_AccountsResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts"),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_AccountsResource_ListMethod::~ManagementResource_AccountsResource_ListMethod() {
}

util::Status ManagementResource_AccountsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_AccountsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_CustomDataSourcesResource_ListMethod::ManagementResource_CustomDataSourcesResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_CustomDataSourcesResource_ListMethod::~ManagementResource_CustomDataSourcesResource_ListMethod() {
}

util::Status ManagementResource_CustomDataSourcesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_CustomDataSourcesResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_CustomDimensionsResource_GetMethod::ManagementResource_CustomDimensionsResource_GetMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_dimension_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      custom_dimension_id_(custom_dimension_id.as_string()) {
}

// Standard destructor.
ManagementResource_CustomDimensionsResource_GetMethod::~ManagementResource_CustomDimensionsResource_GetMethod() {
}


util::Status ManagementResource_CustomDimensionsResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "customDimensionId") {
    client::UriTemplate::AppendValue(
        custom_dimension_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_CustomDimensionsResource_InsertMethod::ManagementResource_CustomDimensionsResource_InsertMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const CustomDimension& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_CustomDimensionsResource_InsertMethod::~ManagementResource_CustomDimensionsResource_InsertMethod() {
}


util::Status ManagementResource_CustomDimensionsResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_CustomDimensionsResource_ListMethod::ManagementResource_CustomDimensionsResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_CustomDimensionsResource_ListMethod::~ManagementResource_CustomDimensionsResource_ListMethod() {
}

util::Status ManagementResource_CustomDimensionsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_CustomDimensionsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_CustomDimensionsResource_PatchMethod::ManagementResource_CustomDimensionsResource_PatchMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_dimension_id, const CustomDimension& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      custom_dimension_id_(custom_dimension_id.as_string()),
      ignore_custom_data_source_links_(false),
      _have_ignore_custom_data_source_links_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_CustomDimensionsResource_PatchMethod::~ManagementResource_CustomDimensionsResource_PatchMethod() {
}

util::Status ManagementResource_CustomDimensionsResource_PatchMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_ignore_custom_data_source_links_) {
    StrAppend(target, sep, "ignoreCustomDataSourceLinks=",
              client::CppValueToEscapedUrlValue(
                ignore_custom_data_source_links_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_CustomDimensionsResource_PatchMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "customDimensionId") {
    client::UriTemplate::AppendValue(
        custom_dimension_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_CustomDimensionsResource_UpdateMethod::ManagementResource_CustomDimensionsResource_UpdateMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_dimension_id, const CustomDimension& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      custom_dimension_id_(custom_dimension_id.as_string()),
      ignore_custom_data_source_links_(false),
      _have_ignore_custom_data_source_links_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_CustomDimensionsResource_UpdateMethod::~ManagementResource_CustomDimensionsResource_UpdateMethod() {
}

util::Status ManagementResource_CustomDimensionsResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_ignore_custom_data_source_links_) {
    StrAppend(target, sep, "ignoreCustomDataSourceLinks=",
              client::CppValueToEscapedUrlValue(
                ignore_custom_data_source_links_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_CustomDimensionsResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "customDimensionId") {
    client::UriTemplate::AppendValue(
        custom_dimension_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_CustomMetricsResource_GetMethod::ManagementResource_CustomMetricsResource_GetMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_metric_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      custom_metric_id_(custom_metric_id.as_string()) {
}

// Standard destructor.
ManagementResource_CustomMetricsResource_GetMethod::~ManagementResource_CustomMetricsResource_GetMethod() {
}


util::Status ManagementResource_CustomMetricsResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "customMetricId") {
    client::UriTemplate::AppendValue(
        custom_metric_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_CustomMetricsResource_InsertMethod::ManagementResource_CustomMetricsResource_InsertMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const CustomMetric& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_CustomMetricsResource_InsertMethod::~ManagementResource_CustomMetricsResource_InsertMethod() {
}


util::Status ManagementResource_CustomMetricsResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_CustomMetricsResource_ListMethod::ManagementResource_CustomMetricsResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_CustomMetricsResource_ListMethod::~ManagementResource_CustomMetricsResource_ListMethod() {
}

util::Status ManagementResource_CustomMetricsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_CustomMetricsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_CustomMetricsResource_PatchMethod::ManagementResource_CustomMetricsResource_PatchMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_metric_id, const CustomMetric& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      custom_metric_id_(custom_metric_id.as_string()),
      ignore_custom_data_source_links_(false),
      _have_ignore_custom_data_source_links_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_CustomMetricsResource_PatchMethod::~ManagementResource_CustomMetricsResource_PatchMethod() {
}

util::Status ManagementResource_CustomMetricsResource_PatchMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_ignore_custom_data_source_links_) {
    StrAppend(target, sep, "ignoreCustomDataSourceLinks=",
              client::CppValueToEscapedUrlValue(
                ignore_custom_data_source_links_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_CustomMetricsResource_PatchMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "customMetricId") {
    client::UriTemplate::AppendValue(
        custom_metric_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_CustomMetricsResource_UpdateMethod::ManagementResource_CustomMetricsResource_UpdateMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_metric_id, const CustomMetric& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      custom_metric_id_(custom_metric_id.as_string()),
      ignore_custom_data_source_links_(false),
      _have_ignore_custom_data_source_links_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_CustomMetricsResource_UpdateMethod::~ManagementResource_CustomMetricsResource_UpdateMethod() {
}

util::Status ManagementResource_CustomMetricsResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_ignore_custom_data_source_links_) {
    StrAppend(target, sep, "ignoreCustomDataSourceLinks=",
              client::CppValueToEscapedUrlValue(
                ignore_custom_data_source_links_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_CustomMetricsResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "customMetricId") {
    client::UriTemplate::AppendValue(
        custom_metric_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_ExperimentsResource_DeleteMethod::ManagementResource_ExperimentsResource_DeleteMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& experiment_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      experiment_id_(experiment_id.as_string()) {
}

// Standard destructor.
ManagementResource_ExperimentsResource_DeleteMethod::~ManagementResource_ExperimentsResource_DeleteMethod() {
}


util::Status ManagementResource_ExperimentsResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "experimentId") {
    client::UriTemplate::AppendValue(
        experiment_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ExperimentsResource_GetMethod::ManagementResource_ExperimentsResource_GetMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& experiment_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      experiment_id_(experiment_id.as_string()) {
}

// Standard destructor.
ManagementResource_ExperimentsResource_GetMethod::~ManagementResource_ExperimentsResource_GetMethod() {
}


util::Status ManagementResource_ExperimentsResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "experimentId") {
    client::UriTemplate::AppendValue(
        experiment_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ExperimentsResource_InsertMethod::ManagementResource_ExperimentsResource_InsertMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const Experiment& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_ExperimentsResource_InsertMethod::~ManagementResource_ExperimentsResource_InsertMethod() {
}


util::Status ManagementResource_ExperimentsResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ExperimentsResource_ListMethod::ManagementResource_ExperimentsResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_ExperimentsResource_ListMethod::~ManagementResource_ExperimentsResource_ListMethod() {
}

util::Status ManagementResource_ExperimentsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_ExperimentsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ExperimentsResource_PatchMethod::ManagementResource_ExperimentsResource_PatchMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& experiment_id, const Experiment& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      experiment_id_(experiment_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_ExperimentsResource_PatchMethod::~ManagementResource_ExperimentsResource_PatchMethod() {
}


util::Status ManagementResource_ExperimentsResource_PatchMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "experimentId") {
    client::UriTemplate::AppendValue(
        experiment_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ExperimentsResource_UpdateMethod::ManagementResource_ExperimentsResource_UpdateMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& experiment_id, const Experiment& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      experiment_id_(experiment_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_ExperimentsResource_UpdateMethod::~ManagementResource_ExperimentsResource_UpdateMethod() {
}


util::Status ManagementResource_ExperimentsResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "experimentId") {
    client::UriTemplate::AppendValue(
        experiment_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_FiltersResource_DeleteMethod::ManagementResource_FiltersResource_DeleteMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& filter_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "management/accounts/{accountId}/filters/{filterId}"),
      account_id_(account_id.as_string()),
      filter_id_(filter_id.as_string()) {
}

// Standard destructor.
ManagementResource_FiltersResource_DeleteMethod::~ManagementResource_FiltersResource_DeleteMethod() {
}


util::Status ManagementResource_FiltersResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "filterId") {
    client::UriTemplate::AppendValue(
        filter_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_FiltersResource_GetMethod::ManagementResource_FiltersResource_GetMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& filter_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/filters/{filterId}"),
      account_id_(account_id.as_string()),
      filter_id_(filter_id.as_string()) {
}

// Standard destructor.
ManagementResource_FiltersResource_GetMethod::~ManagementResource_FiltersResource_GetMethod() {
}


util::Status ManagementResource_FiltersResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "filterId") {
    client::UriTemplate::AppendValue(
        filter_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_FiltersResource_InsertMethod::ManagementResource_FiltersResource_InsertMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const Filter& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/filters"),
      account_id_(account_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_FiltersResource_InsertMethod::~ManagementResource_FiltersResource_InsertMethod() {
}


util::Status ManagementResource_FiltersResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_FiltersResource_ListMethod::ManagementResource_FiltersResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/filters"),
      account_id_(account_id.as_string()),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_FiltersResource_ListMethod::~ManagementResource_FiltersResource_ListMethod() {
}

util::Status ManagementResource_FiltersResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_FiltersResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_FiltersResource_PatchMethod::ManagementResource_FiltersResource_PatchMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& filter_id, const Filter& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "management/accounts/{accountId}/filters/{filterId}"),
      account_id_(account_id.as_string()),
      filter_id_(filter_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_FiltersResource_PatchMethod::~ManagementResource_FiltersResource_PatchMethod() {
}


util::Status ManagementResource_FiltersResource_PatchMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "filterId") {
    client::UriTemplate::AppendValue(
        filter_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_FiltersResource_UpdateMethod::ManagementResource_FiltersResource_UpdateMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& filter_id, const Filter& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "management/accounts/{accountId}/filters/{filterId}"),
      account_id_(account_id.as_string()),
      filter_id_(filter_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_FiltersResource_UpdateMethod::~ManagementResource_FiltersResource_UpdateMethod() {
}


util::Status ManagementResource_FiltersResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "filterId") {
    client::UriTemplate::AppendValue(
        filter_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_GoalsResource_GetMethod::ManagementResource_GoalsResource_GetMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& goal_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      goal_id_(goal_id.as_string()) {
}

// Standard destructor.
ManagementResource_GoalsResource_GetMethod::~ManagementResource_GoalsResource_GetMethod() {
}


util::Status ManagementResource_GoalsResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "goalId") {
    client::UriTemplate::AppendValue(
        goal_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_GoalsResource_InsertMethod::ManagementResource_GoalsResource_InsertMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const Goal& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_GoalsResource_InsertMethod::~ManagementResource_GoalsResource_InsertMethod() {
}


util::Status ManagementResource_GoalsResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_GoalsResource_ListMethod::ManagementResource_GoalsResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_GoalsResource_ListMethod::~ManagementResource_GoalsResource_ListMethod() {
}

util::Status ManagementResource_GoalsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_GoalsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_GoalsResource_PatchMethod::ManagementResource_GoalsResource_PatchMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& goal_id, const Goal& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      goal_id_(goal_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_GoalsResource_PatchMethod::~ManagementResource_GoalsResource_PatchMethod() {
}


util::Status ManagementResource_GoalsResource_PatchMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "goalId") {
    client::UriTemplate::AppendValue(
        goal_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_GoalsResource_UpdateMethod::ManagementResource_GoalsResource_UpdateMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& goal_id, const Goal& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      goal_id_(goal_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_GoalsResource_UpdateMethod::~ManagementResource_GoalsResource_UpdateMethod() {
}


util::Status ManagementResource_GoalsResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "goalId") {
    client::UriTemplate::AppendValue(
        goal_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_ProfileFilterLinksResource_DeleteMethod::ManagementResource_ProfileFilterLinksResource_DeleteMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& link_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      link_id_(link_id.as_string()) {
}

// Standard destructor.
ManagementResource_ProfileFilterLinksResource_DeleteMethod::~ManagementResource_ProfileFilterLinksResource_DeleteMethod() {
}


util::Status ManagementResource_ProfileFilterLinksResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "linkId") {
    client::UriTemplate::AppendValue(
        link_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ProfileFilterLinksResource_GetMethod::ManagementResource_ProfileFilterLinksResource_GetMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& link_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      link_id_(link_id.as_string()) {
}

// Standard destructor.
ManagementResource_ProfileFilterLinksResource_GetMethod::~ManagementResource_ProfileFilterLinksResource_GetMethod() {
}


util::Status ManagementResource_ProfileFilterLinksResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "linkId") {
    client::UriTemplate::AppendValue(
        link_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ProfileFilterLinksResource_InsertMethod::ManagementResource_ProfileFilterLinksResource_InsertMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const ProfileFilterLink& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_ProfileFilterLinksResource_InsertMethod::~ManagementResource_ProfileFilterLinksResource_InsertMethod() {
}


util::Status ManagementResource_ProfileFilterLinksResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ProfileFilterLinksResource_ListMethod::ManagementResource_ProfileFilterLinksResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_ProfileFilterLinksResource_ListMethod::~ManagementResource_ProfileFilterLinksResource_ListMethod() {
}

util::Status ManagementResource_ProfileFilterLinksResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_ProfileFilterLinksResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ProfileFilterLinksResource_PatchMethod::ManagementResource_ProfileFilterLinksResource_PatchMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& link_id, const ProfileFilterLink& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      link_id_(link_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_ProfileFilterLinksResource_PatchMethod::~ManagementResource_ProfileFilterLinksResource_PatchMethod() {
}


util::Status ManagementResource_ProfileFilterLinksResource_PatchMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "linkId") {
    client::UriTemplate::AppendValue(
        link_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ProfileFilterLinksResource_UpdateMethod::ManagementResource_ProfileFilterLinksResource_UpdateMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& link_id, const ProfileFilterLink& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      link_id_(link_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_ProfileFilterLinksResource_UpdateMethod::~ManagementResource_ProfileFilterLinksResource_UpdateMethod() {
}


util::Status ManagementResource_ProfileFilterLinksResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "linkId") {
    client::UriTemplate::AppendValue(
        link_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_ProfileUserLinksResource_DeleteMethod::ManagementResource_ProfileUserLinksResource_DeleteMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& link_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      link_id_(link_id.as_string()) {
}

// Standard destructor.
ManagementResource_ProfileUserLinksResource_DeleteMethod::~ManagementResource_ProfileUserLinksResource_DeleteMethod() {
}


util::Status ManagementResource_ProfileUserLinksResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "linkId") {
    client::UriTemplate::AppendValue(
        link_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ProfileUserLinksResource_InsertMethod::ManagementResource_ProfileUserLinksResource_InsertMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const EntityUserLink& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_ProfileUserLinksResource_InsertMethod::~ManagementResource_ProfileUserLinksResource_InsertMethod() {
}


util::Status ManagementResource_ProfileUserLinksResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ProfileUserLinksResource_ListMethod::ManagementResource_ProfileUserLinksResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_ProfileUserLinksResource_ListMethod::~ManagementResource_ProfileUserLinksResource_ListMethod() {
}

util::Status ManagementResource_ProfileUserLinksResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_ProfileUserLinksResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ProfileUserLinksResource_UpdateMethod::ManagementResource_ProfileUserLinksResource_UpdateMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& link_id, const EntityUserLink& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      link_id_(link_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_ProfileUserLinksResource_UpdateMethod::~ManagementResource_ProfileUserLinksResource_UpdateMethod() {
}


util::Status ManagementResource_ProfileUserLinksResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "linkId") {
    client::UriTemplate::AppendValue(
        link_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_ProfilesResource_DeleteMethod::ManagementResource_ProfilesResource_DeleteMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()) {
}

// Standard destructor.
ManagementResource_ProfilesResource_DeleteMethod::~ManagementResource_ProfilesResource_DeleteMethod() {
}


util::Status ManagementResource_ProfilesResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ProfilesResource_GetMethod::ManagementResource_ProfilesResource_GetMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()) {
}

// Standard destructor.
ManagementResource_ProfilesResource_GetMethod::~ManagementResource_ProfilesResource_GetMethod() {
}


util::Status ManagementResource_ProfilesResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ProfilesResource_InsertMethod::ManagementResource_ProfilesResource_InsertMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const Profile& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_ProfilesResource_InsertMethod::~ManagementResource_ProfilesResource_InsertMethod() {
}


util::Status ManagementResource_ProfilesResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ProfilesResource_ListMethod::ManagementResource_ProfilesResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_ProfilesResource_ListMethod::~ManagementResource_ProfilesResource_ListMethod() {
}

util::Status ManagementResource_ProfilesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_ProfilesResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ProfilesResource_PatchMethod::ManagementResource_ProfilesResource_PatchMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const Profile& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_ProfilesResource_PatchMethod::~ManagementResource_ProfilesResource_PatchMethod() {
}


util::Status ManagementResource_ProfilesResource_PatchMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_ProfilesResource_UpdateMethod::ManagementResource_ProfilesResource_UpdateMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const Profile& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_ProfilesResource_UpdateMethod::~ManagementResource_ProfilesResource_UpdateMethod() {
}


util::Status ManagementResource_ProfilesResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_RemarketingAudienceResource_DeleteMethod::ManagementResource_RemarketingAudienceResource_DeleteMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& remarketing_audience_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      remarketing_audience_id_(remarketing_audience_id.as_string()) {
}

// Standard destructor.
ManagementResource_RemarketingAudienceResource_DeleteMethod::~ManagementResource_RemarketingAudienceResource_DeleteMethod() {
}


util::Status ManagementResource_RemarketingAudienceResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "remarketingAudienceId") {
    client::UriTemplate::AppendValue(
        remarketing_audience_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_RemarketingAudienceResource_GetMethod::ManagementResource_RemarketingAudienceResource_GetMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& remarketing_audience_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      remarketing_audience_id_(remarketing_audience_id.as_string()) {
}

// Standard destructor.
ManagementResource_RemarketingAudienceResource_GetMethod::~ManagementResource_RemarketingAudienceResource_GetMethod() {
}


util::Status ManagementResource_RemarketingAudienceResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "remarketingAudienceId") {
    client::UriTemplate::AppendValue(
        remarketing_audience_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_RemarketingAudienceResource_InsertMethod::ManagementResource_RemarketingAudienceResource_InsertMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const RemarketingAudience& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_RemarketingAudienceResource_InsertMethod::~ManagementResource_RemarketingAudienceResource_InsertMethod() {
}


util::Status ManagementResource_RemarketingAudienceResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_RemarketingAudienceResource_ListMethod::ManagementResource_RemarketingAudienceResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      type_("all"),
      _have_max_results_(false),
      _have_start_index_(false),
      _have_type_(false) {
}

// Standard destructor.
ManagementResource_RemarketingAudienceResource_ListMethod::~ManagementResource_RemarketingAudienceResource_ListMethod() {
}

util::Status ManagementResource_RemarketingAudienceResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  if (_have_type_) {
    StrAppend(target, sep, "type=",
              client::CppValueToEscapedUrlValue(
                type_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_RemarketingAudienceResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_RemarketingAudienceResource_PatchMethod::ManagementResource_RemarketingAudienceResource_PatchMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& remarketing_audience_id, const RemarketingAudience& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      remarketing_audience_id_(remarketing_audience_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_RemarketingAudienceResource_PatchMethod::~ManagementResource_RemarketingAudienceResource_PatchMethod() {
}


util::Status ManagementResource_RemarketingAudienceResource_PatchMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "remarketingAudienceId") {
    client::UriTemplate::AppendValue(
        remarketing_audience_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_RemarketingAudienceResource_UpdateMethod::ManagementResource_RemarketingAudienceResource_UpdateMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& remarketing_audience_id, const RemarketingAudience& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      remarketing_audience_id_(remarketing_audience_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_RemarketingAudienceResource_UpdateMethod::~ManagementResource_RemarketingAudienceResource_UpdateMethod() {
}


util::Status ManagementResource_RemarketingAudienceResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "remarketingAudienceId") {
    client::UriTemplate::AppendValue(
        remarketing_audience_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_SegmentsResource_ListMethod::ManagementResource_SegmentsResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/segments"),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_SegmentsResource_ListMethod::~ManagementResource_SegmentsResource_ListMethod() {
}

util::Status ManagementResource_SegmentsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_SegmentsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_UnsampledReportsResource_DeleteMethod::ManagementResource_UnsampledReportsResource_DeleteMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& unsampled_report_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      unsampled_report_id_(unsampled_report_id.as_string()) {
}

// Standard destructor.
ManagementResource_UnsampledReportsResource_DeleteMethod::~ManagementResource_UnsampledReportsResource_DeleteMethod() {
}


util::Status ManagementResource_UnsampledReportsResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "unsampledReportId") {
    client::UriTemplate::AppendValue(
        unsampled_report_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_UnsampledReportsResource_GetMethod::ManagementResource_UnsampledReportsResource_GetMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& unsampled_report_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      unsampled_report_id_(unsampled_report_id.as_string()) {
}

// Standard destructor.
ManagementResource_UnsampledReportsResource_GetMethod::~ManagementResource_UnsampledReportsResource_GetMethod() {
}


util::Status ManagementResource_UnsampledReportsResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "unsampledReportId") {
    client::UriTemplate::AppendValue(
        unsampled_report_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_UnsampledReportsResource_InsertMethod::ManagementResource_UnsampledReportsResource_InsertMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const UnsampledReport& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_UnsampledReportsResource_InsertMethod::~ManagementResource_UnsampledReportsResource_InsertMethod() {
}


util::Status ManagementResource_UnsampledReportsResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_UnsampledReportsResource_ListMethod::ManagementResource_UnsampledReportsResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      profile_id_(profile_id.as_string()),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_UnsampledReportsResource_ListMethod::~ManagementResource_UnsampledReportsResource_ListMethod() {
}

util::Status ManagementResource_UnsampledReportsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_UnsampledReportsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "profileId") {
    client::UriTemplate::AppendValue(
        profile_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_UploadsResource_DeleteUploadDataMethod::ManagementResource_UploadsResource_DeleteUploadDataMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_data_source_id, const AnalyticsDataimportDeleteUploadDataRequest& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/deleteUploadData"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      custom_data_source_id_(custom_data_source_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_UploadsResource_DeleteUploadDataMethod::~ManagementResource_UploadsResource_DeleteUploadDataMethod() {
}


util::Status ManagementResource_UploadsResource_DeleteUploadDataMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "customDataSourceId") {
    client::UriTemplate::AppendValue(
        custom_data_source_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_UploadsResource_GetMethod::ManagementResource_UploadsResource_GetMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_data_source_id, const StringPiece& upload_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads/{uploadId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      custom_data_source_id_(custom_data_source_id.as_string()),
      upload_id_(upload_id.as_string()) {
}

// Standard destructor.
ManagementResource_UploadsResource_GetMethod::~ManagementResource_UploadsResource_GetMethod() {
}


util::Status ManagementResource_UploadsResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "customDataSourceId") {
    client::UriTemplate::AppendValue(
        custom_data_source_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "uploadId") {
    client::UriTemplate::AppendValue(
        upload_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_UploadsResource_ListMethod::ManagementResource_UploadsResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_data_source_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      custom_data_source_id_(custom_data_source_id.as_string()),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_UploadsResource_ListMethod::~ManagementResource_UploadsResource_ListMethod() {
}

util::Status ManagementResource_UploadsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_UploadsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "customDataSourceId") {
    client::UriTemplate::AppendValue(
        custom_data_source_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
ManagementResource_UploadsResource_UploadDataMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads", true);


// static
const client::MediaUploadSpec
ManagementResource_UploadsResource_UploadDataMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads", true);



// Standard constructor.
ManagementResource_UploadsResource_UploadDataMethod::ManagementResource_UploadsResource_UploadDataMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_data_source_id, const char* _media_content_type_, client::DataReader* _media_content_reader_)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      custom_data_source_id_(custom_data_source_id.as_string()) {
  if (_media_content_reader_) {
    client::MediaUploader* uploader =
        new client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            client::JoinPath(
                _service_->url_path(), "management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads"));
    uploader->set_media_content_reader(
        _media_content_type_, _media_content_reader_);
    ResetMediaUploader(uploader);
  }
}

// Standard destructor.
ManagementResource_UploadsResource_UploadDataMethod::~ManagementResource_UploadsResource_UploadDataMethod() {
}


util::Status ManagementResource_UploadsResource_UploadDataMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "customDataSourceId") {
    client::UriTemplate::AppendValue(
        custom_data_source_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_WebPropertyAdWordsLinksResource_DeleteMethod::ManagementResource_WebPropertyAdWordsLinksResource_DeleteMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& web_property_ad_words_link_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      web_property_ad_words_link_id_(web_property_ad_words_link_id.as_string()) {
}

// Standard destructor.
ManagementResource_WebPropertyAdWordsLinksResource_DeleteMethod::~ManagementResource_WebPropertyAdWordsLinksResource_DeleteMethod() {
}


util::Status ManagementResource_WebPropertyAdWordsLinksResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyAdWordsLinkId") {
    client::UriTemplate::AppendValue(
        web_property_ad_words_link_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_WebPropertyAdWordsLinksResource_GetMethod::ManagementResource_WebPropertyAdWordsLinksResource_GetMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& web_property_ad_words_link_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      web_property_ad_words_link_id_(web_property_ad_words_link_id.as_string()) {
}

// Standard destructor.
ManagementResource_WebPropertyAdWordsLinksResource_GetMethod::~ManagementResource_WebPropertyAdWordsLinksResource_GetMethod() {
}


util::Status ManagementResource_WebPropertyAdWordsLinksResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyAdWordsLinkId") {
    client::UriTemplate::AppendValue(
        web_property_ad_words_link_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_WebPropertyAdWordsLinksResource_InsertMethod::ManagementResource_WebPropertyAdWordsLinksResource_InsertMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const EntityAdWordsLink& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_WebPropertyAdWordsLinksResource_InsertMethod::~ManagementResource_WebPropertyAdWordsLinksResource_InsertMethod() {
}


util::Status ManagementResource_WebPropertyAdWordsLinksResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_WebPropertyAdWordsLinksResource_ListMethod::ManagementResource_WebPropertyAdWordsLinksResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_WebPropertyAdWordsLinksResource_ListMethod::~ManagementResource_WebPropertyAdWordsLinksResource_ListMethod() {
}

util::Status ManagementResource_WebPropertyAdWordsLinksResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_WebPropertyAdWordsLinksResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_WebPropertyAdWordsLinksResource_PatchMethod::ManagementResource_WebPropertyAdWordsLinksResource_PatchMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& web_property_ad_words_link_id, const EntityAdWordsLink& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      web_property_ad_words_link_id_(web_property_ad_words_link_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_WebPropertyAdWordsLinksResource_PatchMethod::~ManagementResource_WebPropertyAdWordsLinksResource_PatchMethod() {
}


util::Status ManagementResource_WebPropertyAdWordsLinksResource_PatchMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyAdWordsLinkId") {
    client::UriTemplate::AppendValue(
        web_property_ad_words_link_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_WebPropertyAdWordsLinksResource_UpdateMethod::ManagementResource_WebPropertyAdWordsLinksResource_UpdateMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& web_property_ad_words_link_id, const EntityAdWordsLink& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      web_property_ad_words_link_id_(web_property_ad_words_link_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_WebPropertyAdWordsLinksResource_UpdateMethod::~ManagementResource_WebPropertyAdWordsLinksResource_UpdateMethod() {
}


util::Status ManagementResource_WebPropertyAdWordsLinksResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyAdWordsLinkId") {
    client::UriTemplate::AppendValue(
        web_property_ad_words_link_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_WebpropertiesResource_GetMethod::ManagementResource_WebpropertiesResource_GetMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()) {
}

// Standard destructor.
ManagementResource_WebpropertiesResource_GetMethod::~ManagementResource_WebpropertiesResource_GetMethod() {
}


util::Status ManagementResource_WebpropertiesResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_WebpropertiesResource_InsertMethod::ManagementResource_WebpropertiesResource_InsertMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const Webproperty& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/webproperties"),
      account_id_(account_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_WebpropertiesResource_InsertMethod::~ManagementResource_WebpropertiesResource_InsertMethod() {
}


util::Status ManagementResource_WebpropertiesResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_WebpropertiesResource_ListMethod::ManagementResource_WebpropertiesResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties"),
      account_id_(account_id.as_string()),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_WebpropertiesResource_ListMethod::~ManagementResource_WebpropertiesResource_ListMethod() {
}

util::Status ManagementResource_WebpropertiesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_WebpropertiesResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_WebpropertiesResource_PatchMethod::ManagementResource_WebpropertiesResource_PatchMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const Webproperty& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "management/accounts/{accountId}/webproperties/{webPropertyId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_WebpropertiesResource_PatchMethod::~ManagementResource_WebpropertiesResource_PatchMethod() {
}


util::Status ManagementResource_WebpropertiesResource_PatchMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_WebpropertiesResource_UpdateMethod::ManagementResource_WebpropertiesResource_UpdateMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const Webproperty& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "management/accounts/{accountId}/webproperties/{webPropertyId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_WebpropertiesResource_UpdateMethod::~ManagementResource_WebpropertiesResource_UpdateMethod() {
}


util::Status ManagementResource_WebpropertiesResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ManagementResource_WebpropertyUserLinksResource_DeleteMethod::ManagementResource_WebpropertyUserLinksResource_DeleteMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& link_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      link_id_(link_id.as_string()) {
}

// Standard destructor.
ManagementResource_WebpropertyUserLinksResource_DeleteMethod::~ManagementResource_WebpropertyUserLinksResource_DeleteMethod() {
}


util::Status ManagementResource_WebpropertyUserLinksResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "linkId") {
    client::UriTemplate::AppendValue(
        link_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_WebpropertyUserLinksResource_InsertMethod::ManagementResource_WebpropertyUserLinksResource_InsertMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const EntityUserLink& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_WebpropertyUserLinksResource_InsertMethod::~ManagementResource_WebpropertyUserLinksResource_InsertMethod() {
}


util::Status ManagementResource_WebpropertyUserLinksResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_WebpropertyUserLinksResource_ListMethod::ManagementResource_WebpropertyUserLinksResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      _have_max_results_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ManagementResource_WebpropertyUserLinksResource_ListMethod::~ManagementResource_WebpropertyUserLinksResource_ListMethod() {
}

util::Status ManagementResource_WebpropertyUserLinksResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return AnalyticsServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ManagementResource_WebpropertyUserLinksResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ManagementResource_WebpropertyUserLinksResource_UpdateMethod::ManagementResource_WebpropertyUserLinksResource_UpdateMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& link_id, const EntityUserLink& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}"),
      account_id_(account_id.as_string()),
      web_property_id_(web_property_id.as_string()),
      link_id_(link_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ManagementResource_WebpropertyUserLinksResource_UpdateMethod::~ManagementResource_WebpropertyUserLinksResource_UpdateMethod() {
}


util::Status ManagementResource_WebpropertyUserLinksResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "accountId") {
    client::UriTemplate::AppendValue(
        account_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "webPropertyId") {
    client::UriTemplate::AppendValue(
        web_property_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "linkId") {
    client::UriTemplate::AppendValue(
        link_id_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}





// Standard constructor.
MetadataResource_ColumnsResource_ListMethod::MetadataResource_ColumnsResource_ListMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& report_type)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "metadata/{reportType}/columns"),
      report_type_(report_type.as_string()) {
}

// Standard destructor.
MetadataResource_ColumnsResource_ListMethod::~MetadataResource_ColumnsResource_ListMethod() {
}


util::Status MetadataResource_ColumnsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "reportType") {
    client::UriTemplate::AppendValue(
        report_type_, config, target);
    return client::StatusOk();
  }
  return AnalyticsServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProvisioningResource_CreateAccountTicketMethod::ProvisioningResource_CreateAccountTicketMethod(
    const AnalyticsService* _service_, client::AuthorizationCredential* _credential_, const AccountTicket& __request_content__)
    : AnalyticsServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "provisioning/createAccountTicket") {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProvisioningResource_CreateAccountTicketMethod::~ProvisioningResource_CreateAccountTicketMethod() {
}



AnalyticsService::AnalyticsService(client::HttpTransport* transport)
  : ClientService("https://www.googleapis.com/", "analytics/v3/", transport), data_(this), management_(this), metadata_(this), provisioning_(this) {
  this->SetBatchPath("batch/analytics/v3");
}

AnalyticsService::~AnalyticsService() {
}


AnalyticsService::DataResource::DataResource(AnalyticsService* service)
  : service_(service), ga_(service), mcf_(service), realtime_(service) {
}




AnalyticsService::DataResource::GaResource::GaResource(AnalyticsService* service)
  : service_(service) {
}



DataResource_GaResource_GetMethod* AnalyticsService::DataResource::GaResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& ids, const StringPiece& start_date, const StringPiece& end_date, const StringPiece& metrics) const {
  return new DataResource_GaResource_GetMethod(service_, _credential_, ids, start_date, end_date, metrics);
}

AnalyticsService::DataResource::McfResource::McfResource(AnalyticsService* service)
  : service_(service) {
}



DataResource_McfResource_GetMethod* AnalyticsService::DataResource::McfResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& ids, const StringPiece& start_date, const StringPiece& end_date, const StringPiece& metrics) const {
  return new DataResource_McfResource_GetMethod(service_, _credential_, ids, start_date, end_date, metrics);
}

AnalyticsService::DataResource::RealtimeResource::RealtimeResource(AnalyticsService* service)
  : service_(service) {
}



DataResource_RealtimeResource_GetMethod* AnalyticsService::DataResource::RealtimeResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& ids, const StringPiece& metrics) const {
  return new DataResource_RealtimeResource_GetMethod(service_, _credential_, ids, metrics);
}

AnalyticsService::ManagementResource::ManagementResource(AnalyticsService* service)
  : service_(service), account_summaries_(service), account_user_links_(service), accounts_(service), custom_data_sources_(service), custom_dimensions_(service), custom_metrics_(service), experiments_(service), filters_(service), goals_(service), profile_filter_links_(service), profile_user_links_(service), profiles_(service), remarketing_audience_(service), segments_(service), unsampled_reports_(service), uploads_(service), web_property_ad_words_links_(service), webproperties_(service), webproperty_user_links_(service) {
}




AnalyticsService::ManagementResource::AccountSummariesResource::AccountSummariesResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_AccountSummariesResource_ListMethod* AnalyticsService::ManagementResource::AccountSummariesResource::NewListMethod(client::AuthorizationCredential* _credential_) const {
  return new ManagementResource_AccountSummariesResource_ListMethod(service_, _credential_);
}

AnalyticsService::ManagementResource::AccountUserLinksResource::AccountUserLinksResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_AccountUserLinksResource_DeleteMethod* AnalyticsService::ManagementResource::AccountUserLinksResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& link_id) const {
  return new ManagementResource_AccountUserLinksResource_DeleteMethod(service_, _credential_, account_id, link_id);
}


ManagementResource_AccountUserLinksResource_InsertMethod* AnalyticsService::ManagementResource::AccountUserLinksResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const EntityUserLink& __request_content__) const {
  return new ManagementResource_AccountUserLinksResource_InsertMethod(service_, _credential_, account_id, __request_content__);
}


ManagementResource_AccountUserLinksResource_ListMethod* AnalyticsService::ManagementResource::AccountUserLinksResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id) const {
  return new ManagementResource_AccountUserLinksResource_ListMethod(service_, _credential_, account_id);
}


ManagementResource_AccountUserLinksResource_UpdateMethod* AnalyticsService::ManagementResource::AccountUserLinksResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& link_id, const EntityUserLink& __request_content__) const {
  return new ManagementResource_AccountUserLinksResource_UpdateMethod(service_, _credential_, account_id, link_id, __request_content__);
}

AnalyticsService::ManagementResource::AccountsResource::AccountsResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_AccountsResource_ListMethod* AnalyticsService::ManagementResource::AccountsResource::NewListMethod(client::AuthorizationCredential* _credential_) const {
  return new ManagementResource_AccountsResource_ListMethod(service_, _credential_);
}

AnalyticsService::ManagementResource::CustomDataSourcesResource::CustomDataSourcesResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_CustomDataSourcesResource_ListMethod* AnalyticsService::ManagementResource::CustomDataSourcesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id) const {
  return new ManagementResource_CustomDataSourcesResource_ListMethod(service_, _credential_, account_id, web_property_id);
}

AnalyticsService::ManagementResource::CustomDimensionsResource::CustomDimensionsResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_CustomDimensionsResource_GetMethod* AnalyticsService::ManagementResource::CustomDimensionsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_dimension_id) const {
  return new ManagementResource_CustomDimensionsResource_GetMethod(service_, _credential_, account_id, web_property_id, custom_dimension_id);
}


ManagementResource_CustomDimensionsResource_InsertMethod* AnalyticsService::ManagementResource::CustomDimensionsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const CustomDimension& __request_content__) const {
  return new ManagementResource_CustomDimensionsResource_InsertMethod(service_, _credential_, account_id, web_property_id, __request_content__);
}


ManagementResource_CustomDimensionsResource_ListMethod* AnalyticsService::ManagementResource::CustomDimensionsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id) const {
  return new ManagementResource_CustomDimensionsResource_ListMethod(service_, _credential_, account_id, web_property_id);
}


ManagementResource_CustomDimensionsResource_PatchMethod* AnalyticsService::ManagementResource::CustomDimensionsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_dimension_id, const CustomDimension& __request_content__) const {
  return new ManagementResource_CustomDimensionsResource_PatchMethod(service_, _credential_, account_id, web_property_id, custom_dimension_id, __request_content__);
}


ManagementResource_CustomDimensionsResource_UpdateMethod* AnalyticsService::ManagementResource::CustomDimensionsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_dimension_id, const CustomDimension& __request_content__) const {
  return new ManagementResource_CustomDimensionsResource_UpdateMethod(service_, _credential_, account_id, web_property_id, custom_dimension_id, __request_content__);
}

AnalyticsService::ManagementResource::CustomMetricsResource::CustomMetricsResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_CustomMetricsResource_GetMethod* AnalyticsService::ManagementResource::CustomMetricsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_metric_id) const {
  return new ManagementResource_CustomMetricsResource_GetMethod(service_, _credential_, account_id, web_property_id, custom_metric_id);
}


ManagementResource_CustomMetricsResource_InsertMethod* AnalyticsService::ManagementResource::CustomMetricsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const CustomMetric& __request_content__) const {
  return new ManagementResource_CustomMetricsResource_InsertMethod(service_, _credential_, account_id, web_property_id, __request_content__);
}


ManagementResource_CustomMetricsResource_ListMethod* AnalyticsService::ManagementResource::CustomMetricsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id) const {
  return new ManagementResource_CustomMetricsResource_ListMethod(service_, _credential_, account_id, web_property_id);
}


ManagementResource_CustomMetricsResource_PatchMethod* AnalyticsService::ManagementResource::CustomMetricsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_metric_id, const CustomMetric& __request_content__) const {
  return new ManagementResource_CustomMetricsResource_PatchMethod(service_, _credential_, account_id, web_property_id, custom_metric_id, __request_content__);
}


ManagementResource_CustomMetricsResource_UpdateMethod* AnalyticsService::ManagementResource::CustomMetricsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_metric_id, const CustomMetric& __request_content__) const {
  return new ManagementResource_CustomMetricsResource_UpdateMethod(service_, _credential_, account_id, web_property_id, custom_metric_id, __request_content__);
}

AnalyticsService::ManagementResource::ExperimentsResource::ExperimentsResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_ExperimentsResource_DeleteMethod* AnalyticsService::ManagementResource::ExperimentsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& experiment_id) const {
  return new ManagementResource_ExperimentsResource_DeleteMethod(service_, _credential_, account_id, web_property_id, profile_id, experiment_id);
}


ManagementResource_ExperimentsResource_GetMethod* AnalyticsService::ManagementResource::ExperimentsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& experiment_id) const {
  return new ManagementResource_ExperimentsResource_GetMethod(service_, _credential_, account_id, web_property_id, profile_id, experiment_id);
}


ManagementResource_ExperimentsResource_InsertMethod* AnalyticsService::ManagementResource::ExperimentsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const Experiment& __request_content__) const {
  return new ManagementResource_ExperimentsResource_InsertMethod(service_, _credential_, account_id, web_property_id, profile_id, __request_content__);
}


ManagementResource_ExperimentsResource_ListMethod* AnalyticsService::ManagementResource::ExperimentsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id) const {
  return new ManagementResource_ExperimentsResource_ListMethod(service_, _credential_, account_id, web_property_id, profile_id);
}


ManagementResource_ExperimentsResource_PatchMethod* AnalyticsService::ManagementResource::ExperimentsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& experiment_id, const Experiment& __request_content__) const {
  return new ManagementResource_ExperimentsResource_PatchMethod(service_, _credential_, account_id, web_property_id, profile_id, experiment_id, __request_content__);
}


ManagementResource_ExperimentsResource_UpdateMethod* AnalyticsService::ManagementResource::ExperimentsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& experiment_id, const Experiment& __request_content__) const {
  return new ManagementResource_ExperimentsResource_UpdateMethod(service_, _credential_, account_id, web_property_id, profile_id, experiment_id, __request_content__);
}

AnalyticsService::ManagementResource::FiltersResource::FiltersResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_FiltersResource_DeleteMethod* AnalyticsService::ManagementResource::FiltersResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& filter_id) const {
  return new ManagementResource_FiltersResource_DeleteMethod(service_, _credential_, account_id, filter_id);
}


ManagementResource_FiltersResource_GetMethod* AnalyticsService::ManagementResource::FiltersResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& filter_id) const {
  return new ManagementResource_FiltersResource_GetMethod(service_, _credential_, account_id, filter_id);
}


ManagementResource_FiltersResource_InsertMethod* AnalyticsService::ManagementResource::FiltersResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const Filter& __request_content__) const {
  return new ManagementResource_FiltersResource_InsertMethod(service_, _credential_, account_id, __request_content__);
}


ManagementResource_FiltersResource_ListMethod* AnalyticsService::ManagementResource::FiltersResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id) const {
  return new ManagementResource_FiltersResource_ListMethod(service_, _credential_, account_id);
}


ManagementResource_FiltersResource_PatchMethod* AnalyticsService::ManagementResource::FiltersResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& filter_id, const Filter& __request_content__) const {
  return new ManagementResource_FiltersResource_PatchMethod(service_, _credential_, account_id, filter_id, __request_content__);
}


ManagementResource_FiltersResource_UpdateMethod* AnalyticsService::ManagementResource::FiltersResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& filter_id, const Filter& __request_content__) const {
  return new ManagementResource_FiltersResource_UpdateMethod(service_, _credential_, account_id, filter_id, __request_content__);
}

AnalyticsService::ManagementResource::GoalsResource::GoalsResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_GoalsResource_GetMethod* AnalyticsService::ManagementResource::GoalsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& goal_id) const {
  return new ManagementResource_GoalsResource_GetMethod(service_, _credential_, account_id, web_property_id, profile_id, goal_id);
}


ManagementResource_GoalsResource_InsertMethod* AnalyticsService::ManagementResource::GoalsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const Goal& __request_content__) const {
  return new ManagementResource_GoalsResource_InsertMethod(service_, _credential_, account_id, web_property_id, profile_id, __request_content__);
}


ManagementResource_GoalsResource_ListMethod* AnalyticsService::ManagementResource::GoalsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id) const {
  return new ManagementResource_GoalsResource_ListMethod(service_, _credential_, account_id, web_property_id, profile_id);
}


ManagementResource_GoalsResource_PatchMethod* AnalyticsService::ManagementResource::GoalsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& goal_id, const Goal& __request_content__) const {
  return new ManagementResource_GoalsResource_PatchMethod(service_, _credential_, account_id, web_property_id, profile_id, goal_id, __request_content__);
}


ManagementResource_GoalsResource_UpdateMethod* AnalyticsService::ManagementResource::GoalsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& goal_id, const Goal& __request_content__) const {
  return new ManagementResource_GoalsResource_UpdateMethod(service_, _credential_, account_id, web_property_id, profile_id, goal_id, __request_content__);
}

AnalyticsService::ManagementResource::ProfileFilterLinksResource::ProfileFilterLinksResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_ProfileFilterLinksResource_DeleteMethod* AnalyticsService::ManagementResource::ProfileFilterLinksResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& link_id) const {
  return new ManagementResource_ProfileFilterLinksResource_DeleteMethod(service_, _credential_, account_id, web_property_id, profile_id, link_id);
}


ManagementResource_ProfileFilterLinksResource_GetMethod* AnalyticsService::ManagementResource::ProfileFilterLinksResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& link_id) const {
  return new ManagementResource_ProfileFilterLinksResource_GetMethod(service_, _credential_, account_id, web_property_id, profile_id, link_id);
}


ManagementResource_ProfileFilterLinksResource_InsertMethod* AnalyticsService::ManagementResource::ProfileFilterLinksResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const ProfileFilterLink& __request_content__) const {
  return new ManagementResource_ProfileFilterLinksResource_InsertMethod(service_, _credential_, account_id, web_property_id, profile_id, __request_content__);
}


ManagementResource_ProfileFilterLinksResource_ListMethod* AnalyticsService::ManagementResource::ProfileFilterLinksResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id) const {
  return new ManagementResource_ProfileFilterLinksResource_ListMethod(service_, _credential_, account_id, web_property_id, profile_id);
}


ManagementResource_ProfileFilterLinksResource_PatchMethod* AnalyticsService::ManagementResource::ProfileFilterLinksResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& link_id, const ProfileFilterLink& __request_content__) const {
  return new ManagementResource_ProfileFilterLinksResource_PatchMethod(service_, _credential_, account_id, web_property_id, profile_id, link_id, __request_content__);
}


ManagementResource_ProfileFilterLinksResource_UpdateMethod* AnalyticsService::ManagementResource::ProfileFilterLinksResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& link_id, const ProfileFilterLink& __request_content__) const {
  return new ManagementResource_ProfileFilterLinksResource_UpdateMethod(service_, _credential_, account_id, web_property_id, profile_id, link_id, __request_content__);
}

AnalyticsService::ManagementResource::ProfileUserLinksResource::ProfileUserLinksResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_ProfileUserLinksResource_DeleteMethod* AnalyticsService::ManagementResource::ProfileUserLinksResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& link_id) const {
  return new ManagementResource_ProfileUserLinksResource_DeleteMethod(service_, _credential_, account_id, web_property_id, profile_id, link_id);
}


ManagementResource_ProfileUserLinksResource_InsertMethod* AnalyticsService::ManagementResource::ProfileUserLinksResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const EntityUserLink& __request_content__) const {
  return new ManagementResource_ProfileUserLinksResource_InsertMethod(service_, _credential_, account_id, web_property_id, profile_id, __request_content__);
}


ManagementResource_ProfileUserLinksResource_ListMethod* AnalyticsService::ManagementResource::ProfileUserLinksResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id) const {
  return new ManagementResource_ProfileUserLinksResource_ListMethod(service_, _credential_, account_id, web_property_id, profile_id);
}


ManagementResource_ProfileUserLinksResource_UpdateMethod* AnalyticsService::ManagementResource::ProfileUserLinksResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& link_id, const EntityUserLink& __request_content__) const {
  return new ManagementResource_ProfileUserLinksResource_UpdateMethod(service_, _credential_, account_id, web_property_id, profile_id, link_id, __request_content__);
}

AnalyticsService::ManagementResource::ProfilesResource::ProfilesResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_ProfilesResource_DeleteMethod* AnalyticsService::ManagementResource::ProfilesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id) const {
  return new ManagementResource_ProfilesResource_DeleteMethod(service_, _credential_, account_id, web_property_id, profile_id);
}


ManagementResource_ProfilesResource_GetMethod* AnalyticsService::ManagementResource::ProfilesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id) const {
  return new ManagementResource_ProfilesResource_GetMethod(service_, _credential_, account_id, web_property_id, profile_id);
}


ManagementResource_ProfilesResource_InsertMethod* AnalyticsService::ManagementResource::ProfilesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const Profile& __request_content__) const {
  return new ManagementResource_ProfilesResource_InsertMethod(service_, _credential_, account_id, web_property_id, __request_content__);
}


ManagementResource_ProfilesResource_ListMethod* AnalyticsService::ManagementResource::ProfilesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id) const {
  return new ManagementResource_ProfilesResource_ListMethod(service_, _credential_, account_id, web_property_id);
}


ManagementResource_ProfilesResource_PatchMethod* AnalyticsService::ManagementResource::ProfilesResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const Profile& __request_content__) const {
  return new ManagementResource_ProfilesResource_PatchMethod(service_, _credential_, account_id, web_property_id, profile_id, __request_content__);
}


ManagementResource_ProfilesResource_UpdateMethod* AnalyticsService::ManagementResource::ProfilesResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const Profile& __request_content__) const {
  return new ManagementResource_ProfilesResource_UpdateMethod(service_, _credential_, account_id, web_property_id, profile_id, __request_content__);
}

AnalyticsService::ManagementResource::RemarketingAudienceResource::RemarketingAudienceResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_RemarketingAudienceResource_DeleteMethod* AnalyticsService::ManagementResource::RemarketingAudienceResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& remarketing_audience_id) const {
  return new ManagementResource_RemarketingAudienceResource_DeleteMethod(service_, _credential_, account_id, web_property_id, remarketing_audience_id);
}


ManagementResource_RemarketingAudienceResource_GetMethod* AnalyticsService::ManagementResource::RemarketingAudienceResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& remarketing_audience_id) const {
  return new ManagementResource_RemarketingAudienceResource_GetMethod(service_, _credential_, account_id, web_property_id, remarketing_audience_id);
}


ManagementResource_RemarketingAudienceResource_InsertMethod* AnalyticsService::ManagementResource::RemarketingAudienceResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const RemarketingAudience& __request_content__) const {
  return new ManagementResource_RemarketingAudienceResource_InsertMethod(service_, _credential_, account_id, web_property_id, __request_content__);
}


ManagementResource_RemarketingAudienceResource_ListMethod* AnalyticsService::ManagementResource::RemarketingAudienceResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id) const {
  return new ManagementResource_RemarketingAudienceResource_ListMethod(service_, _credential_, account_id, web_property_id);
}


ManagementResource_RemarketingAudienceResource_PatchMethod* AnalyticsService::ManagementResource::RemarketingAudienceResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& remarketing_audience_id, const RemarketingAudience& __request_content__) const {
  return new ManagementResource_RemarketingAudienceResource_PatchMethod(service_, _credential_, account_id, web_property_id, remarketing_audience_id, __request_content__);
}


ManagementResource_RemarketingAudienceResource_UpdateMethod* AnalyticsService::ManagementResource::RemarketingAudienceResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& remarketing_audience_id, const RemarketingAudience& __request_content__) const {
  return new ManagementResource_RemarketingAudienceResource_UpdateMethod(service_, _credential_, account_id, web_property_id, remarketing_audience_id, __request_content__);
}

AnalyticsService::ManagementResource::SegmentsResource::SegmentsResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_SegmentsResource_ListMethod* AnalyticsService::ManagementResource::SegmentsResource::NewListMethod(client::AuthorizationCredential* _credential_) const {
  return new ManagementResource_SegmentsResource_ListMethod(service_, _credential_);
}

AnalyticsService::ManagementResource::UnsampledReportsResource::UnsampledReportsResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_UnsampledReportsResource_DeleteMethod* AnalyticsService::ManagementResource::UnsampledReportsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& unsampled_report_id) const {
  return new ManagementResource_UnsampledReportsResource_DeleteMethod(service_, _credential_, account_id, web_property_id, profile_id, unsampled_report_id);
}


ManagementResource_UnsampledReportsResource_GetMethod* AnalyticsService::ManagementResource::UnsampledReportsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const StringPiece& unsampled_report_id) const {
  return new ManagementResource_UnsampledReportsResource_GetMethod(service_, _credential_, account_id, web_property_id, profile_id, unsampled_report_id);
}


ManagementResource_UnsampledReportsResource_InsertMethod* AnalyticsService::ManagementResource::UnsampledReportsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id, const UnsampledReport& __request_content__) const {
  return new ManagementResource_UnsampledReportsResource_InsertMethod(service_, _credential_, account_id, web_property_id, profile_id, __request_content__);
}


ManagementResource_UnsampledReportsResource_ListMethod* AnalyticsService::ManagementResource::UnsampledReportsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& profile_id) const {
  return new ManagementResource_UnsampledReportsResource_ListMethod(service_, _credential_, account_id, web_property_id, profile_id);
}

AnalyticsService::ManagementResource::UploadsResource::UploadsResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_UploadsResource_DeleteUploadDataMethod* AnalyticsService::ManagementResource::UploadsResource::NewDeleteUploadDataMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_data_source_id, const AnalyticsDataimportDeleteUploadDataRequest& __request_content__) const {
  return new ManagementResource_UploadsResource_DeleteUploadDataMethod(service_, _credential_, account_id, web_property_id, custom_data_source_id, __request_content__);
}


ManagementResource_UploadsResource_GetMethod* AnalyticsService::ManagementResource::UploadsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_data_source_id, const StringPiece& upload_id) const {
  return new ManagementResource_UploadsResource_GetMethod(service_, _credential_, account_id, web_property_id, custom_data_source_id, upload_id);
}


ManagementResource_UploadsResource_ListMethod* AnalyticsService::ManagementResource::UploadsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_data_source_id) const {
  return new ManagementResource_UploadsResource_ListMethod(service_, _credential_, account_id, web_property_id, custom_data_source_id);
}


ManagementResource_UploadsResource_UploadDataMethod* AnalyticsService::ManagementResource::UploadsResource::NewUploadDataMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& custom_data_source_id, const char* _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new ManagementResource_UploadsResource_UploadDataMethod(service_, _credential_, account_id, web_property_id, custom_data_source_id, _media_content_type_, _media_content_reader_);
}

AnalyticsService::ManagementResource::WebPropertyAdWordsLinksResource::WebPropertyAdWordsLinksResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_WebPropertyAdWordsLinksResource_DeleteMethod* AnalyticsService::ManagementResource::WebPropertyAdWordsLinksResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& web_property_ad_words_link_id) const {
  return new ManagementResource_WebPropertyAdWordsLinksResource_DeleteMethod(service_, _credential_, account_id, web_property_id, web_property_ad_words_link_id);
}


ManagementResource_WebPropertyAdWordsLinksResource_GetMethod* AnalyticsService::ManagementResource::WebPropertyAdWordsLinksResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& web_property_ad_words_link_id) const {
  return new ManagementResource_WebPropertyAdWordsLinksResource_GetMethod(service_, _credential_, account_id, web_property_id, web_property_ad_words_link_id);
}


ManagementResource_WebPropertyAdWordsLinksResource_InsertMethod* AnalyticsService::ManagementResource::WebPropertyAdWordsLinksResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const EntityAdWordsLink& __request_content__) const {
  return new ManagementResource_WebPropertyAdWordsLinksResource_InsertMethod(service_, _credential_, account_id, web_property_id, __request_content__);
}


ManagementResource_WebPropertyAdWordsLinksResource_ListMethod* AnalyticsService::ManagementResource::WebPropertyAdWordsLinksResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id) const {
  return new ManagementResource_WebPropertyAdWordsLinksResource_ListMethod(service_, _credential_, account_id, web_property_id);
}


ManagementResource_WebPropertyAdWordsLinksResource_PatchMethod* AnalyticsService::ManagementResource::WebPropertyAdWordsLinksResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& web_property_ad_words_link_id, const EntityAdWordsLink& __request_content__) const {
  return new ManagementResource_WebPropertyAdWordsLinksResource_PatchMethod(service_, _credential_, account_id, web_property_id, web_property_ad_words_link_id, __request_content__);
}


ManagementResource_WebPropertyAdWordsLinksResource_UpdateMethod* AnalyticsService::ManagementResource::WebPropertyAdWordsLinksResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& web_property_ad_words_link_id, const EntityAdWordsLink& __request_content__) const {
  return new ManagementResource_WebPropertyAdWordsLinksResource_UpdateMethod(service_, _credential_, account_id, web_property_id, web_property_ad_words_link_id, __request_content__);
}

AnalyticsService::ManagementResource::WebpropertiesResource::WebpropertiesResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_WebpropertiesResource_GetMethod* AnalyticsService::ManagementResource::WebpropertiesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id) const {
  return new ManagementResource_WebpropertiesResource_GetMethod(service_, _credential_, account_id, web_property_id);
}


ManagementResource_WebpropertiesResource_InsertMethod* AnalyticsService::ManagementResource::WebpropertiesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const Webproperty& __request_content__) const {
  return new ManagementResource_WebpropertiesResource_InsertMethod(service_, _credential_, account_id, __request_content__);
}


ManagementResource_WebpropertiesResource_ListMethod* AnalyticsService::ManagementResource::WebpropertiesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id) const {
  return new ManagementResource_WebpropertiesResource_ListMethod(service_, _credential_, account_id);
}


ManagementResource_WebpropertiesResource_PatchMethod* AnalyticsService::ManagementResource::WebpropertiesResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const Webproperty& __request_content__) const {
  return new ManagementResource_WebpropertiesResource_PatchMethod(service_, _credential_, account_id, web_property_id, __request_content__);
}


ManagementResource_WebpropertiesResource_UpdateMethod* AnalyticsService::ManagementResource::WebpropertiesResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const Webproperty& __request_content__) const {
  return new ManagementResource_WebpropertiesResource_UpdateMethod(service_, _credential_, account_id, web_property_id, __request_content__);
}

AnalyticsService::ManagementResource::WebpropertyUserLinksResource::WebpropertyUserLinksResource(AnalyticsService* service)
  : service_(service) {
}



ManagementResource_WebpropertyUserLinksResource_DeleteMethod* AnalyticsService::ManagementResource::WebpropertyUserLinksResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& link_id) const {
  return new ManagementResource_WebpropertyUserLinksResource_DeleteMethod(service_, _credential_, account_id, web_property_id, link_id);
}


ManagementResource_WebpropertyUserLinksResource_InsertMethod* AnalyticsService::ManagementResource::WebpropertyUserLinksResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const EntityUserLink& __request_content__) const {
  return new ManagementResource_WebpropertyUserLinksResource_InsertMethod(service_, _credential_, account_id, web_property_id, __request_content__);
}


ManagementResource_WebpropertyUserLinksResource_ListMethod* AnalyticsService::ManagementResource::WebpropertyUserLinksResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id) const {
  return new ManagementResource_WebpropertyUserLinksResource_ListMethod(service_, _credential_, account_id, web_property_id);
}


ManagementResource_WebpropertyUserLinksResource_UpdateMethod* AnalyticsService::ManagementResource::WebpropertyUserLinksResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& account_id, const StringPiece& web_property_id, const StringPiece& link_id, const EntityUserLink& __request_content__) const {
  return new ManagementResource_WebpropertyUserLinksResource_UpdateMethod(service_, _credential_, account_id, web_property_id, link_id, __request_content__);
}

AnalyticsService::MetadataResource::MetadataResource(AnalyticsService* service)
  : service_(service), columns_(service) {
}




AnalyticsService::MetadataResource::ColumnsResource::ColumnsResource(AnalyticsService* service)
  : service_(service) {
}



MetadataResource_ColumnsResource_ListMethod* AnalyticsService::MetadataResource::ColumnsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& report_type) const {
  return new MetadataResource_ColumnsResource_ListMethod(service_, _credential_, report_type);
}

AnalyticsService::ProvisioningResource::ProvisioningResource(AnalyticsService* service)
  : service_(service) {
}



ProvisioningResource_CreateAccountTicketMethod* AnalyticsService::ProvisioningResource::NewCreateAccountTicketMethod(client::AuthorizationCredential* _credential_, const AccountTicket& __request_content__) const {
  return new ProvisioningResource_CreateAccountTicketMethod(service_, _credential_, __request_content__);
}
}  // namespace google_analytics_api
