// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_CUSTOM_METRIC_H_
#define  GOOGLE_ANALYTICS_API_CUSTOM_METRIC_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * JSON template for Analytics Custom Metric.
 *
 * @ingroup DataObject
 */
class CustomMetric : public client::JsonCppData {
 public:
  /**
   * Parent link for the custom metric. Points to the property to which the
   * custom metric belongs.
   *
   * @ingroup DataObject
   */
  class CustomMetricParentLink : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static CustomMetricParentLink* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit CustomMetricParentLink(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit CustomMetricParentLink(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~CustomMetricParentLink();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::CustomMetricParentLink</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::CustomMetricParentLink";
    }

    /**
     * Determine if the '<code>href</code>' attribute was set.
     *
     * @return true if the '<code>href</code>' attribute was set.
     */
    bool has_href() const {
      return Storage().isMember("href");
    }

    /**
     * Clears the '<code>href</code>' attribute.
     */
    void clear_href() {
      MutableStorage()->removeMember("href");
    }


    /**
     * Get the value of the '<code>href</code>' attribute.
     */
    const StringPiece get_href() const {
      const Json::Value& v = Storage("href");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>href</code>' attribute.
     *
     * Link to the property to which the custom metric belongs.
     *
     * @param[in] value The new value.
     */
    void set_href(const StringPiece& value) {
      *MutableStorage("href") = value.data();
    }

    /**
     * Determine if the '<code>type</code>' attribute was set.
     *
     * @return true if the '<code>type</code>' attribute was set.
     */
    bool has_type() const {
      return Storage().isMember("type");
    }

    /**
     * Clears the '<code>type</code>' attribute.
     */
    void clear_type() {
      MutableStorage()->removeMember("type");
    }


    /**
     * Get the value of the '<code>type</code>' attribute.
     */
    const StringPiece get_type() const {
      const Json::Value& v = Storage("type");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>type</code>' attribute.
     *
     * Type of the parent link. Set to "analytics#webproperty".
     *
     * @param[in] value The new value.
     */
    void set_type(const StringPiece& value) {
      *MutableStorage("type") = value.data();
    }

   private:
    void operator=(const CustomMetricParentLink&);
  };  // CustomMetricParentLink
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static CustomMetric* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit CustomMetric(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit CustomMetric(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~CustomMetric();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::CustomMetric</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::CustomMetric";
  }

  /**
   * Determine if the '<code>accountId</code>' attribute was set.
   *
   * @return true if the '<code>accountId</code>' attribute was set.
   */
  bool has_account_id() const {
    return Storage().isMember("accountId");
  }

  /**
   * Clears the '<code>accountId</code>' attribute.
   */
  void clear_account_id() {
    MutableStorage()->removeMember("accountId");
  }


  /**
   * Get the value of the '<code>accountId</code>' attribute.
   */
  const StringPiece get_account_id() const {
    const Json::Value& v = Storage("accountId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>accountId</code>' attribute.
   *
   * Account ID.
   *
   * @param[in] value The new value.
   */
  void set_account_id(const StringPiece& value) {
    *MutableStorage("accountId") = value.data();
  }

  /**
   * Determine if the '<code>active</code>' attribute was set.
   *
   * @return true if the '<code>active</code>' attribute was set.
   */
  bool has_active() const {
    return Storage().isMember("active");
  }

  /**
   * Clears the '<code>active</code>' attribute.
   */
  void clear_active() {
    MutableStorage()->removeMember("active");
  }


  /**
   * Get the value of the '<code>active</code>' attribute.
   */
  bool get_active() const {
    const Json::Value& storage = Storage("active");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>active</code>' attribute.
   *
   * Boolean indicating whether the custom metric is active.
   *
   * @param[in] value The new value.
   */
  void set_active(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("active"));
  }

  /**
   * Determine if the '<code>created</code>' attribute was set.
   *
   * @return true if the '<code>created</code>' attribute was set.
   */
  bool has_created() const {
    return Storage().isMember("created");
  }

  /**
   * Clears the '<code>created</code>' attribute.
   */
  void clear_created() {
    MutableStorage()->removeMember("created");
  }


  /**
   * Get the value of the '<code>created</code>' attribute.
   */
  client::DateTime get_created() const {
    const Json::Value& storage = Storage("created");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>created</code>' attribute.
   *
   * Time the custom metric was created.
   *
   * @param[in] value The new value.
   */
  void set_created(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("created"));
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * Custom metric ID.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>index</code>' attribute was set.
   *
   * @return true if the '<code>index</code>' attribute was set.
   */
  bool has_index() const {
    return Storage().isMember("index");
  }

  /**
   * Clears the '<code>index</code>' attribute.
   */
  void clear_index() {
    MutableStorage()->removeMember("index");
  }


  /**
   * Get the value of the '<code>index</code>' attribute.
   */
  int32 get_index() const {
    const Json::Value& storage = Storage("index");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>index</code>' attribute.
   *
   * Index of the custom metric.
   *
   * @param[in] value The new value.
   */
  void set_index(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("index"));
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Kind value for a custom metric. Set to "analytics#customMetric". It is a
   * read-only field.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>max_value</code>' attribute was set.
   *
   * @return true if the '<code>max_value</code>' attribute was set.
   */
  bool has_max_value() const {
    return Storage().isMember("max_value");
  }

  /**
   * Clears the '<code>max_value</code>' attribute.
   */
  void clear_max_value() {
    MutableStorage()->removeMember("max_value");
  }


  /**
   * Get the value of the '<code>max_value</code>' attribute.
   */
  const StringPiece get_max_value() const {
    const Json::Value& v = Storage("max_value");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>max_value</code>' attribute.
   *
   * Max value of custom metric.
   *
   * @param[in] value The new value.
   */
  void set_max_value(const StringPiece& value) {
    *MutableStorage("max_value") = value.data();
  }

  /**
   * Determine if the '<code>min_value</code>' attribute was set.
   *
   * @return true if the '<code>min_value</code>' attribute was set.
   */
  bool has_min_value() const {
    return Storage().isMember("min_value");
  }

  /**
   * Clears the '<code>min_value</code>' attribute.
   */
  void clear_min_value() {
    MutableStorage()->removeMember("min_value");
  }


  /**
   * Get the value of the '<code>min_value</code>' attribute.
   */
  const StringPiece get_min_value() const {
    const Json::Value& v = Storage("min_value");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>min_value</code>' attribute.
   *
   * Min value of custom metric.
   *
   * @param[in] value The new value.
   */
  void set_min_value(const StringPiece& value) {
    *MutableStorage("min_value") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Name of the custom metric.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>parentLink</code>' attribute was set.
   *
   * @return true if the '<code>parentLink</code>' attribute was set.
   */
  bool has_parent_link() const {
    return Storage().isMember("parentLink");
  }

  /**
   * Clears the '<code>parentLink</code>' attribute.
   */
  void clear_parent_link() {
    MutableStorage()->removeMember("parentLink");
  }


  /**
   * Get a reference to the value of the '<code>parentLink</code>' attribute.
   */
  const CustomMetricParentLink get_parent_link() const {
     const Json::Value& storage = Storage("parentLink");
    return client::JsonValueToCppValueHelper<CustomMetricParentLink >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>parentLink</code>'
   * property.
   *
   * Parent link for the custom metric. Points to the property to which the
   * custom metric belongs.
   *
   * @return The result can be modified to change the attribute value.
   */
  CustomMetricParentLink mutable_parentLink() {
    Json::Value* storage = MutableStorage("parentLink");
    return client::JsonValueToMutableCppValueHelper<CustomMetricParentLink >(storage);
  }

  /**
   * Determine if the '<code>scope</code>' attribute was set.
   *
   * @return true if the '<code>scope</code>' attribute was set.
   */
  bool has_scope() const {
    return Storage().isMember("scope");
  }

  /**
   * Clears the '<code>scope</code>' attribute.
   */
  void clear_scope() {
    MutableStorage()->removeMember("scope");
  }


  /**
   * Get the value of the '<code>scope</code>' attribute.
   */
  const StringPiece get_scope() const {
    const Json::Value& v = Storage("scope");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>scope</code>' attribute.
   *
   * Scope of the custom metric: HIT or PRODUCT.
   *
   * @param[in] value The new value.
   */
  void set_scope(const StringPiece& value) {
    *MutableStorage("scope") = value.data();
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * Link for the custom metric.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>type</code>' attribute was set.
   *
   * @return true if the '<code>type</code>' attribute was set.
   */
  bool has_type() const {
    return Storage().isMember("type");
  }

  /**
   * Clears the '<code>type</code>' attribute.
   */
  void clear_type() {
    MutableStorage()->removeMember("type");
  }


  /**
   * Get the value of the '<code>type</code>' attribute.
   */
  const StringPiece get_type() const {
    const Json::Value& v = Storage("type");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>type</code>' attribute.
   *
   * Data type of custom metric.
   *
   * @param[in] value The new value.
   */
  void set_type(const StringPiece& value) {
    *MutableStorage("type") = value.data();
  }

  /**
   * Determine if the '<code>updated</code>' attribute was set.
   *
   * @return true if the '<code>updated</code>' attribute was set.
   */
  bool has_updated() const {
    return Storage().isMember("updated");
  }

  /**
   * Clears the '<code>updated</code>' attribute.
   */
  void clear_updated() {
    MutableStorage()->removeMember("updated");
  }


  /**
   * Get the value of the '<code>updated</code>' attribute.
   */
  client::DateTime get_updated() const {
    const Json::Value& storage = Storage("updated");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>updated</code>' attribute.
   *
   * Time the custom metric was last modified.
   *
   * @param[in] value The new value.
   */
  void set_updated(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("updated"));
  }

  /**
   * Determine if the '<code>webPropertyId</code>' attribute was set.
   *
   * @return true if the '<code>webPropertyId</code>' attribute was set.
   */
  bool has_web_property_id() const {
    return Storage().isMember("webPropertyId");
  }

  /**
   * Clears the '<code>webPropertyId</code>' attribute.
   */
  void clear_web_property_id() {
    MutableStorage()->removeMember("webPropertyId");
  }


  /**
   * Get the value of the '<code>webPropertyId</code>' attribute.
   */
  const StringPiece get_web_property_id() const {
    const Json::Value& v = Storage("webPropertyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>webPropertyId</code>' attribute.
   *
   * Property ID.
   *
   * @param[in] value The new value.
   */
  void set_web_property_id(const StringPiece& value) {
    *MutableStorage("webPropertyId") = value.data();
  }

 private:
  void operator=(const CustomMetric&);
};  // CustomMetric
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_CUSTOM_METRIC_H_
