// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_UPLOAD_H_
#define  GOOGLE_ANALYTICS_API_UPLOAD_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * Metadata returned for an upload operation.
 *
 * @ingroup DataObject
 */
class Upload : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Upload* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Upload(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Upload(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Upload();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::Upload</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::Upload";
  }

  /**
   * Determine if the '<code>accountId</code>' attribute was set.
   *
   * @return true if the '<code>accountId</code>' attribute was set.
   */
  bool has_account_id() const {
    return Storage().isMember("accountId");
  }

  /**
   * Clears the '<code>accountId</code>' attribute.
   */
  void clear_account_id() {
    MutableStorage()->removeMember("accountId");
  }


  /**
   * Get the value of the '<code>accountId</code>' attribute.
   */
  int64 get_account_id() const {
    const Json::Value& storage = Storage("accountId");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>accountId</code>' attribute.
   *
   * Account Id to which this upload belongs.
   *
   * @param[in] value The new value.
   */
  void set_account_id(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("accountId"));
  }

  /**
   * Determine if the '<code>customDataSourceId</code>' attribute was set.
   *
   * @return true if the '<code>customDataSourceId</code>' attribute was set.
   */
  bool has_custom_data_source_id() const {
    return Storage().isMember("customDataSourceId");
  }

  /**
   * Clears the '<code>customDataSourceId</code>' attribute.
   */
  void clear_custom_data_source_id() {
    MutableStorage()->removeMember("customDataSourceId");
  }


  /**
   * Get the value of the '<code>customDataSourceId</code>' attribute.
   */
  const StringPiece get_custom_data_source_id() const {
    const Json::Value& v = Storage("customDataSourceId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>customDataSourceId</code>' attribute.
   *
   * Custom data source Id to which this data import belongs.
   *
   * @param[in] value The new value.
   */
  void set_custom_data_source_id(const StringPiece& value) {
    *MutableStorage("customDataSourceId") = value.data();
  }

  /**
   * Determine if the '<code>errors</code>' attribute was set.
   *
   * @return true if the '<code>errors</code>' attribute was set.
   */
  bool has_errors() const {
    return Storage().isMember("errors");
  }

  /**
   * Clears the '<code>errors</code>' attribute.
   */
  void clear_errors() {
    MutableStorage()->removeMember("errors");
  }


  /**
   * Get a reference to the value of the '<code>errors</code>' attribute.
   */
  const client::JsonCppArray<string > get_errors() const {
     const Json::Value& storage = Storage("errors");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>errors</code>' property.
   *
   * Data import errors collection.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_errors() {
    Json::Value* storage = MutableStorage("errors");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * A unique ID for this upload.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Resource type for Analytics upload.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>status</code>' attribute was set.
   *
   * @return true if the '<code>status</code>' attribute was set.
   */
  bool has_status() const {
    return Storage().isMember("status");
  }

  /**
   * Clears the '<code>status</code>' attribute.
   */
  void clear_status() {
    MutableStorage()->removeMember("status");
  }


  /**
   * Get the value of the '<code>status</code>' attribute.
   */
  const StringPiece get_status() const {
    const Json::Value& v = Storage("status");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>status</code>' attribute.
   *
   * Upload status. Possible values: PENDING, COMPLETED, FAILED, DELETING,
   * DELETED.
   *
   * @param[in] value The new value.
   */
  void set_status(const StringPiece& value) {
    *MutableStorage("status") = value.data();
  }

  /**
   * Determine if the '<code>uploadTime</code>' attribute was set.
   *
   * @return true if the '<code>uploadTime</code>' attribute was set.
   */
  bool has_upload_time() const {
    return Storage().isMember("uploadTime");
  }

  /**
   * Clears the '<code>uploadTime</code>' attribute.
   */
  void clear_upload_time() {
    MutableStorage()->removeMember("uploadTime");
  }


  /**
   * Get the value of the '<code>uploadTime</code>' attribute.
   */
  client::DateTime get_upload_time() const {
    const Json::Value& storage = Storage("uploadTime");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>uploadTime</code>' attribute.
   *
   * Time this file is uploaded.
   *
   * @param[in] value The new value.
   */
  void set_upload_time(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("uploadTime"));
  }

 private:
  void operator=(const Upload&);
};  // Upload
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_UPLOAD_H_
