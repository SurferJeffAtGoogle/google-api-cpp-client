// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_LINKED_FOREIGN_ACCOUNT_H_
#define  GOOGLE_ANALYTICS_API_LINKED_FOREIGN_ACCOUNT_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * JSON template for an Analytics Remarketing Audience Foreign Link.
 *
 * @ingroup DataObject
 */
class LinkedForeignAccount : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static LinkedForeignAccount* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit LinkedForeignAccount(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit LinkedForeignAccount(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~LinkedForeignAccount();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::LinkedForeignAccount</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::LinkedForeignAccount";
  }

  /**
   * Determine if the '<code>accountId</code>' attribute was set.
   *
   * @return true if the '<code>accountId</code>' attribute was set.
   */
  bool has_account_id() const {
    return Storage().isMember("accountId");
  }

  /**
   * Clears the '<code>accountId</code>' attribute.
   */
  void clear_account_id() {
    MutableStorage()->removeMember("accountId");
  }


  /**
   * Get the value of the '<code>accountId</code>' attribute.
   */
  const StringPiece get_account_id() const {
    const Json::Value& v = Storage("accountId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>accountId</code>' attribute.
   *
   * Account ID to which this linked foreign account belongs.
   *
   * @param[in] value The new value.
   */
  void set_account_id(const StringPiece& value) {
    *MutableStorage("accountId") = value.data();
  }

  /**
   * Determine if the '<code>eligibleForSearch</code>' attribute was set.
   *
   * @return true if the '<code>eligibleForSearch</code>' attribute was set.
   */
  bool has_eligible_for_search() const {
    return Storage().isMember("eligibleForSearch");
  }

  /**
   * Clears the '<code>eligibleForSearch</code>' attribute.
   */
  void clear_eligible_for_search() {
    MutableStorage()->removeMember("eligibleForSearch");
  }


  /**
   * Get the value of the '<code>eligibleForSearch</code>' attribute.
   */
  bool get_eligible_for_search() const {
    const Json::Value& storage = Storage("eligibleForSearch");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>eligibleForSearch</code>' attribute.
   *
   * Boolean indicating whether this is eligible for search.
   *
   * @param[in] value The new value.
   */
  void set_eligible_for_search(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("eligibleForSearch"));
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * Entity ad account link ID.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>internalWebPropertyId</code>' attribute was set.
   *
   * @return true if the '<code>internalWebPropertyId</code>' attribute was set.
   */
  bool has_internal_web_property_id() const {
    return Storage().isMember("internalWebPropertyId");
  }

  /**
   * Clears the '<code>internalWebPropertyId</code>' attribute.
   */
  void clear_internal_web_property_id() {
    MutableStorage()->removeMember("internalWebPropertyId");
  }


  /**
   * Get the value of the '<code>internalWebPropertyId</code>' attribute.
   */
  const StringPiece get_internal_web_property_id() const {
    const Json::Value& v = Storage("internalWebPropertyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>internalWebPropertyId</code>' attribute.
   *
   * Internal ID for the web property to which this linked foreign account
   * belongs.
   *
   * @param[in] value The new value.
   */
  void set_internal_web_property_id(const StringPiece& value) {
    *MutableStorage("internalWebPropertyId") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Resource type for linked foreign account.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>linkedAccountId</code>' attribute was set.
   *
   * @return true if the '<code>linkedAccountId</code>' attribute was set.
   */
  bool has_linked_account_id() const {
    return Storage().isMember("linkedAccountId");
  }

  /**
   * Clears the '<code>linkedAccountId</code>' attribute.
   */
  void clear_linked_account_id() {
    MutableStorage()->removeMember("linkedAccountId");
  }


  /**
   * Get the value of the '<code>linkedAccountId</code>' attribute.
   */
  const StringPiece get_linked_account_id() const {
    const Json::Value& v = Storage("linkedAccountId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>linkedAccountId</code>' attribute.
   *
   * The foreign account ID. For example the an AdWords `linkedAccountId` has
   * the following format XXX-XXX-XXXX.
   *
   * @param[in] value The new value.
   */
  void set_linked_account_id(const StringPiece& value) {
    *MutableStorage("linkedAccountId") = value.data();
  }

  /**
   * Determine if the '<code>remarketingAudienceId</code>' attribute was set.
   *
   * @return true if the '<code>remarketingAudienceId</code>' attribute was set.
   */
  bool has_remarketing_audience_id() const {
    return Storage().isMember("remarketingAudienceId");
  }

  /**
   * Clears the '<code>remarketingAudienceId</code>' attribute.
   */
  void clear_remarketing_audience_id() {
    MutableStorage()->removeMember("remarketingAudienceId");
  }


  /**
   * Get the value of the '<code>remarketingAudienceId</code>' attribute.
   */
  const StringPiece get_remarketing_audience_id() const {
    const Json::Value& v = Storage("remarketingAudienceId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>remarketingAudienceId</code>' attribute.
   *
   * Remarketing audience ID to which this linked foreign account belongs.
   *
   * @param[in] value The new value.
   */
  void set_remarketing_audience_id(const StringPiece& value) {
    *MutableStorage("remarketingAudienceId") = value.data();
  }

  /**
   * Determine if the '<code>status</code>' attribute was set.
   *
   * @return true if the '<code>status</code>' attribute was set.
   */
  bool has_status() const {
    return Storage().isMember("status");
  }

  /**
   * Clears the '<code>status</code>' attribute.
   */
  void clear_status() {
    MutableStorage()->removeMember("status");
  }


  /**
   * Get the value of the '<code>status</code>' attribute.
   */
  const StringPiece get_status() const {
    const Json::Value& v = Storage("status");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>status</code>' attribute.
   *
   * The status of this foreign account link.
   *
   * @param[in] value The new value.
   */
  void set_status(const StringPiece& value) {
    *MutableStorage("status") = value.data();
  }

  /**
   * Determine if the '<code>type</code>' attribute was set.
   *
   * @return true if the '<code>type</code>' attribute was set.
   */
  bool has_type() const {
    return Storage().isMember("type");
  }

  /**
   * Clears the '<code>type</code>' attribute.
   */
  void clear_type() {
    MutableStorage()->removeMember("type");
  }


  /**
   * Get the value of the '<code>type</code>' attribute.
   */
  const StringPiece get_type() const {
    const Json::Value& v = Storage("type");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>type</code>' attribute.
   *
   * The type of the foreign account. For example, `ADWORDS_LINKS`, `DBM_LINKS`,
   * `MCC_LINKS` or `OPTIMIZE`.
   *
   * @param[in] value The new value.
   */
  void set_type(const StringPiece& value) {
    *MutableStorage("type") = value.data();
  }

  /**
   * Determine if the '<code>webPropertyId</code>' attribute was set.
   *
   * @return true if the '<code>webPropertyId</code>' attribute was set.
   */
  bool has_web_property_id() const {
    return Storage().isMember("webPropertyId");
  }

  /**
   * Clears the '<code>webPropertyId</code>' attribute.
   */
  void clear_web_property_id() {
    MutableStorage()->removeMember("webPropertyId");
  }


  /**
   * Get the value of the '<code>webPropertyId</code>' attribute.
   */
  const StringPiece get_web_property_id() const {
    const Json::Value& v = Storage("webPropertyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>webPropertyId</code>' attribute.
   *
   * Web property ID of the form UA-XXXXX-YY to which this linked foreign
   * account belongs.
   *
   * @param[in] value The new value.
   */
  void set_web_property_id(const StringPiece& value) {
    *MutableStorage("webPropertyId") = value.data();
  }

 private:
  void operator=(const LinkedForeignAccount&);
};  // LinkedForeignAccount
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_LINKED_FOREIGN_ACCOUNT_H_
