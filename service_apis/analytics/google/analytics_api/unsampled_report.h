// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Google Analytics API (analytics/v3)
// Generated from:
//   Version: v3
//   Revision: 20170807
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_ANALYTICS_API_UNSAMPLED_REPORT_H_
#define  GOOGLE_ANALYTICS_API_UNSAMPLED_REPORT_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_analytics_api {
using namespace googleapis;

/**
 * JSON template for Analytics unsampled report resource.
 *
 * @ingroup DataObject
 */
class UnsampledReport : public client::JsonCppData {
 public:
  /**
   * Download details for a file stored in Google Cloud Storage.
   *
   * @ingroup DataObject
   */
  class UnsampledReportCloudStorageDownloadDetails : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static UnsampledReportCloudStorageDownloadDetails* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit UnsampledReportCloudStorageDownloadDetails(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit UnsampledReportCloudStorageDownloadDetails(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~UnsampledReportCloudStorageDownloadDetails();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_analytics_api::UnsampledReportCloudStorageDownloadDe
     * tails</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::UnsampledReportCloudStorageDownloadDetails";
    }

    /**
     * Determine if the '<code>bucketId</code>' attribute was set.
     *
     * @return true if the '<code>bucketId</code>' attribute was set.
     */
    bool has_bucket_id() const {
      return Storage().isMember("bucketId");
    }

    /**
     * Clears the '<code>bucketId</code>' attribute.
     */
    void clear_bucket_id() {
      MutableStorage()->removeMember("bucketId");
    }


    /**
     * Get the value of the '<code>bucketId</code>' attribute.
     */
    const StringPiece get_bucket_id() const {
      const Json::Value& v = Storage("bucketId");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>bucketId</code>' attribute.
     *
     * Id of the bucket the file object is stored in.
     *
     * @param[in] value The new value.
     */
    void set_bucket_id(const StringPiece& value) {
      *MutableStorage("bucketId") = value.data();
    }

    /**
     * Determine if the '<code>objectId</code>' attribute was set.
     *
     * @return true if the '<code>objectId</code>' attribute was set.
     */
    bool has_object_id() const {
      return Storage().isMember("objectId");
    }

    /**
     * Clears the '<code>objectId</code>' attribute.
     */
    void clear_object_id() {
      MutableStorage()->removeMember("objectId");
    }


    /**
     * Get the value of the '<code>objectId</code>' attribute.
     */
    const StringPiece get_object_id() const {
      const Json::Value& v = Storage("objectId");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>objectId</code>' attribute.
     *
     * Id of the file object containing the report data.
     *
     * @param[in] value The new value.
     */
    void set_object_id(const StringPiece& value) {
      *MutableStorage("objectId") = value.data();
    }

   private:
    void operator=(const UnsampledReportCloudStorageDownloadDetails&);
  };  // UnsampledReportCloudStorageDownloadDetails
  /**
   * Download details for a file stored in Google Drive.
   *
   * @ingroup DataObject
   */
  class UnsampledReportDriveDownloadDetails : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static UnsampledReportDriveDownloadDetails* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit UnsampledReportDriveDownloadDetails(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit UnsampledReportDriveDownloadDetails(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~UnsampledReportDriveDownloadDetails();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return
     * <code>google_analytics_api::UnsampledReportDriveDownloadDetails</code>
     */
    const char* GetTypeName() const {
      return "google_analytics_api::UnsampledReportDriveDownloadDetails";
    }

    /**
     * Determine if the '<code>documentId</code>' attribute was set.
     *
     * @return true if the '<code>documentId</code>' attribute was set.
     */
    bool has_document_id() const {
      return Storage().isMember("documentId");
    }

    /**
     * Clears the '<code>documentId</code>' attribute.
     */
    void clear_document_id() {
      MutableStorage()->removeMember("documentId");
    }


    /**
     * Get the value of the '<code>documentId</code>' attribute.
     */
    const StringPiece get_document_id() const {
      const Json::Value& v = Storage("documentId");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>documentId</code>' attribute.
     *
     * Id of the document/file containing the report data.
     *
     * @param[in] value The new value.
     */
    void set_document_id(const StringPiece& value) {
      *MutableStorage("documentId") = value.data();
    }

   private:
    void operator=(const UnsampledReportDriveDownloadDetails&);
  };  // UnsampledReportDriveDownloadDetails
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static UnsampledReport* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit UnsampledReport(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit UnsampledReport(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~UnsampledReport();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_analytics_api::UnsampledReport</code>
   */
  const char* GetTypeName() const {
    return "google_analytics_api::UnsampledReport";
  }

  /**
   * Determine if the '<code>accountId</code>' attribute was set.
   *
   * @return true if the '<code>accountId</code>' attribute was set.
   */
  bool has_account_id() const {
    return Storage().isMember("accountId");
  }

  /**
   * Clears the '<code>accountId</code>' attribute.
   */
  void clear_account_id() {
    MutableStorage()->removeMember("accountId");
  }


  /**
   * Get the value of the '<code>accountId</code>' attribute.
   */
  const StringPiece get_account_id() const {
    const Json::Value& v = Storage("accountId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>accountId</code>' attribute.
   *
   * Account ID to which this unsampled report belongs.
   *
   * @param[in] value The new value.
   */
  void set_account_id(const StringPiece& value) {
    *MutableStorage("accountId") = value.data();
  }

  /**
   * Determine if the '<code>cloudStorageDownloadDetails</code>' attribute was
   * set.
   *
   * @return true if the '<code>cloudStorageDownloadDetails</code>' attribute
   * was set.
   */
  bool has_cloud_storage_download_details() const {
    return Storage().isMember("cloudStorageDownloadDetails");
  }

  /**
   * Clears the '<code>cloudStorageDownloadDetails</code>' attribute.
   */
  void clear_cloud_storage_download_details() {
    MutableStorage()->removeMember("cloudStorageDownloadDetails");
  }


  /**
   * Get a reference to the value of the
   * '<code>cloudStorageDownloadDetails</code>' attribute.
   */
  const UnsampledReportCloudStorageDownloadDetails get_cloud_storage_download_details() const {
     const Json::Value& storage = Storage("cloudStorageDownloadDetails");
    return client::JsonValueToCppValueHelper<UnsampledReportCloudStorageDownloadDetails >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>cloudStorageDownloadDetails</code>' property.
   *
   * Download details for a file stored in Google Cloud Storage.
   *
   * @return The result can be modified to change the attribute value.
   */
  UnsampledReportCloudStorageDownloadDetails mutable_cloudStorageDownloadDetails() {
    Json::Value* storage = MutableStorage("cloudStorageDownloadDetails");
    return client::JsonValueToMutableCppValueHelper<UnsampledReportCloudStorageDownloadDetails >(storage);
  }

  /**
   * Determine if the '<code>created</code>' attribute was set.
   *
   * @return true if the '<code>created</code>' attribute was set.
   */
  bool has_created() const {
    return Storage().isMember("created");
  }

  /**
   * Clears the '<code>created</code>' attribute.
   */
  void clear_created() {
    MutableStorage()->removeMember("created");
  }


  /**
   * Get the value of the '<code>created</code>' attribute.
   */
  client::DateTime get_created() const {
    const Json::Value& storage = Storage("created");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>created</code>' attribute.
   *
   * Time this unsampled report was created.
   *
   * @param[in] value The new value.
   */
  void set_created(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("created"));
  }

  /**
   * Determine if the '<code>dimensions</code>' attribute was set.
   *
   * @return true if the '<code>dimensions</code>' attribute was set.
   */
  bool has_dimensions() const {
    return Storage().isMember("dimensions");
  }

  /**
   * Clears the '<code>dimensions</code>' attribute.
   */
  void clear_dimensions() {
    MutableStorage()->removeMember("dimensions");
  }


  /**
   * Get the value of the '<code>dimensions</code>' attribute.
   */
  const StringPiece get_dimensions() const {
    const Json::Value& v = Storage("dimensions");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>dimensions</code>' attribute.
   *
   * The dimensions for the unsampled report.
   *
   * @param[in] value The new value.
   */
  void set_dimensions(const StringPiece& value) {
    *MutableStorage("dimensions") = value.data();
  }

  /**
   * Determine if the '<code>downloadType</code>' attribute was set.
   *
   * @return true if the '<code>downloadType</code>' attribute was set.
   */
  bool has_download_type() const {
    return Storage().isMember("downloadType");
  }

  /**
   * Clears the '<code>downloadType</code>' attribute.
   */
  void clear_download_type() {
    MutableStorage()->removeMember("downloadType");
  }


  /**
   * Get the value of the '<code>downloadType</code>' attribute.
   */
  const StringPiece get_download_type() const {
    const Json::Value& v = Storage("downloadType");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>downloadType</code>' attribute.
   *
   * The type of download you need to use for the report data file. Possible
   * values include `GOOGLE_DRIVE` and `GOOGLE_CLOUD_STORAGE`. If the value is
   * `GOOGLE_DRIVE`, see the `driveDownloadDetails` field. If the value is
   * `GOOGLE_CLOUD_STORAGE`, see the `cloudStorageDownloadDetails` field.
   *
   * @param[in] value The new value.
   */
  void set_download_type(const StringPiece& value) {
    *MutableStorage("downloadType") = value.data();
  }

  /**
   * Determine if the '<code>driveDownloadDetails</code>' attribute was set.
   *
   * @return true if the '<code>driveDownloadDetails</code>' attribute was set.
   */
  bool has_drive_download_details() const {
    return Storage().isMember("driveDownloadDetails");
  }

  /**
   * Clears the '<code>driveDownloadDetails</code>' attribute.
   */
  void clear_drive_download_details() {
    MutableStorage()->removeMember("driveDownloadDetails");
  }


  /**
   * Get a reference to the value of the '<code>driveDownloadDetails</code>'
   * attribute.
   */
  const UnsampledReportDriveDownloadDetails get_drive_download_details() const {
     const Json::Value& storage = Storage("driveDownloadDetails");
    return client::JsonValueToCppValueHelper<UnsampledReportDriveDownloadDetails >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>driveDownloadDetails</code>' property.
   *
   * Download details for a file stored in Google Drive.
   *
   * @return The result can be modified to change the attribute value.
   */
  UnsampledReportDriveDownloadDetails mutable_driveDownloadDetails() {
    Json::Value* storage = MutableStorage("driveDownloadDetails");
    return client::JsonValueToMutableCppValueHelper<UnsampledReportDriveDownloadDetails >(storage);
  }

  /**
   * Determine if the '<code>end-date</code>' attribute was set.
   *
   * @return true if the '<code>end-date</code>' attribute was set.
   */
  bool has_end_date() const {
    return Storage().isMember("end-date");
  }

  /**
   * Clears the '<code>end-date</code>' attribute.
   */
  void clear_end_date() {
    MutableStorage()->removeMember("end-date");
  }


  /**
   * Get the value of the '<code>end-date</code>' attribute.
   */
  const StringPiece get_end_date() const {
    const Json::Value& v = Storage("end-date");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>end-date</code>' attribute.
   *
   * The end date for the unsampled report.
   *
   * @param[in] value The new value.
   */
  void set_end_date(const StringPiece& value) {
    *MutableStorage("end-date") = value.data();
  }

  /**
   * Determine if the '<code>filters</code>' attribute was set.
   *
   * @return true if the '<code>filters</code>' attribute was set.
   */
  bool has_filters() const {
    return Storage().isMember("filters");
  }

  /**
   * Clears the '<code>filters</code>' attribute.
   */
  void clear_filters() {
    MutableStorage()->removeMember("filters");
  }


  /**
   * Get the value of the '<code>filters</code>' attribute.
   */
  const StringPiece get_filters() const {
    const Json::Value& v = Storage("filters");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>filters</code>' attribute.
   *
   * The filters for the unsampled report.
   *
   * @param[in] value The new value.
   */
  void set_filters(const StringPiece& value) {
    *MutableStorage("filters") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * Unsampled report ID.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * Resource type for an Analytics unsampled report.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>metrics</code>' attribute was set.
   *
   * @return true if the '<code>metrics</code>' attribute was set.
   */
  bool has_metrics() const {
    return Storage().isMember("metrics");
  }

  /**
   * Clears the '<code>metrics</code>' attribute.
   */
  void clear_metrics() {
    MutableStorage()->removeMember("metrics");
  }


  /**
   * Get the value of the '<code>metrics</code>' attribute.
   */
  const StringPiece get_metrics() const {
    const Json::Value& v = Storage("metrics");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>metrics</code>' attribute.
   *
   * The metrics for the unsampled report.
   *
   * @param[in] value The new value.
   */
  void set_metrics(const StringPiece& value) {
    *MutableStorage("metrics") = value.data();
  }

  /**
   * Determine if the '<code>profileId</code>' attribute was set.
   *
   * @return true if the '<code>profileId</code>' attribute was set.
   */
  bool has_profile_id() const {
    return Storage().isMember("profileId");
  }

  /**
   * Clears the '<code>profileId</code>' attribute.
   */
  void clear_profile_id() {
    MutableStorage()->removeMember("profileId");
  }


  /**
   * Get the value of the '<code>profileId</code>' attribute.
   */
  const StringPiece get_profile_id() const {
    const Json::Value& v = Storage("profileId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>profileId</code>' attribute.
   *
   * View (Profile) ID to which this unsampled report belongs.
   *
   * @param[in] value The new value.
   */
  void set_profile_id(const StringPiece& value) {
    *MutableStorage("profileId") = value.data();
  }

  /**
   * Determine if the '<code>segment</code>' attribute was set.
   *
   * @return true if the '<code>segment</code>' attribute was set.
   */
  bool has_segment() const {
    return Storage().isMember("segment");
  }

  /**
   * Clears the '<code>segment</code>' attribute.
   */
  void clear_segment() {
    MutableStorage()->removeMember("segment");
  }


  /**
   * Get the value of the '<code>segment</code>' attribute.
   */
  const StringPiece get_segment() const {
    const Json::Value& v = Storage("segment");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>segment</code>' attribute.
   *
   * The segment for the unsampled report.
   *
   * @param[in] value The new value.
   */
  void set_segment(const StringPiece& value) {
    *MutableStorage("segment") = value.data();
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * Link for this unsampled report.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>start-date</code>' attribute was set.
   *
   * @return true if the '<code>start-date</code>' attribute was set.
   */
  bool has_start_date() const {
    return Storage().isMember("start-date");
  }

  /**
   * Clears the '<code>start-date</code>' attribute.
   */
  void clear_start_date() {
    MutableStorage()->removeMember("start-date");
  }


  /**
   * Get the value of the '<code>start-date</code>' attribute.
   */
  const StringPiece get_start_date() const {
    const Json::Value& v = Storage("start-date");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>start-date</code>' attribute.
   *
   * The start date for the unsampled report.
   *
   * @param[in] value The new value.
   */
  void set_start_date(const StringPiece& value) {
    *MutableStorage("start-date") = value.data();
  }

  /**
   * Determine if the '<code>status</code>' attribute was set.
   *
   * @return true if the '<code>status</code>' attribute was set.
   */
  bool has_status() const {
    return Storage().isMember("status");
  }

  /**
   * Clears the '<code>status</code>' attribute.
   */
  void clear_status() {
    MutableStorage()->removeMember("status");
  }


  /**
   * Get the value of the '<code>status</code>' attribute.
   */
  const StringPiece get_status() const {
    const Json::Value& v = Storage("status");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>status</code>' attribute.
   *
   * Status of this unsampled report. Possible values are PENDING, COMPLETED, or
   * FAILED.
   *
   * @param[in] value The new value.
   */
  void set_status(const StringPiece& value) {
    *MutableStorage("status") = value.data();
  }

  /**
   * Determine if the '<code>title</code>' attribute was set.
   *
   * @return true if the '<code>title</code>' attribute was set.
   */
  bool has_title() const {
    return Storage().isMember("title");
  }

  /**
   * Clears the '<code>title</code>' attribute.
   */
  void clear_title() {
    MutableStorage()->removeMember("title");
  }


  /**
   * Get the value of the '<code>title</code>' attribute.
   */
  const StringPiece get_title() const {
    const Json::Value& v = Storage("title");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>title</code>' attribute.
   *
   * Title of the unsampled report.
   *
   * @param[in] value The new value.
   */
  void set_title(const StringPiece& value) {
    *MutableStorage("title") = value.data();
  }

  /**
   * Determine if the '<code>updated</code>' attribute was set.
   *
   * @return true if the '<code>updated</code>' attribute was set.
   */
  bool has_updated() const {
    return Storage().isMember("updated");
  }

  /**
   * Clears the '<code>updated</code>' attribute.
   */
  void clear_updated() {
    MutableStorage()->removeMember("updated");
  }


  /**
   * Get the value of the '<code>updated</code>' attribute.
   */
  client::DateTime get_updated() const {
    const Json::Value& storage = Storage("updated");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>updated</code>' attribute.
   *
   * Time this unsampled report was last modified.
   *
   * @param[in] value The new value.
   */
  void set_updated(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("updated"));
  }

  /**
   * Determine if the '<code>webPropertyId</code>' attribute was set.
   *
   * @return true if the '<code>webPropertyId</code>' attribute was set.
   */
  bool has_web_property_id() const {
    return Storage().isMember("webPropertyId");
  }

  /**
   * Clears the '<code>webPropertyId</code>' attribute.
   */
  void clear_web_property_id() {
    MutableStorage()->removeMember("webPropertyId");
  }


  /**
   * Get the value of the '<code>webPropertyId</code>' attribute.
   */
  const StringPiece get_web_property_id() const {
    const Json::Value& v = Storage("webPropertyId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>webPropertyId</code>' attribute.
   *
   * Web property ID to which this unsampled report belongs. The web property ID
   * is of the form UA-XXXXX-YY.
   *
   * @param[in] value The new value.
   */
  void set_web_property_id(const StringPiece& value) {
    *MutableStorage("webPropertyId") = value.data();
  }

 private:
  void operator=(const UnsampledReport&);
};  // UnsampledReport
}  // namespace google_analytics_api
#endif  // GOOGLE_ANALYTICS_API_UNSAMPLED_REPORT_H_
